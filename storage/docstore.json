{"docstore/metadata": {"1fc78064-ea7c-4167-8ffe-98c190177d1e": {"doc_hash": "667c8ba27e1b9c48fa84d80d8a81536b34159fff0e2089e3cb3bbd988cdb41eb"}, "93cc72eb-740e-49e0-b912-52a352cc5a55": {"doc_hash": "48ff659a29583ec15577825fff76daf5699bf7840e98c1d39bfc45f6990290f3"}, "937d537a-0c6c-49c8-a68e-c7cf556599b3": {"doc_hash": "77ecf407c109420a8cd1b71c3efab25b6667cec66952837786e205d08973c511"}, "76cf2f42-2b89-40fd-9158-41dfa4509bac": {"doc_hash": "ae64a21f5f5cedb1b6e95f33b9591cc8e7e6dbd8b51c5524b52bd8f2ce89da25"}, "1a682b75-57ae-4469-822c-2d409ea4d47a": {"doc_hash": "1580b6c0abdb5710df0894a4eeaa7f49286bad0e57f92909bcaaf4a4615b92fc"}, "75e2caea-88ec-434e-8843-96afa1126480": {"doc_hash": "232bbd9a6a05fac95399a071895439b56961088bf18f85268f2e68a64f1b2b94"}, "cd4e933a-4e7f-4200-9ec8-fa81813e8390": {"doc_hash": "04929208f57cc0b1e1ece3bde40f58b0ccac1d2300967a629851382644f820f3"}, "e5abde96-3f6a-4c23-bce8-92f60f8ff767": {"doc_hash": "366124a6e11f8024cd8ebdad756a1a8b364c6ea89c204153755ceac61c69381d"}, "75b412d3-b1e4-4caf-bfcf-c13b11826af2": {"doc_hash": "8a98ddddd9ef1545555369548ade1c7d14d0362caf97fadec9e1da9a5a3c3c5b"}, "9bd203fe-3128-402c-a379-e167508de592": {"doc_hash": "f2e6eb6a63636edd255f7ca71d2814db95ef01caf894a653d1a8fdaa8cf43a93"}, "9385521a-f393-49a2-aa85-666445066e86": {"doc_hash": "ff5334e292a16f2f3aab607e8414f0df40f47a6d83ca4ae7cd52b72a41585965"}, "788d64a3-cf51-45da-acfe-ca16fa10667a": {"doc_hash": "2d56bb40cad8a81cbedede8f9823f0be0d817fc5ed2957c9f68d9c84ceb7e42c"}, "332c4430-573e-4657-bafa-244556849206": {"doc_hash": "34d177d165078b9e15ca7b1aa0531b9e05d6c7e9249a841e8adaa44f55550fca"}, "fd9ece08-9d5a-41cc-8283-68dcbcf9cd8d": {"doc_hash": "64dae9f700ae1cef7e3baeea196aa038e511af8efba65ee4fdd231d2cd4cae0e"}, "14829715-261b-4708-807b-db3ef7ac1309": {"doc_hash": "6e64a93f5ed7b6e8142c74c320ab503f7aa1c09a3bda6b1744bd1f5940cde808"}, "16517f0c-3ddf-4cd7-bfa2-af8ae3561c33": {"doc_hash": "d886fb63d9156755aa3234b66c8f0fbe1e2b32732da45d324c62b7c7ae7b9610"}, "79cef94f-d082-4cc0-8947-a9314abe67ad": {"doc_hash": "7660dee7739ece121ec24fb9b636aac87cf5e0f99ebe0a592bde385701d9f149"}, "7ed27810-d927-4876-b307-9c68e0e37cba": {"doc_hash": "2919dd109faafe1e6baa2b4b32f42d3ba563863f7de38fb6d1867a7d55d2bf33"}, "0038b57a-9f8d-4ad3-85f5-0a4a6eb67dc8": {"doc_hash": "da6a8a00913883d49a5c11cb3a9e499ac428427addf62730edfd0a9bacd18d97"}, "dc1fe8dc-af02-4863-964e-620f837e4de8": {"doc_hash": "d3e32611158342d10ba72332896a4f6f5071ed311049715d8adf141f70c2303d"}, "93c87d61-a3c6-4d18-b2e6-af406e25dafb": {"doc_hash": "096aea3bc80758a689321021f4b32de0e7979bd3e32c6740fd38662b82894361"}, "6106e3d8-03ba-4182-b432-0395c0c6daa1": {"doc_hash": "9e7d4b5b0ea664688f916cb277f79df95de69cceaa933952b13e8abdb3cc4116"}, "bb3693ae-3f00-4e65-8975-5996b0799561": {"doc_hash": "e5e4c0a77619592c983f8bef9dd094109dd5a5fc733595e680864231d3613bf6"}, "8ef7b7fd-7ccc-463e-99df-4c4a33ad2fb6": {"doc_hash": "350b8b3511671e78aab21ce7fed1d6eac7b5298aa52dcfe19d41f116d1e73500"}, "b8120285-e08d-4d5a-8771-c8036d7327d8": {"doc_hash": "525fed6d9a3ced55196b077e920670a27a47d297eef7dccab739be511d6795d3"}, "0fef6c74-27e7-4b06-9e8c-bc0a0aa6c12c": {"doc_hash": "70e86d1ef7c1a3a2fbc19e5e23f42e133eaca06c240f11c30123e8d5209ca431"}, "181cadfd-5b2e-46fc-8a24-bc3d6ebb1bce": {"doc_hash": "ca92aee2f3dec0c232bd22f3a40a3c54447a83c61fc67e01e12afe12d9fd2811"}, "998b880a-dc06-4f31-8f91-0419d7c27580": {"doc_hash": "8a16cdcbb51fe7cb13660b57206d27bd4eb173e384adde7886aacb18faadec01"}, "479869ba-de91-4fe2-9885-a0078f07786e": {"doc_hash": "3a66e6df3dca6bdaf24134bd31a412bab367ee84355dec4a90810a80bb1164f3"}, "19fa349c-c052-4481-bfa7-8d4fc813cdcf": {"doc_hash": "eb712bc075a3bf98dff6cccee1fca39d1b9764a1f7dbac7d45bb07b95b02fe30"}, "745f9cb4-f410-4e21-bcd9-39e7d9266a99": {"doc_hash": "0dda50ec840357dd33d8266b1ff041d901813e75b26e38e917344cef5b459f9b"}, "1b7c0615-a836-43a7-b46d-5a90a494907e": {"doc_hash": "5e8c6c635a473e71d520902fe2cfcd50621fd202503091f5a7163746fc9fd580"}, "f11bf69b-469d-437a-a466-30e6ccd2a92b": {"doc_hash": "f9f6e65b242d5000a25eff8c656fe6f88eef7cd39460e6eefce5c5ac471059b3"}, "00ec6ac9-caa7-4aeb-9eb8-5973008c0c43": {"doc_hash": "a04d141b86c0a50237fc07b15605dff767071e8fee9bbe1afde7eb2c32762cce"}, "3e41906b-466a-4fb5-a7ec-2b58dc8ae5c2": {"doc_hash": "39c9bbf9b02f05063a1a1ec91f71a5a263265e04defe5433e6beb9b60d5d0d81"}, "9e568726-7098-428d-bbeb-0fc1d0f6772d": {"doc_hash": "7846d04cfc8a6375130379b906c6fe3d4e679e68fe47ca0bc32e714f5bdbfbdd"}, "8a1f228e-da52-4a35-ad14-9d43e2a5434e": {"doc_hash": "707db9fd28cd716b68cd665b9d097a02f91fc61d0b7b345426f765e51d45587d"}, "eb8d1dc1-5210-44f3-956e-f2953500bca1": {"doc_hash": "f2480a77e29f1847429df308fd5d9ffe89890c0d5ef6472f4002ac0888f5a426"}, "c9ac2dfe-19f7-4abd-8ba3-4be1b1b29728": {"doc_hash": "c0a15e4149c04cb7121dab883a82c2987f9ca82f5bf6b50b748c409590b53c2f"}, "506ce9c8-3223-48aa-9aa8-580ebd80361a": {"doc_hash": "6b1fb1173e2a8f9f4b494fe07ad7e78677f3644d6b2e54d5ae3c85e16b402812"}, "521db331-1c28-45c1-a2f8-1281bc95b45a": {"doc_hash": "5c1a8efb2e73e596c1f8e7cae0c74d85da50faef1861dbdd9a5af6cc7188d8e6"}, "dec5d630-11c5-4b19-be9d-f3ab5e034619": {"doc_hash": "ac4270ac2e74f6c8ea9a1fc99b224202d05c29dd236cf7ff369569e929bc93cd"}, "cca06269-8c86-4187-99ca-fa98bd58fd7e": {"doc_hash": "5b9f614458a90acda180e434b2c0d7b701a7df1ce0df7e23275d4247831e9331"}, "f165c7cb-ef86-4c48-a256-63bdee108582": {"doc_hash": "f4f153340496a4647fb27a65bf7c8a85b9f78c98d99ce1e01d3f39f75745d887"}, "067e13a8-c43d-4bc7-ae56-9a21c6084db9": {"doc_hash": "46585a339378ddae4426d345147d3e5df5a6e054525d33f9f9951a3ae32749ab"}, "b9c11804-5551-4b8c-b393-d1b5f0395f19": {"doc_hash": "06ca6eb23c3b8f4bc1bf24022bacdf59418d392de68bbba1b28ae8dbd6e24475"}, "024849df-666b-46da-80c5-1af2417b2486": {"doc_hash": "5fc8437a6c9e91036336e293f83828c11e9f3dfe8c70da7b4c537c93eb1b26e8"}, "fda53c78-1148-481e-936d-80ff4b680ffd": {"doc_hash": "bc553a00a1f34097c5a63fde93b1a096dd9128f12825408abdfeb385b32fb4a2"}, "f098579b-dfd5-462d-8f4c-d9bdc7ea4374": {"doc_hash": "2a85f07d7c83b3fbd154cbb4bf9bfe6377e4247ac35b5b3ce72f550b95a5a19a"}, "0691f2ee-29eb-472e-b1f4-c5eb24e299c7": {"doc_hash": "63497a74a7f335ed6e6f64d5c0c6d307dcb80457e73d0a2159e48847116fb21d"}, "cbd1ed40-0742-4a7d-9a18-dc2fa04dd135": {"doc_hash": "7916957c1201886fb4c24c05c07b77b51ae9c16ef63e637cb5eaa2b7c0df8840"}, "c26aba46-f344-495e-ba3d-f5c7a78e8b47": {"doc_hash": "a872e7e494c4733c7218a0b75253d71a083f67dcd674067302f2bae4b687fbbd"}, "dd090b03-7d30-4ed5-a2b3-187d23e76563": {"doc_hash": "9cee26c94c591e2b7a5ea085d22ccd49e6abe6a66d4c7cecd7404ea2ab1bd311"}, "af49f4ca-efdd-4780-b2e8-5c5ccf00ec05": {"doc_hash": "58e42faaf9d95bb579c59d71b8a45fd52ce573788b0400c33fe6acd7de3d91bc"}, "9c3ba92a-3cb0-4d13-9f75-3d6300543746": {"doc_hash": "e4755a094ed4262d308b431f8cc1d07085fee2d93a9adea3ba8a49fdca34d07e"}, "e7b405d4-df5c-49b0-989d-496fa7546953": {"doc_hash": "d5358d5b54095e19a708a0ade04683d6d764b1265a5166f354d42a04b409a0bc"}, "00deea5d-d926-41db-a9c2-029e0d7698e4": {"doc_hash": "44fa183daf41cc89e15db7181fbb9facd122977a618c85dba1bee931435419ee"}, "def17cd7-5e01-49b0-bcce-b1986be4bf8c": {"doc_hash": "b677d98f1336d7b65b586350d4c0227bd3d27d6b1df1e8fe378c049d0de15e3d"}, "698a8a74-e54a-432a-9149-3ae9f87b9562": {"doc_hash": "0f829c5656c9db11e631432cf8c51a6335633d5ceaddeaab12f97846b20cba74"}, "7c2fec44-3bfd-4272-aa88-fda2a7302ee6": {"doc_hash": "f49ead79b3ff2049d3cd493708a71f6083c00e6c83dbb12d1681f06be5677134"}, "b9b21ca3-b8b6-4f7d-a5ae-2171d2af6874": {"doc_hash": "2df5025863d3babff8eec9205c55dfa7be5983d3b4cc87312671247a31559f58"}, "26b94b5b-d3b4-4256-9940-78d4d0046a7e": {"doc_hash": "a4de9a1d7845d366d2d0a0a991b0ff749ace91163a603f18239e5ee3d97c4e36"}, "6251bbd6-6e3b-43a7-b707-a007793c7b03": {"doc_hash": "2a997e6e85a91b327596cd4d2dc896c5cccbe14edaf1ea0e2026e85e1c19238f"}, "6f372d4a-f16c-4429-95a6-2ade8d9e2aa9": {"doc_hash": "3824fd3074b87f2db1b41f4a8d59722af623fee3b253f3b63192d9b1cad8a1e0"}, "9b72c592-4396-4cd0-ad52-f786bcd31984": {"doc_hash": "6ff3e9a71a99e913b203b4260121e2c06635f9783a2407e456d019b1f0d0a54a"}, "d05e3670-f9a1-434a-adb3-6bd0cb48366a": {"doc_hash": "499967043e9a26f2cd430f69e98a50102cc94a954860cc54ff7281ce3d82759c"}, "d73c636b-772d-4fbd-85ed-4d0e20c12e2b": {"doc_hash": "fb7be36ba805b3bb08d7afdfe7c331477430b6c40e5c7882b23b358fa0e7afe9"}, "3eeee39b-136d-4c42-a651-b62e6f6676c8": {"doc_hash": "9d1c3c6a08799a1a5962d946200662eeebfe49b9db907d239e19865b1d8a3295"}, "e2be1430-634a-44a7-bb14-97c3ae93224d": {"doc_hash": "f0d77c747f236acfdf82aa97f0b7a1d57789627cf5dac88c6bd5359753aaa326"}, "06674421-1035-4740-9bfe-70909ee32b22": {"doc_hash": "ca0e79d140613e8eab378c74ceff6107e8d4d6b4b48e782280a3dc515f14d9e7"}, "c99639c6-395f-4bc0-88d2-e727ce4c8e7d": {"doc_hash": "a83c3b9f6c9ffaacfff1810b74d052d47ed852d0d70d2637d3f99dc95434e733"}, "26d5cd0a-1915-4f5d-9ee7-ba2d6b280851": {"doc_hash": "bcc5ca806214ee6cc9310371bc3ce4be7665e2cff93f6a9a281152cd80cbd231"}, "c902ec95-2102-4fde-a931-f696aaa59f4f": {"doc_hash": "435cd551780ee11fd9b2db57baa7f2beb4d7e8fd6d0e517e1821dc308d3a86c8"}, "64ae019f-daf8-4e3c-9190-3156a73afbf7": {"doc_hash": "b2088e4ea272ac48ce00d88c8bd68a8b00188e6e1c746c8a2eaa0463d8b91109"}, "190e7c32-5bb6-4779-bc87-1d189cefd086": {"doc_hash": "5f8c85826888cb35bfd809bc153175828d1c9b166e95dc78130b8bc92b619f9f"}, "041a159b-c2b8-4b32-aea2-dc5d653bda0b": {"doc_hash": "a3559cec28f7dd1d9716b08227d72d69c633067b5380faa7d992c1e36bc62b78"}, "2d2e539f-50e8-45c1-906c-d4eecfea7873": {"doc_hash": "5f2e9d82de27a182683dcbf3d4c45524cf7bf8a218278d4fd96f1103cf0807cd"}, "23d8fa53-baee-4bac-a42b-f5ca7fa81c57": {"doc_hash": "fbcaae0674aed317c6a0187d3b5c2f5d9e4d5f7786f940b861731e42da553cc1"}, "39cda3ca-0d0c-4a30-a16d-cee5f34625d4": {"doc_hash": "12272c9c0c9e2f4c7e4584d1945efae9b7ba226d3ea009a563105914887cd83a"}, "1f5dac9a-ad3f-4db3-967c-17cf4e7a01e3": {"doc_hash": "795fb3cfd9fe050e43fb8693ca940d6a1db7d34a1596cf938257aaa7c3f5eef6"}, "467857c1-e23a-428c-81e2-b58354c2e31e": {"doc_hash": "e89a1f7da1bf08be54d4bd9ae81a698249bfc0fff618df625d58465d81ed3d62"}, "e7484857-7fab-4815-8446-41e8972babe9": {"doc_hash": "12fc5295df61e4737906797ff0fb01a95c2234fa3752ed88b19de9e47259a7a0"}, "8ba7052b-111e-4942-85af-452b9debf7a3": {"doc_hash": "e212766b5482c6201971c6378ac1ee991c13b51089e3b3c4533e4f5322115224"}, "56a58a3c-ab39-4ad1-a865-8b0f5a19e001": {"doc_hash": "b266145533fa0318337f0d71a1d525eac3c9e8537c5638eb5d881a96f0d0bb02"}, "cf275501-bb30-4630-8260-7bb57d2c01ba": {"doc_hash": "30b24a100a72bdff47500e4acffa4ad85fb3446658f882ebf048378fa3e60862"}, "fa9c7b79-c2d5-40a3-9a04-66b8dd9538f5": {"doc_hash": "ee50bf0201a6fe421a3af86e969c8f2da674608b1b95a8aed5135f7ae3ccd5a4"}, "0d26911d-c67c-424f-ac39-0c20e020f4dc": {"doc_hash": "4c5008a68530a4240534a5125c7deac1c4e9cfd34f7a3a3763e4d760bdb2794e"}, "31562bc2-6ad9-4b52-9b67-b113d9c9e76b": {"doc_hash": "1956c7271936583495218a67ed53c295111603d99c674092163656f5d5021e60"}, "6d380e5c-37b5-4bf0-a82d-afaef7af1e4b": {"doc_hash": "008158eebb5ed99a50142f060495a9274598d83fba4ebb1ee4707644901b67da"}, "d265890f-3ba3-433e-bce5-e91009873374": {"doc_hash": "fa3d4e4d0e4e22a8cef02aa5de60676e2967c38adaab20e06e323315f5e34bba"}, "9d4de25c-a719-4a26-98b7-7d5d2ce81a5b": {"doc_hash": "a2cdcbf202a07c1302311ad512f591fad5a12df1395800a63d8afb3e254eeec7"}, "9a6280d5-c568-4a8d-b717-106bb5e089aa": {"doc_hash": "b521fc8b28f9c4b27a097fca3037d02ee344f4087f2bfbcb5935233296d562bb"}, "8c53cc7e-c22c-4049-96df-d2dab8d72145": {"doc_hash": "cf11e775c13b33973a4dcc0b18d90840731329a654072ccacd607a0df5ccc9e9"}, "310624aa-2fcf-4c5c-a73e-db7ddc2d5da5": {"doc_hash": "99e7d40dc26507eccc55b94d8399927802e14df9bc18e6086e7ab57330a65191"}, "9413569b-8885-4682-8231-0d1c61c7f426": {"doc_hash": "2a994e62ee08e4856ce954083117c50258ad460ad0354c5388d38deb1452c067"}, "95c51f7d-9d54-4889-afec-6283d0b3550a": {"doc_hash": "fdb9f4566fd00cf36026ba8ed07bc872284fc1c8420648dc0fd469a8a74cd6e7"}, "940aa899-06ea-4a73-bbac-dd661b1e6736": {"doc_hash": "22af1f1759cee923faad0921e0e90bd4fefdc6ebec51cc2b01dce051871e0eb7"}, "dfe88a7e-981b-4ba1-a92d-db95efe04f7a": {"doc_hash": "336f43ba8a794a0713f4b44b0074220979dae2e65173df02172d68c6e2c21948"}, "9ad62dac-a812-477f-8b63-7e515f71adc9": {"doc_hash": "63f17e3c12694184308c9066068da51a5731238e92f55e060fc81e96eabcacb4"}, "935b8148-2f43-495e-a165-8fd3f3b82e80": {"doc_hash": "4b04ff5e4f9a16e0281fe1bd7368f9c2452b552849cbe1b4d81fcc1322489567"}, "f903da9f-a2fc-417c-8f9f-6aeb5c20da39": {"doc_hash": "c8614e6f9bcdf05ea31211aaa7766c929eb6845ca6bc224380bd4da984c9ef0b"}, "ff0741f0-b9cb-4102-98e3-7cc6e65b7c61": {"doc_hash": "630b5051873af85a1867d4e96f7db2426cbff323f2b10267542d6f5d75411bea"}, "aedd1df4-f4b7-4cae-be44-9de39544658f": {"doc_hash": "ed8073050ab5172cd38b31d93599208a5ddaddc8785a2df4806ea2d68dba2d0d"}, "d3491f8d-09e8-419c-8d4e-017e94defcb2": {"doc_hash": "1ee5169db9904de4cfcdf2a52feb95706fe11cbcc0fdfc0cc44efe5d684a6e0e"}, "15631da4-1411-408a-952d-045e94357c9b": {"doc_hash": "f308914281b2dcfd46eb0220d6d7165b87ee7a1140f4cbd0927325c3fce12e7b"}, "f582e90a-fdf1-4a27-97a1-3140be02b491": {"doc_hash": "0e30d69ed8650c085bff6341f469c956ed04254ee8857df35f2f975dec82c454"}, "2618e903-bba0-487a-b68b-83c937a06020": {"doc_hash": "05faf618fb307c9392cbdebc7610e2a70f7e5e051c934092ee40ff615066660c"}, "6fc69100-3289-422b-981f-e69e2252f04c": {"doc_hash": "1b98d884a9a7454af39f9f5abad8b3a2d9542c01edd4e5faa3a9d2da82ef7f04"}, "bab9c87e-cbef-4e35-a7cd-621e67a17d79": {"doc_hash": "dc8ac05e9b0038ca028726fe202dde750949e393c6c00f3eab5f1d914d880477"}, "a282b95e-76c3-4aab-bfd3-92c048856308": {"doc_hash": "2ed4bdb997d46b8101a87e928bb66a37faa8c796de9caa812ee660dd1ac6317d"}, "007a4aa3-3666-41a5-9183-c700a9cef904": {"doc_hash": "624395ad930aafb9c2c4570af0f2eb8ddc1df7dfcd3e129005bf1abc6491989e"}, "c6f2cdf2-e3dc-462c-a3d3-ae26931f0e65": {"doc_hash": "cb6f65518ad5dfe112226eb6c4209e3169262ea194bd0529963a28beb1fa8c99"}, "57f3d04b-6fbf-441c-980f-e46ebaecc55d": {"doc_hash": "a58a9ebf23dbb39c5ddc2d1e3d2709943ef41a832b17bad081c33971d27665fa"}, "100c06f3-70bb-415f-bcda-2fad0d1c1cac": {"doc_hash": "de12983ce787614f01b2bb35ab1945556d0e9acd41636d9a25101b1bc1d2d64f"}, "b6f0ca96-d944-4d73-8315-97cf5c8ad3d1": {"doc_hash": "f3d8536cd11192ce433b990f5b6455d4e86161de52b651c4b21ca8981fb4d6a6"}, "13947329-c54d-4c86-901a-511bb8753032": {"doc_hash": "ea63556ccb5b51040b1bb720b13987fffa7a41f21c48857a0d9e56f9182b27b8"}, "a7350025-1754-422b-aacc-869a13bb1805": {"doc_hash": "3d5c3097b625b8ea8e4fd7afbe621e55b72571d97fdc02bcea52a610775731fb"}, "5058d0de-fc90-4331-8f33-858482122957": {"doc_hash": "88359e1bed6f889e280f729db89fa3127d9aa73e548bb63f4b8d9558a392635b"}, "1efa0a96-ca69-4f3e-91a6-7c651e568e16": {"doc_hash": "187388696c5a17f8523a7e1e1df4bddff37fc3dc9d753e0c81956ca3f961eb58"}, "5fd6bff1-d3e6-425b-a614-0e00b78e321e": {"doc_hash": "6fa707dd4cf81d0ecc99c3e8d79116ba94b671e8e247b65b9dd43a7a62f9ba98"}, "fc6ca18c-01ba-4865-9a83-edfdfbc88f02": {"doc_hash": "c1c99565ad3fe31c8d63a9d978ce7ef28063b0da9cb18234a8874dc8b1f1f7ad"}, "644f9537-32a2-477f-80ae-7e09816a87d6": {"doc_hash": "65df3127c1fd2647ea39eefa261760e182e1b553a2b29ec59a92262f01305a03"}, "7d62600d-d939-4f9f-8faa-6b58249421c1": {"doc_hash": "3e3b454978d1ab03b4dcfe0e3d2261bc8fc6081849fe38aa3bd5765ea6bb7a72"}, "485b9608-28cb-464b-934c-5041986ea7e7": {"doc_hash": "b73e320bdc468e292634894d7212f307cdff27a39dbaa7381076628a9cc93f88"}, "b4bf828a-a92d-4c7e-b481-737298f2415e": {"doc_hash": "cfbf20d101ef4afefec67a23737d3639ed809b2a5e26e8bd8fc1dba24f947290"}, "4460a739-0778-48fb-9264-d1d47973cb8e": {"doc_hash": "c6cfb1ad51627c3c562ad90925577d3f668c485ce6417d52c99a86e2189b2b63"}, "b51da2c0-5a1d-4a8a-bd75-b7badb4fb94a": {"doc_hash": "4176403a3790ba10bba298bd8bd73ad01117d45cfabdfe1637b3838a8fe8e6be"}, "cbc270dd-7139-43fd-a2e5-6ffad0c7d0c4": {"doc_hash": "950e9ffe4abad87b79e6f1843fe4d34d78096ef22262971e4c17efa21b0911d6"}, "3e7d8348-072d-42d8-a6ed-fa6c06bed413": {"doc_hash": "979b2c5915853e68daff0f59b00ccf3671006628f965880c7dbecdfd477271c0"}, "7f1a1ef5-fd8b-404f-930a-079a6d2c9193": {"doc_hash": "c2523c6df78e1f0e53f26fa0023b1d9120ad5a9b9a7080ccbb41824043ee064a"}, "9fe96171-9e83-4d7c-9e9a-4a11b1f1cb2b": {"doc_hash": "0e7519af3a508a70cba91682c442e776fa2e7b3c2de25af7adbb76566c711f55"}, "a0635607-1f7c-4d33-a2ec-a5f127f6fbb8": {"doc_hash": "812affa16becf2277855f9df19c7dfccf30e5f29fdf2edc1462d2886ed356841"}, "ffed1bb5-ae2c-4b88-85a5-e7eacd4f1f2d": {"doc_hash": "3867fef354dc7425fb947ced4e3a94fe1849c6d244ee173b9d87cbf5e4dc1a9a"}, "ab83186c-6632-4aa1-bd4d-4886df9713f0": {"doc_hash": "20af0e06546f6195ea2543ef96c395115864b3082ce9539aae0fa42fd1d9e330"}, "ced2817d-3870-49c2-b564-aa634cfbdbba": {"doc_hash": "ac65006dbf96027d6f02cd3ab3af959b1951468d11c5635e4e38b9ec4526a2d0"}, "ccfae469-3d91-4fbd-a091-c9bc4d364198": {"doc_hash": "8e580494d52955969aeaddcd289c2aa15fa7eb5d1be4a8cbb9a43ee50a1c1064"}, "5604b322-4d05-4472-832b-f5bd0b703a68": {"doc_hash": "1263661c711d6101296e8180c26f60b2b80348d1e2b3c78890d3a56cd5d68102"}, "29b8969b-bbc9-4587-9ca4-bd340120a4aa": {"doc_hash": "57b6ceb1d6b00f92df76a131b2c019037f30c62d9368fe3080acae5a352f3271"}, "e01ad11f-a4e2-449d-95c0-530046007c6d": {"doc_hash": "aa0d1a838b3ba1830f24b55ec44fd54626c11c27932a80de64e5751d9eb4f906"}, "19fdb505-cef2-42fe-b064-95ec8a4fbea6": {"doc_hash": "e69928f5b2bdede89ebd2f8f2206abccd9213363a0e2f4a42d1499bc677db80f"}, "060230c5-bb69-44af-9482-05c8f2bf7dc0": {"doc_hash": "b84bed86d09044d496e65e204842f08ad56a6b50bc845b4f33a1ca2c5a86ecd5"}, "8c6984aa-dcb3-4469-9379-1d2922949b40": {"doc_hash": "4606944deab68f5f593c4a7d83bd4980c3c055800f337659b86f8abd8786a0a4"}, "b7d74deb-ec9c-485a-8a92-9b8ed8b821bf": {"doc_hash": "03da3d8bac87064d2c36a9a9699afbf8fdedf29e6a02051a9c6009d581c22814"}, "ab223abb-0a7b-4d84-8b80-a5568c3f01ff": {"doc_hash": "a09713fcc2088347b1b5ccb019a22530a67e9057a4f206adf2e930f3e3004ea8"}, "cd494963-ecb2-44a3-bc31-847820c68b00": {"doc_hash": "82202b53ee7893f180e05f43dc9e78dd481a88ff01f17c52a779656bd10db532"}, "a75e0141-1417-4abe-bdc7-70413e55316d": {"doc_hash": "79a6525d9b6c2200644eeeaef27de9068b13f08b9945d09f5c68e80444aaef88"}, "f23b9acb-eeaa-4513-9340-9a21ed6954d0": {"doc_hash": "eb99c3bc21aeede375c3dc4554d348e827bad16eba62051d02b13f2363f6ba55"}, "3df6f536-ea22-4f2c-911c-02fbe7118229": {"doc_hash": "578613f545d762899c4880d49cd39ed001ed85e6ac58bf265d80344924f4874d"}, "72763741-b01d-481b-bd09-46f3899a78d3": {"doc_hash": "1fe70ddc8a244751dd74876d77e5675e4f90c725ad18577a1a9efa6c6961555b"}, "714ec507-0896-44aa-ae89-0ec98ccea9a7": {"doc_hash": "33bea2cfd9392288b044b426407adae1179217e13576da492deb437384d55410"}, "8eb519ee-76cf-4db2-8954-a247818fdff6": {"doc_hash": "3ef51e2077c4dde88654c8297f00710d125f9a8639a23d74d5d1e74f67cae2ac"}, "0fae4ee6-d962-4347-91a0-ebbf93d558e7": {"doc_hash": "93cdf9e5a8454e060fd5d6e3b57f1fcc998eef4ee62f0d98c2a89bfb419534b6"}, "de63a42e-6d58-4997-bfb3-e58ea11ce748": {"doc_hash": "6cff30a67415cd1d0a8e8eae4c437fe0b2543f1e1817051cbeac1a75e69ebafc"}, "edf8e059-c964-4854-9887-ad2d6fecaeb8": {"doc_hash": "eb4805131a577959c04930e0ab04645e8fb0f48129971bab9b7a14322425fee9"}, "e6b5dba8-d1c0-469d-a6a0-741a2c07027b": {"doc_hash": "418a98e38c92d1cd933cafbdb98e65b7d6dcdf5f04ceb7e68f2f35d90fcd52f8"}, "2a2aa94c-88fd-40f2-ad87-a232943b6fba": {"doc_hash": "158f34035188070809542626f297af30beacb57b553f854b75873ae8ee46a462"}, "aca5c4f3-1022-46d1-a90c-021ab4ab7129": {"doc_hash": "676bb7bbafca0b4d622ed1d762b389a17e73bbc3b9ac44380260053167339b76"}, "a94be88f-e238-4004-b88a-726eba5e0296": {"doc_hash": "17e248a1056b48667a701377f183573855a8422b99037b4f6b2dbb09db1a2b9f"}, "a5e3c7c6-c0e5-440b-82f5-44f6d2edb657": {"doc_hash": "18ca52362ec240c888314a1b9a16e408e4592226bcde3f03e8f9cd9dc82da91d"}, "0c0aef52-208d-4f11-8f08-f3f4b6d51032": {"doc_hash": "cbed839df2fdac6a89664cda0e49433cc09fb9a7e5eff5396f86944c6afeb495"}, "67dfa0a6-4abc-4822-9a4a-4f35abd05085": {"doc_hash": "465b89e529938a291a2cdd8532fcfb9c66d661c88f0ff2121862908a913293a2"}, "e95a53db-59d9-43b2-a603-fe6837875221": {"doc_hash": "dfcd8054a7d63bbb0b3ed73c2c6f720439cabac53798466847b786b175fa7822"}, "52947ac4-7a6a-4404-a868-60d87b8b4c84": {"doc_hash": "fd84c3745294e01571a4b53d27def6a0a532965d73a6f8ea90ee9e560057993b"}, "9fe608d3-9d31-4070-91a1-fe8c2628b4b1": {"doc_hash": "f755fe371689599cd67e8cc50d84a8aea18c24d32a2ffee3b3012e4cc24e43c1"}, "9beb838d-2898-4fba-8a1b-b163dff6db33": {"doc_hash": "3145d26df3610025e9bdba38646799d903582ab5bd3ffa44e73202f81e90a0e6"}, "0ed2d918-58cb-4fa4-a407-8bb73b97e3f4": {"doc_hash": "ce9d6b087fa84dce7cf9494f433e69b8b6cdceea483750459f9b8776ddac89e8"}, "74738175-42ff-4da1-ae30-aab93d2ca1df": {"doc_hash": "970a9d982855adc4b1985d005db47d137949d65f78c7fb201f0aa95ac7bf7032"}, "485504bc-a9cd-40f8-af6f-d936185b770d": {"doc_hash": "ee1eb10e538617ad30fb7c6a8d3b17f1c0c4feb1e9fa44d78ac5d06d23b6d608"}, "ce0793c9-c9d0-4516-89f1-640c3b33c5f0": {"doc_hash": "626f854c6c25107c4dd01af4ce0c57e0ccdfb0ddf09d55d1d4d23637c40e2de8"}, "ae72cc41-af57-4eb6-aca5-45a68c3b1a87": {"doc_hash": "df7efdc1b7549d4d44f59ed8bd4883a9b28cc6604077c2bca550e8d6a95ab226"}, "8788565c-4e78-4af6-85e8-1df101755bcc": {"doc_hash": "56b817b632c333f05f9fb1f10a8e12f5e8ee5e73be9b6dc792a4e06479282f7a"}, "4c0fc5ea-f921-4c26-a94c-8dc1728f8383": {"doc_hash": "6642b5acb82c1d5bc8d9b3e130cbd0f8c8ae29d38259fa5aa111bb6e7b9b1578"}, "d9d5f245-e020-4bdd-93ce-7f442dc9a6ab": {"doc_hash": "9ec2016547148503f9ba956becdab5d07b90ce85909f96a682004b364e37c1a2"}, "75490930-70f9-4af4-a1f5-da9f7f3c0b16": {"doc_hash": "5ac86b3846dd811e2816230456b973d79c62313110fdfe2d6da1851e6c7f11f8"}, "1cfadb7d-3cef-4e79-a048-20401eee9cd0": {"doc_hash": "e5309ac828ca3e81c2a16cb185b6f24194ca263251acea3bb1a7e939a806b9df"}, "36df0cb3-0a48-4a12-b686-4ce51925ce26": {"doc_hash": "36c0730f5ccf84017929c3ad98186543b6593cb6ce0fffed3f5f2223192b9025"}, "872cbf77-4bad-469b-9d04-cf4638d3b2e6": {"doc_hash": "5afa96ba78e37af10c7acae58d2d3101efd42db644fcb67a3e54e1e3d5c2fa5e"}, "0639b309-22a6-4cfd-82ad-3e4487fa7a0c": {"doc_hash": "ced5399b1ac672579e4c8a46bf9bebb8d14a4bcd3073908c71f368e441c5e481"}, "871fe5cd-8532-4c0b-bb0f-d29ffd50b00f": {"doc_hash": "8adb390cd9dbfae9078e4fbd8a9ec09e38dc1da2040aab827a3780744e687757"}, "489993d1-fc5e-4abd-987c-a2642d40fa5b": {"doc_hash": "fb1235dcb5cf4cc223db326d7ee617879104e7a3751954b01d7e06731d851c1f"}, "59a487ee-3951-4d7c-9772-c1a48b14cdc7": {"doc_hash": "db1bd34a3c68bc1e0150d17d53bfc68885df440d832dd135518eea943684fa0c"}, "a8a9a2a8-413d-4b6b-8c13-76a6009023bb": {"doc_hash": "711b4a70926ad62ac4690ef6e0e6acf322ba3822aa82ddd96bfa99594686e60d"}, "12cefabd-993c-43b8-bfec-13cd62a35942": {"doc_hash": "7c3ce701bf281dcd3efc992b4926287137ff0bfc1a11600d6df14494a12cd824"}, "b84946d3-875d-4089-858d-4e17aa07f35c": {"doc_hash": "8a7b27a17b05b7fc6d0495e80f5e7cefdb4b5fc634b2bb9cc0c166dca9f3467d"}, "feb09f25-4454-43ef-8f30-4fbcce9f0ee6": {"doc_hash": "608071cb00a0bfd6812874e8b094ff48ca330db7893510512a344a10745224cd"}, "0369e09a-9540-43ed-acde-1e3f374fc5b2": {"doc_hash": "8ea55fc1d090bba396165eb626317ff24ac37be123a55c1291dbae40e3b42877"}, "e7395fa4-0985-4177-8c40-f860ef7cbfbf": {"doc_hash": "54ba125896794a3b871fccf6b9c1403ea437f6c4e3f1dccbeaf0a03ee73f24de"}, "4790a5ea-3660-440a-b801-8891b87d1f6e": {"doc_hash": "47abe1c91bea7185175684cbbd1c3ba8956e3a2d4bad92471ec8fdf97ee8bbb6"}, "df9dd199-68ad-4498-a2a9-401b015a3ef1": {"doc_hash": "1101bae9c9bb40a3890341a630968d31740225dd9014ccea1814c3c28fc2c660"}, "5c658d5c-a01d-488f-832b-aeabf6700f53": {"doc_hash": "5585d5677df6b7e6c0b9b65bcc5caf8c8cc058e1850c34c1752ab2cd83e6e6fd"}, "9fd8fc6d-ab69-40e7-9392-e7f2023f4f47": {"doc_hash": "b7e0794e46889723bc7f26c5fa7ddb024bb5ee45d05576b3159cc2bf8f9982ba"}, "a4605570-ab36-4893-a17f-3f095cf4b5b1": {"doc_hash": "15460b5574e023f9372d3aafdb0c6fc47751c3ad63cdcf982ea2ee333e7d9e53"}, "9354b29e-a095-442c-805e-6d2977c2c434": {"doc_hash": "748bc68b1d9455096f6964b382ddada65470810b8eb5f93f807ebc90148c3e92"}, "5925acf1-bdfa-469f-99d7-79c1bea39d7c": {"doc_hash": "319e1eb9cb419293bd93187f14d4b220b0fa6ce34fe5f960797e64abda915030"}, "b2bc8f01-c15e-4401-b248-352b7a8dc3c7": {"doc_hash": "4069e3fa4f284743cffea0b7fc13f29f208577ea2b027eccfc9cee092c524ab6"}, "4bbf747e-b846-4068-a42b-1664a00cee01": {"doc_hash": "67650009b5a0b04a163d831eca2cbf015fa06fe7960577f413202dbcda211f2a"}, "2d6ccfa2-165f-42e9-b17d-371a9daabf9a": {"doc_hash": "bf421f4bf8952b239549ca4c61cdd97b9376db0ffac3d02aa4945ddc1c26f0ed"}, "6ab45e9e-aba5-4de6-90c4-287a9cbe0628": {"doc_hash": "597a2b6dceb402cee216698b664459194000f1fe86f44b7f4aee704e498563bc"}, "f2a2d583-0e5a-44a1-9e51-bae9c67b6cf1": {"doc_hash": "ca30b25db20dac846c2ea785ef6bf862d80437fa329d69e74f12c6d7e36ea080"}, "171c7bf9-2904-4ded-8341-2b9e4ada4733": {"doc_hash": "e0c9ab5ce17d8760239c2aa38b45ea8aa4cbd54801a61247df121563fdd6477d"}, "82340a38-b2c6-42fd-9bc4-cb18b6beeb6d": {"doc_hash": "9b3d3c51b7a2fe9fbac3971107bd34078df28cd38a1aa830be32b7a9bcd0d429"}, "b29ad751-f79a-4c42-9b88-c3c083b74488": {"doc_hash": "a86140573294d08090c4f17595d3b13b16fddff8eef80d6b825adb31ff010bb0"}, "29c5abe5-3b34-49f8-af4e-f61c18a6ac7c": {"doc_hash": "675550b37446e156cc51eaf5c24ea0f44c0183ff6428d3527ecc37f95b012a6e"}, "0e82ba89-6557-4b8c-b8c0-bc74b8627efc": {"doc_hash": "71a144490c7e5e4430e3aeedb7eb6f3d0eda32c3732f3319c550c049fe513dca"}, "77215878-ae99-4a33-a21c-9d6063252670": {"doc_hash": "5c071e59d7ffbb1440169f8eb8fde9d960c6716d5c6b5ab29e6789d4e0e8dd88"}, "08c98c90-cc25-48e0-ad44-4091af21472e": {"doc_hash": "71ea4722a97d7440fce0afc542f134fa1717435c1cdc793cff9e67f665bb790b"}, "b4884eb8-62e5-4a3a-a4f0-cdaefffd24cc": {"doc_hash": "18017450752c3af10a06bc80f095f003aba2f7e565d9e95747e17441a32683e7"}, "173860ac-e8bc-4ddd-a7be-cf5accc32df1": {"doc_hash": "54f1332b210492ee5102c2c31ca63c91430379fa09341ac0a021555e0e7fdbc9"}, "1c7b52eb-1049-4072-9b8f-efc2200435b1": {"doc_hash": "5481d753ca9474c404cbf1fb86c3003acda010953df839a6d0072040285491c7"}, "8f6d6eff-5772-4b1c-abb5-bb62a6223d26": {"doc_hash": "b2203a6bbb3104229cb2db64c7af14115746b1980147c7c15da5643750d206d9"}, "dd5f0495-e2e0-4b7b-86fb-91a20f7bc5bf": {"doc_hash": "d40af098502b01877b7a95826c55b310d3d8e5a91a3627380988a607616fdce0"}, "ac07b51a-77a3-438a-9979-b5d233fd5913": {"doc_hash": "96807e2f430f3e17f30a63c8cae533362b0ededd2e6f639e20bc06aa553cee99"}, "ac260c0c-fb46-4e91-a248-06ede4262334": {"doc_hash": "99040865afb0eee35bbff84785ab7c70331690d82d207b66a9b284eca19f3c27"}, "656adb28-d9eb-42fa-8a6d-672170726148": {"doc_hash": "896e62be6a0ad140efffa99f30bda221e9af706ce62bd2f927ba742d4996964a"}, "d9f0c233-0e5f-40b7-a717-33f7daf1a322": {"doc_hash": "baaba987f471d4330115fde991ec6a3c717ae96a4c19205ad502278dca99b768"}, "a8aa2fe1-9c24-4540-91d1-3dab1eb0a034": {"doc_hash": "d612f08f489f4f6cc60472482798cc18ce7ad87dd2ca198a62f894cb3319868a"}, "545fcc79-cde7-4489-b822-f42eb2b0fa63": {"doc_hash": "80f2cee5309d02003be395bb23da7f7293798cb3a5c725bc0bcf067abcb084a2"}, "372c792f-c261-4e70-a33b-986ec93bf056": {"doc_hash": "37d9f067f83a8ebeb077bfba490810d2cdaee58d3b4ddfb741d1dd17cc47f9ed"}, "7767a2db-642e-4808-8a35-2e74a62642be": {"doc_hash": "e66c4f53efe70f175b8bf18c4506f57bec5930def9c2ecd0b7be97e07c9126e8"}, "4c109406-2c19-4313-8501-31ed77725522": {"doc_hash": "7cbbd220014984f13df3ff787a5ef6f4c155e9222cb5a6cdd29a01f787b1c090"}, "cc156b81-3589-400d-a446-ebd6e1397926": {"doc_hash": "291087db5392150c2d41361d1679c895c2420b8db9c7816bcb689bd5ad937482"}, "d174918a-3a87-405b-b195-b39afd3b2620": {"doc_hash": "d9f93161162d9b90fb645411951e27f773875c8a6f27cbb3f191090c646e18b8"}, "578bd1ef-90bc-4809-9d85-6667645212b7": {"doc_hash": "565145077d41ba662d427586e52cf0819415d29d9fb956d23d012715939c0d48"}, "14d26aa6-5446-4e09-bc2d-a337a5a8b8db": {"doc_hash": "b87566f3b0e3fd0a52e7288e3c80585cbf92b32d826d029d41e30bc7eb59b13e"}, "2c31c969-ae0f-4f57-ae1a-1d527bf942d1": {"doc_hash": "bc28cdefa3cecd4b803b2c8b7b76f269fe35cdc2e548c62ae37df11d32d1c5c9"}, "45fc436e-de3f-4ebc-9b61-0e49198d66c7": {"doc_hash": "e76bde77191cddbdfe8fe1252ff1d1a362d9c21ecc58a5c5c72d705bedb4fe58"}, "7049309e-028c-4a9f-bb50-7e9efcef6c9c": {"doc_hash": "6e12b99df094f34c8b81682e28117fc7de061ddf5e0fe66d3bf90f5d37e1e695"}, "73c465cb-578f-4fcb-b30a-81ce4290a97c": {"doc_hash": "d6175bc37c80d0136f70c143782befe956c3abe3afea3016e9e3b4e102bcdde5"}, "398bb147-33ff-49aa-904d-2152bc65ec73": {"doc_hash": "66342ea24c806c9fd35c086731681802d1177bc154697d8b18216b43e1f41c0d"}, "840db8c4-bfd1-4190-b374-8c2bbe1f1c00": {"doc_hash": "f35d3779b0f7aa49cd9c199b94d1ecb5d36c08958f8e38b9f7063c0894630f44"}, "1f353bf1-8717-41be-a5f8-8c984490032a": {"doc_hash": "382ef84ee68d94e84c0a3eab358acd6b8c2236cf0e807bc0d24a81acfd15541b"}, "593b7e3e-3b51-40ff-8ccb-dffcff8baaa3": {"doc_hash": "5a40074e4e7145ad11c49d3f0bda0df4e32a4b71bb611e10f3012e29f4fedf43"}, "8c7d179f-b156-41b8-9342-ab89cc58bf67": {"doc_hash": "9068628431db220c8013886536ce4a529f7c0fb31f7a44789a76059cdc14c4b6"}, "32e14cbc-5b04-479f-94c9-13317bc8929f": {"doc_hash": "0478f6626e8be5954372bc95f5ac1f42996121c52ac2b550100205a07df218cf"}, "a5ec5f19-7494-419c-9e49-80524c53925e": {"doc_hash": "657938923ecbc77108ab22052631ed3dff2ab5a9705ab57a1f41125f5ad7ffc5"}, "75abc701-9547-4db1-88db-b9a70152bb53": {"doc_hash": "0ed089d27e7c74807172082fe0423635bd2e929cd120aa52e6e6825dbe6faa58"}, "ede2a2e5-6960-42c7-b0c9-f404a5d8f00e": {"doc_hash": "b80c3545ba5d307b6d5482a679aabf075ee9209927705a29438c53a63bce37f0"}, "09216f3b-90d7-4f81-ad64-eb2e83310f71": {"doc_hash": "5ea3f36988a92cc1ca03465e8d415b84c5b7a08c114ee24333ae0dc79a279af0"}, "567f0db9-701b-41e8-92a3-f1a966b1d2f9": {"doc_hash": "cd9a78913330ebe118826d4d43edbc2c9eab5b3e803642dd105ff762c87b7738"}, "c8b90021-81b5-40e9-8646-855561220ee0": {"doc_hash": "1d7d4cd183771211c7d8a502e0991f140b4d69defde36f711da5547a6b6c4a28"}, "9f0d6754-0242-4f15-b6e0-f099ad2c086b": {"doc_hash": "0b8464a57f4e08d0707f5bd09b58a65311813dfcb57a678bf1ea45c76dd156b1"}, "f8b31499-b19e-4343-a4d0-8e2ab04cd358": {"doc_hash": "46949c24beac3b82b4b27382c1cfdcbc3f5a9500fb623d6b4f9eb9aca8473b53"}, "4084ba60-0e11-429b-a8a0-d1830e8fbca1": {"doc_hash": "06e9025decc3f1b232a57519b3fae900919c5d6e39f99b0a705ff2126a587d07"}, "bbdacd90-1ad1-4053-9dd4-6f05dcec4d2a": {"doc_hash": "e7d2c37837fc212cb69798dc96bd6c641318f23ad675dd0c1fc852d4a57961ce"}, "df7b4161-83bd-4d60-b70f-11beea6e772b": {"doc_hash": "12797856927850b7e62b686c73e786850cd620528fd28751fe46884b0d7d527b"}, "14690d05-e6fe-4e10-8615-dcf58f09c781": {"doc_hash": "b86eee03067cd9c3468bde35a7ef0a06dd3f44928dbd1dc9f1401a61693bb772"}, "0e77d9e8-f30e-4cc1-8230-798cb63bb713": {"doc_hash": "3afc08659b9e9cb148adf83daeba9356c3bf688b4a3c2d81b45845eab5becfe4"}, "943c1a3b-4d4b-4b1b-889a-577871e215bb": {"doc_hash": "68f69c971d67fbd3734603508b0e9415e6fbe974e56478cce3d1ea1746aea8fc"}, "8a6bc93e-cc68-4c19-859f-c332660bee19": {"doc_hash": "10088e201f88060b6b6eab1f472ec97fc81e075d7a609b8a3f100ff881a34618"}, "8968ca03-1aed-44ea-9783-dfec7d31b327": {"doc_hash": "2e6af5dda7232a3f03af6701daae8bba83fab2cb8d7bad8ccbf317bc6ca6e278"}, "42ed0caf-9346-48e6-90b3-b4e41dba7294": {"doc_hash": "821beaacbd45309666b25816a55911a90a90c4c9ce206934cfd21019546e749c"}, "5b4d889c-8339-4aac-8640-8f66b43491df": {"doc_hash": "54e39efea7c77a9802a229687fee899c193b7682646e62e8233dbcd16f6c5fc2"}, "f74a0b95-2f14-45d3-b2d0-3604314e549f": {"doc_hash": "86eea9bfa935111fbebd0582839c1fea9156ec9bbdbc4594efb25708a646e3ac"}, "ae599cb2-6a59-4bb2-8078-16a71cd7519f": {"doc_hash": "c483d3db41c6b01496c9debc7b06394c33809c353585c583d5bfc51327377512"}, "0ddf3ca2-ae0f-483f-a810-1fac3384e668": {"doc_hash": "7dff07da3789152ead8e4674e77ef160152c2d6af8efcb3dce2a087075121c9f", "ref_doc_id": "1fc78064-ea7c-4167-8ffe-98c190177d1e"}, "684e74f6-044f-4ee3-a220-5424a71a6a76": {"doc_hash": "838a719a13d1f3c34d4d88d7986f90d81587c26cb0113447df22d246b2cfb9a7", "ref_doc_id": "93cc72eb-740e-49e0-b912-52a352cc5a55"}, "63f9dbd8-fd73-46ea-a7a3-2ba076010f1c": {"doc_hash": "8ced8ad638019f64a5436442136854eefbcfc306a865a1760410c7a378611c82", "ref_doc_id": "937d537a-0c6c-49c8-a68e-c7cf556599b3"}, "8aea0a5a-8494-4e5c-b293-6e203f01d36e": {"doc_hash": "1e3a9a28a77b3c8970b658c5b99558e7dc6444ffd2c1b896eabe88687c55344e", "ref_doc_id": "76cf2f42-2b89-40fd-9158-41dfa4509bac"}, "0e3e9096-78a0-4b95-9c2d-1d1bed9fee13": {"doc_hash": "b3901633360a7231115a9c3a0b32dd4ad8342e0a4c45c8e15324dc0bc4c58020", "ref_doc_id": "1a682b75-57ae-4469-822c-2d409ea4d47a"}, "4bb5f568-8e43-452b-abb5-54844fdd7df5": {"doc_hash": "12515591801c0eb0099f2926736a2cf1658337147991b1c874d12328dd2aff1e", "ref_doc_id": "75e2caea-88ec-434e-8843-96afa1126480"}, "0cd96dd7-0cd8-402f-9638-b26df1114052": {"doc_hash": "38c0ac8898e2eddc1d8b82d33fb3367529c1b9520005fc5518a0f02388e65b91", "ref_doc_id": "cd4e933a-4e7f-4200-9ec8-fa81813e8390"}, "72204e42-59a3-4eb3-aa0c-4d2b81f57d84": {"doc_hash": "fc3004e2a590169362f76c36809ebf785a2b71671825b6da62f570e7eb318f00", "ref_doc_id": "cd4e933a-4e7f-4200-9ec8-fa81813e8390"}, "d6d49ed3-973f-45e8-aaf2-ae160466f419": {"doc_hash": "fd206a9207d4fba38cfb7e6dec1883319fdb7c748fdbfd3294e6a5127b6472bf", "ref_doc_id": "e5abde96-3f6a-4c23-bce8-92f60f8ff767"}, "be4fc48c-62c6-4cf0-a739-2eb7b424d3f8": {"doc_hash": "2c87f8aa9ea5780c248f420d0ab620c05676786062cbc81144af6dbf48a1bb0e", "ref_doc_id": "75b412d3-b1e4-4caf-bfcf-c13b11826af2"}, "11beefdb-c5b9-4f20-af21-90a62a4db18b": {"doc_hash": "5c715814352fad796e29a84108945c3a2f52ee833b5c5f9babe082623a5e5929", "ref_doc_id": "9bd203fe-3128-402c-a379-e167508de592"}, "1140755c-f52b-4456-8704-6e3ec8277eda": {"doc_hash": "49383034cc3815bbd8e3ab77d8cde470b00062c8db4bfbce77f2fdfb91984243", "ref_doc_id": "9bd203fe-3128-402c-a379-e167508de592"}, "0634c958-7e7b-4cd8-aa24-5ab8164fbbcc": {"doc_hash": "00e35161e119946b6467b7bbe068f06d92e0b17ca69654c506ebf760c49639da", "ref_doc_id": "9385521a-f393-49a2-aa85-666445066e86"}, "47379d28-1b84-4799-a39f-39b73b72917b": {"doc_hash": "f5abf2d4726981361708812cfd7a00981b09713873cdd19930ae316dec3de6b8", "ref_doc_id": "788d64a3-cf51-45da-acfe-ca16fa10667a"}, "73690160-affd-431b-8578-5574b7557c85": {"doc_hash": "415f3b67e87ed80b1f6d64b4b896fc51760fd4112f7586f1a9b8ac642ec1fd27", "ref_doc_id": "332c4430-573e-4657-bafa-244556849206"}, "5be89bbe-c2be-4d12-84f3-8b6817a8ac8a": {"doc_hash": "06ec3759018cfa5d62736a3839b38f8c8634e50acc4410e2a6b3e50f567ea196", "ref_doc_id": "fd9ece08-9d5a-41cc-8283-68dcbcf9cd8d"}, "f3681ecb-5999-4d35-a68b-8f4b3feca2ab": {"doc_hash": "80a099e8cf952babe4e678baf487ded7a874be35dc32aba28abdf9e5b22e22a6", "ref_doc_id": "14829715-261b-4708-807b-db3ef7ac1309"}, "a1ca83ea-4121-4b0a-84a4-d31b7cac72fa": {"doc_hash": "31a18668cd357cfebbe4cec221a4d83081dd287dd281f4ec27ce15d151666c4a", "ref_doc_id": "16517f0c-3ddf-4cd7-bfa2-af8ae3561c33"}, "deff2b54-e241-48ea-af32-04ce290a74ec": {"doc_hash": "4a3531b1c491e95865c1118d3f779e91bb584273643b671a8837d915405a3443", "ref_doc_id": "79cef94f-d082-4cc0-8947-a9314abe67ad"}, "43564e2d-1392-45e1-b6eb-8350986a4d21": {"doc_hash": "82bf035e16a034b4c6ee1c5a9221ed206ee8abf4036d73b2a70ab518111224ce", "ref_doc_id": "7ed27810-d927-4876-b307-9c68e0e37cba"}, "7f91a037-3889-4547-8e35-b75000d03ec9": {"doc_hash": "6d8aaf8699396272d24ea2d274b65b719f37133ee1b55e033b9f315734171220", "ref_doc_id": "0038b57a-9f8d-4ad3-85f5-0a4a6eb67dc8"}, "01aeef60-9af6-44ad-aa61-5def3a6012dc": {"doc_hash": "f5234d2420cc753c8840665e03ab1e962e7f8ac0e734ff4a8158f58205e9c478", "ref_doc_id": "dc1fe8dc-af02-4863-964e-620f837e4de8"}, "4244fec7-270f-426c-ad02-bc4961ba64b0": {"doc_hash": "1cb85c895be240ec9846835df5dfbc1c05725acb38c310fddd150d477bc546ed", "ref_doc_id": "93c87d61-a3c6-4d18-b2e6-af406e25dafb"}, "a577ec20-2358-4b44-bc57-c3f5ad0f5fcb": {"doc_hash": "e5864e3b452fd2d3b8788b3e7c6a0ba24246533cf33b9f737e670027a66e8623", "ref_doc_id": "6106e3d8-03ba-4182-b432-0395c0c6daa1"}, "a561f618-192a-4880-b73d-352267d1349b": {"doc_hash": "dffe994a9e770bb67f62469e1691fd173a03930d8a7be1835bad6de95ae72f89", "ref_doc_id": "bb3693ae-3f00-4e65-8975-5996b0799561"}, "f45f0c42-664e-469c-975e-77211614ba7a": {"doc_hash": "1fb4563a2d4f7565264518ebcb4dc969126d7f35303ccaeb483839a00d1b3325", "ref_doc_id": "8ef7b7fd-7ccc-463e-99df-4c4a33ad2fb6"}, "fd9be728-5cb2-4d0d-9e76-7a249fea3acc": {"doc_hash": "bdd52694fc87f08a5bd72dd2e2de4d9f369366566cbae46f0430c6fd13eda61d", "ref_doc_id": "b8120285-e08d-4d5a-8771-c8036d7327d8"}, "d3df9556-5961-42e5-8ddc-97502470c3e4": {"doc_hash": "2dd29d5b1902bb766479edb73e19b2e46e934c5f00b73c1347f6fcdb015e9244", "ref_doc_id": "0fef6c74-27e7-4b06-9e8c-bc0a0aa6c12c"}, "d957d865-f7a0-4037-9af3-c1074111afb5": {"doc_hash": "115388c92bcda9279912ab5939533db81ab1f99c1c17d47d413eec283bf41626", "ref_doc_id": "181cadfd-5b2e-46fc-8a24-bc3d6ebb1bce"}, "82a53663-c164-451f-aa61-9a6cdefa7b61": {"doc_hash": "1ca86dabf2b2031f819e036119047e5ebb33a0e209ef225695955e06892c2994", "ref_doc_id": "998b880a-dc06-4f31-8f91-0419d7c27580"}, "9ec6ac2a-9c59-4883-8832-3052e87ec9a2": {"doc_hash": "1eefb2219200045ef2a80b331279d421b74c0e7edcdd29f255ceedd2e2b1c21c", "ref_doc_id": "479869ba-de91-4fe2-9885-a0078f07786e"}, "edb88af1-ed95-44bd-a3d9-f0933511c990": {"doc_hash": "0011230c1f8b1cf0031faa6ea7812eebe98aac2d353962fd55333da1acc69954", "ref_doc_id": "19fa349c-c052-4481-bfa7-8d4fc813cdcf"}, "036a034c-cbf3-4b04-b508-537430095c83": {"doc_hash": "fe228cebfdeeecb2a13602c63862ede56587c258fbe6206974530939b9607671", "ref_doc_id": "745f9cb4-f410-4e21-bcd9-39e7d9266a99"}, "3f5c6d27-c7f7-4ca3-aba8-2326ce18e487": {"doc_hash": "8b5e540d5a73eeccd7e76bb02e7a801ad1ad3911df3272ea1a84398abd8eb33d", "ref_doc_id": "1b7c0615-a836-43a7-b46d-5a90a494907e"}, "33eb9e8f-2f22-4939-a523-5db11fc3360c": {"doc_hash": "096280f265e4013af393ed3a57eca4d79e6fb8b9545c2b98facdbc4e2458e72c", "ref_doc_id": "f11bf69b-469d-437a-a466-30e6ccd2a92b"}, "a4900fd8-24a5-4716-a82d-4383895c2575": {"doc_hash": "09e46549a76b092d5e614bccc0ccff6dd1aba20153534fd253a81b6f778c939b", "ref_doc_id": "00ec6ac9-caa7-4aeb-9eb8-5973008c0c43"}, "2e87d6c6-d124-4099-9841-d7f9ab9e9a6b": {"doc_hash": "3f538420ade8762ce42c8060e0b3a688d3ebdc7de0ad2fb1b7da1c1dea9922dc", "ref_doc_id": "3e41906b-466a-4fb5-a7ec-2b58dc8ae5c2"}, "7259e143-a6f9-4064-a681-2aa1a8da749c": {"doc_hash": "b576a445bf9139378c447394f8e0d7343104bac785c052cac30e1f4f4468de86", "ref_doc_id": "9e568726-7098-428d-bbeb-0fc1d0f6772d"}, "b9fad957-67ba-4f80-a93c-f4745a44c158": {"doc_hash": "2e627323787987a6b2f8b620e9eb462068ca300160a02f0f64ca372fad53dc7b", "ref_doc_id": "8a1f228e-da52-4a35-ad14-9d43e2a5434e"}, "c615a111-a248-4291-9f42-280162b33b44": {"doc_hash": "c151c2271aef5fcf3ea78696e6ce3b5ec1e59a33b044c3e5cdd1cfc48aa4d885", "ref_doc_id": "eb8d1dc1-5210-44f3-956e-f2953500bca1"}, "df9d2e77-aeae-42ee-9297-d7be09ab9d38": {"doc_hash": "bb31ad7f80339bf465edd7c45e1c12e7628a9b3f945cd645c4aa05aa92aa15bf", "ref_doc_id": "c9ac2dfe-19f7-4abd-8ba3-4be1b1b29728"}, "49bc9586-539b-437d-803f-3c0408407bc1": {"doc_hash": "6d27ae79988b318c90bf5fd307dbf27228a172062dd3f2d2383082e5f756fc14", "ref_doc_id": "506ce9c8-3223-48aa-9aa8-580ebd80361a"}, "09b4b64d-2b68-4aff-87d9-8d93b4d33ec6": {"doc_hash": "4bd4ac3501c95a21af5a6096a3489f2a96ca33abb638af6570a6e8fbda3530f5", "ref_doc_id": "521db331-1c28-45c1-a2f8-1281bc95b45a"}, "d7d7988c-a04b-4bf1-bd25-b34821182e3b": {"doc_hash": "c527b0a025c3a8629c9906bb1a9f1b54d009d80ff838b52a893784e75cb269a5", "ref_doc_id": "dec5d630-11c5-4b19-be9d-f3ab5e034619"}, "5b5a9f83-9444-44be-925b-5241b9904514": {"doc_hash": "ca1b807127805729ca370667061119ef9e435ed34d681ef3e6ec3567fe27e7f2", "ref_doc_id": "cca06269-8c86-4187-99ca-fa98bd58fd7e"}, "d704191f-ca7e-438c-9f78-48310f823240": {"doc_hash": "8421d1ee18fc01ad4d05cd81bb91837602192c70f86a5988f0d48d6d2384737b", "ref_doc_id": "f165c7cb-ef86-4c48-a256-63bdee108582"}, "c9fa5f5a-b21b-4b33-ad21-fdee5c244096": {"doc_hash": "b557ee9b3b164d9bb7931c27263fff5fd7a1a4387783d82bb9874dd7e0407899", "ref_doc_id": "067e13a8-c43d-4bc7-ae56-9a21c6084db9"}, "afc9be9a-3e9c-46dc-8a10-ce5119aee4c5": {"doc_hash": "8452331bd7ae7baada6dd9008b15fac9698e7be3a22d2110251f738d43530db4", "ref_doc_id": "b9c11804-5551-4b8c-b393-d1b5f0395f19"}, "08d7c105-3ed8-48c8-b6ed-431e902b7247": {"doc_hash": "9ab9f4f4ad575c1b7d091a1e42bdb7201e165171d884b5e058ffe339232f159b", "ref_doc_id": "024849df-666b-46da-80c5-1af2417b2486"}, "08d9dfa9-a52b-46ce-be1b-4a921862af16": {"doc_hash": "a11560823e4c19c265a577366db1b447ff1554fbf4bd35cc6d604facf6c4465a", "ref_doc_id": "fda53c78-1148-481e-936d-80ff4b680ffd"}, "a29112f0-82a8-47d7-9fb9-2e9b8a4f2215": {"doc_hash": "efb37fdb629d4305775706e9e2de63d824ea017b1b8578b96ded5fe2a9caf9cc", "ref_doc_id": "f098579b-dfd5-462d-8f4c-d9bdc7ea4374"}, "6b88a86a-bf3e-4ebb-8e64-830cee933314": {"doc_hash": "2a0993283ae8c1469b5e3a1aa4788790edf798444608e3fdb622d21e589d79da", "ref_doc_id": "0691f2ee-29eb-472e-b1f4-c5eb24e299c7"}, "a4576f7e-d29f-4e0b-812b-a84ba3ea0736": {"doc_hash": "8826657a40004c48e6796baa26b670d91a8e4dbe76a4b71819e518f6e27fbaff", "ref_doc_id": "cbd1ed40-0742-4a7d-9a18-dc2fa04dd135"}, "85208465-f245-4074-a384-2e8a66124dac": {"doc_hash": "0280e6dc30e0a3632e9a3384b693f7de1e53a4c41029c431136bcdeeb3a2d457", "ref_doc_id": "c26aba46-f344-495e-ba3d-f5c7a78e8b47"}, "fbb69ee6-d9e3-4eed-859a-b4eaa19a677a": {"doc_hash": "6a4de3e20efae82389971acddb71b73196bc7187a50d8d4d636f3df41ed1eed8", "ref_doc_id": "dd090b03-7d30-4ed5-a2b3-187d23e76563"}, "e8f37534-c539-4b8e-80ed-ec64f2b6a2ae": {"doc_hash": "1f2c0f44b3c91240b8dd5b11a199b580ce0e22f9e454fdf0d83d7b91e181b664", "ref_doc_id": "af49f4ca-efdd-4780-b2e8-5c5ccf00ec05"}, "940ccba2-0ac8-4228-85db-dc2b585644a3": {"doc_hash": "8c43dbb254adf06feb66a68d20877a804196ffffc1b0d0e309633f89590adab9", "ref_doc_id": "9c3ba92a-3cb0-4d13-9f75-3d6300543746"}, "9f95594d-e27f-4304-95ca-7d30957ad42d": {"doc_hash": "a4289c6e3b885c0997c44869f64498f6177db63dd348c555d82d268cef2b5f15", "ref_doc_id": "e7b405d4-df5c-49b0-989d-496fa7546953"}, "a3661a77-0c63-4350-8e75-9bd5568bfe37": {"doc_hash": "d460e18fbe80fcdd5b87c5efdbc9ff348ef6c62ad0297f6312077ca639138802", "ref_doc_id": "00deea5d-d926-41db-a9c2-029e0d7698e4"}, "2057cd90-07d6-4774-988d-32a2fd09ffbf": {"doc_hash": "3bc07f4a3526823c8cad5c85654ca77d86a64b9c205deeff0a09ff6ce82a85b3", "ref_doc_id": "def17cd7-5e01-49b0-bcce-b1986be4bf8c"}, "855a2c95-b507-4543-9bb1-3dedc0ee8801": {"doc_hash": "3fc87d79e5b959497c85625195c3c4de12a0a69b9e43488fd127add0335ad78b", "ref_doc_id": "698a8a74-e54a-432a-9149-3ae9f87b9562"}, "03db3124-915d-4811-b376-bcdd8120b68a": {"doc_hash": "420422dfef26be1bac2f8b4248f7dab58f6a2c33db90ab43628c1931da1c19d0", "ref_doc_id": "7c2fec44-3bfd-4272-aa88-fda2a7302ee6"}, "dc2d8b98-fcda-4075-bb25-a853582c4489": {"doc_hash": "b4976e7b7182eaa7e53eb5ab6b574c4b36ef2afcc52e0cac9308a6d8949c7c2f", "ref_doc_id": "b9b21ca3-b8b6-4f7d-a5ae-2171d2af6874"}, "2da9a5a2-128a-4336-8814-f31d9964a410": {"doc_hash": "17e2862162a444cb00a41895a48d5c05afecbda9a0c48dc54a8198d069c19df4", "ref_doc_id": "26b94b5b-d3b4-4256-9940-78d4d0046a7e"}, "cbf9b61a-dbb4-45c0-bef4-f1b0140479e5": {"doc_hash": "639e856986fd67111a3824640029451d48108aec9007e56a109a8f8c3a60eaef", "ref_doc_id": "6251bbd6-6e3b-43a7-b707-a007793c7b03"}, "d8aa74b0-759a-427a-befa-07e993109b4e": {"doc_hash": "482935efe276b064f34304b63c228a7650125c6487f77560119a535e671c97cb", "ref_doc_id": "6f372d4a-f16c-4429-95a6-2ade8d9e2aa9"}, "645cfe3d-6f3f-4740-8d2a-4f1068307565": {"doc_hash": "bfd7e07a0a18c89fd32ca43c09063de75202d14ce37bc4296f1e486abe671629", "ref_doc_id": "9b72c592-4396-4cd0-ad52-f786bcd31984"}, "00d0a91e-4e99-4e40-9ff2-91c54c818379": {"doc_hash": "db2852210611d3c8fded0f2397828d190972472f5845ccfd8cc34eb7b4275da9", "ref_doc_id": "d05e3670-f9a1-434a-adb3-6bd0cb48366a"}, "2f87141a-7de3-47c1-a7d2-48342fc2dffc": {"doc_hash": "dfe9d48f225799f9d2bd16699a89b18fdc5f89b618de2fd756578e9c993b5070", "ref_doc_id": "d73c636b-772d-4fbd-85ed-4d0e20c12e2b"}, "b15fb7e8-18b9-42ae-8ccc-c3dab29362cb": {"doc_hash": "462e59ed6ebe06a16664b63d803bd0174e3bc1b42249bc5863a9c9d8fe43c82e", "ref_doc_id": "3eeee39b-136d-4c42-a651-b62e6f6676c8"}, "91fef4b7-d2f1-4535-b9ab-92b09e065565": {"doc_hash": "ffb709effb460120bae319e9c9dd06169e3248f246ee6902b832d99a2d4630bc", "ref_doc_id": "e2be1430-634a-44a7-bb14-97c3ae93224d"}, "e25340cf-9b19-4e4a-ab49-6035da8d1837": {"doc_hash": "2dd71aedf70b63cbe2c8be11452bb145136932e0f75931aa5230540a0d3e3ef6", "ref_doc_id": "06674421-1035-4740-9bfe-70909ee32b22"}, "41d58da0-6afc-4b35-99b7-3cbd19d30c15": {"doc_hash": "8a26bd0ea7badf83b25543d8412a0e36e310db000b88871adc41d343d52b85fe", "ref_doc_id": "c99639c6-395f-4bc0-88d2-e727ce4c8e7d"}, "bff72761-6026-4db9-9de6-0fe9ee764ff4": {"doc_hash": "e84eef0d3542bec29db781af2a1257e6f63631aef06950b5b34e7873d3feb459", "ref_doc_id": "26d5cd0a-1915-4f5d-9ee7-ba2d6b280851"}, "f9a440e3-f5f7-47a2-94b2-6df0420f7e63": {"doc_hash": "a0ed679629e56c6e593eeba1502931c6491088b445348129f4c3842e263c1f64", "ref_doc_id": "c902ec95-2102-4fde-a931-f696aaa59f4f"}, "78eab3b9-7f8f-4582-8709-90509c0006c4": {"doc_hash": "8566dcc7eda06727d15d5e60f1ed7cea6250abc1b9a3102205ed2316340e8ba8", "ref_doc_id": "64ae019f-daf8-4e3c-9190-3156a73afbf7"}, "7ca19936-db15-4602-8f0d-9cf3a5f91e61": {"doc_hash": "6ac67dc0c3df6bf24e27afa1e064309f0d2d80b1d3a269b3736f632a0f078ebb", "ref_doc_id": "190e7c32-5bb6-4779-bc87-1d189cefd086"}, "d5de7b7c-0215-4fcd-a7ce-59796e80b3f1": {"doc_hash": "e59e4438e7e87cb9000bec445ab52bbdd72eef3cd3527d9990aecbf4f495dd11", "ref_doc_id": "041a159b-c2b8-4b32-aea2-dc5d653bda0b"}, "ab0b87af-8643-4801-a077-c8cea679e029": {"doc_hash": "f1e6d0c311830b1dfae80c8744d9127c2074a55b151f4d2def2ac94e9b506bcd", "ref_doc_id": "2d2e539f-50e8-45c1-906c-d4eecfea7873"}, "b23c88dd-d743-4232-9bb3-d57f8db10c97": {"doc_hash": "00a285f0906255d43045bb48ea245b1a2331236a6b0d70de0687ecb0be04c8cf", "ref_doc_id": "23d8fa53-baee-4bac-a42b-f5ca7fa81c57"}, "3d845e31-d100-45d5-bc06-78cf4dd8b6a4": {"doc_hash": "015ddee820b82acecab166426e4b79f90e2abf4ef8ed1222f4129b5fbb3dc010", "ref_doc_id": "39cda3ca-0d0c-4a30-a16d-cee5f34625d4"}, "92b46045-c548-423c-9589-afd91ca103ac": {"doc_hash": "e5da3536da532c5eb6bf162ba43192533089198f82ff92687a3dd28ab8305f6c", "ref_doc_id": "1f5dac9a-ad3f-4db3-967c-17cf4e7a01e3"}, "2561eee0-bf27-4ad5-9b88-ef4e5871358e": {"doc_hash": "fb0009cf5e34a80751cfd981a4d299a50b0b13524293fdc2a6e974fa1b5b9209", "ref_doc_id": "467857c1-e23a-428c-81e2-b58354c2e31e"}, "1a2391fc-8550-4219-b6f5-01a14a5f0924": {"doc_hash": "3fa00220f9419599f1b9cb0c327f90c2a7c3013e95fd42388d1fbe92ecb1ac09", "ref_doc_id": "e7484857-7fab-4815-8446-41e8972babe9"}, "75b32f32-25e7-4504-8737-3b66d6e10371": {"doc_hash": "f829e2acf41a0223cf9c2d6c331af66b7a456686514fbace786b8f995aba83c5", "ref_doc_id": "8ba7052b-111e-4942-85af-452b9debf7a3"}, "de5976b7-9cb9-4997-8268-2ffd3f2b5b51": {"doc_hash": "5c272b6af666d123492cf496276497f6253e0a9a3a53b7425b983bb01e147147", "ref_doc_id": "56a58a3c-ab39-4ad1-a865-8b0f5a19e001"}, "f1ab0c3d-966f-42f3-88ec-378da1b93da1": {"doc_hash": "30c0d2f563ea39e790c6d1ab445d2bcd3c3380b5712d4b24621bef6d24c2050b", "ref_doc_id": "cf275501-bb30-4630-8260-7bb57d2c01ba"}, "4d23ab57-ceb6-45e2-b722-9cce21c2198b": {"doc_hash": "15120bb3ff334c9d83f2d930da818aeb013ec2d56e0e98498e64adb3a4e3b61b", "ref_doc_id": "fa9c7b79-c2d5-40a3-9a04-66b8dd9538f5"}, "3aaf69e8-1afb-459d-ab73-a6f5ce3543be": {"doc_hash": "89c318f1c5aad0061cee175224b92dbfec62feaf401386a6b40e161805f187c5", "ref_doc_id": "0d26911d-c67c-424f-ac39-0c20e020f4dc"}, "3828c994-8a6f-4eff-b777-7ad6ed01e72d": {"doc_hash": "e5dd50d4058b7390234f02ace0b026cd177d5423cd4008f4b04c2db8c3d6a3df", "ref_doc_id": "31562bc2-6ad9-4b52-9b67-b113d9c9e76b"}, "cffa25e7-3c5b-493b-b407-c3a9d330614a": {"doc_hash": "eee8ab2c39691e269a85d83868483cbe1ccfee994cf029463f0317031c14aa57", "ref_doc_id": "6d380e5c-37b5-4bf0-a82d-afaef7af1e4b"}, "510de054-451d-490c-abfa-a56bad77d8cf": {"doc_hash": "772b4f181fe9fdcb65464df3d5221901d61682d51688ddaa9aa3a41a20db5560", "ref_doc_id": "d265890f-3ba3-433e-bce5-e91009873374"}, "94749006-50ec-458d-a9fa-e23a1c1bfbb4": {"doc_hash": "2260e4f14b6d7c2a9012ea8fb5e146386765faef16183f71a65d9d8553ae2cc4", "ref_doc_id": "9d4de25c-a719-4a26-98b7-7d5d2ce81a5b"}, "11b6aa3c-8dda-43f6-b4da-2d4a5c3ccaae": {"doc_hash": "3a836f7de55eff3edde7111fd5cf4b7e524c731d866e3b2316ecce6091601ef7", "ref_doc_id": "9a6280d5-c568-4a8d-b717-106bb5e089aa"}, "69c8e12d-a587-438a-8235-6eff72cbcdcb": {"doc_hash": "5605e55e6f1703f3638256b2a1ea3c404101c69589f5b9b7bbea4fa0b0d4a64a", "ref_doc_id": "8c53cc7e-c22c-4049-96df-d2dab8d72145"}, "8091cc5a-97de-424b-94fe-d0ba667bdcaf": {"doc_hash": "1609dd70ac2efbe783f4c39716104d3ee1b5827641d5a251e4d86b4510cc94bb", "ref_doc_id": "310624aa-2fcf-4c5c-a73e-db7ddc2d5da5"}, "17c36ae8-77b3-4aa1-8564-855095cfd73c": {"doc_hash": "79f89309b168696a5872afa1e2ee8748202825e03eb992d1e4e0883872adce21", "ref_doc_id": "9413569b-8885-4682-8231-0d1c61c7f426"}, "658d4e68-a5e5-4fdb-993d-8c076a41e42d": {"doc_hash": "80669e87f9bd771777c8363d91f2a1886a8a33e61f59dd75d4a0a6cc3f3f3735", "ref_doc_id": "95c51f7d-9d54-4889-afec-6283d0b3550a"}, "18816e55-e883-445e-a23a-262aeb5841d6": {"doc_hash": "29454705ebda4d305a243a0f9522e4de6f32ab0f7a8245603e6ecad47d8991f7", "ref_doc_id": "940aa899-06ea-4a73-bbac-dd661b1e6736"}, "9cd4e61f-5cbc-4a9e-8a52-5a2302354ef6": {"doc_hash": "85c853da50f88f93104afd8be50ac7c6f8a6421a41aeb1bc2b9e1e2d143cecf7", "ref_doc_id": "dfe88a7e-981b-4ba1-a92d-db95efe04f7a"}, "2af128f1-d628-4d2e-ab6c-d603a9ff30b9": {"doc_hash": "8dca44cbcf39f240b2a327eb8bd28d70b8572ab29abdd48caff00d07c19a0d74", "ref_doc_id": "9ad62dac-a812-477f-8b63-7e515f71adc9"}, "7089574c-f26d-44c4-8503-040b62660d33": {"doc_hash": "fb65be9154689ac49889f7e9b8a56aca66bfdd6090676c7077716f9157c47592", "ref_doc_id": "935b8148-2f43-495e-a165-8fd3f3b82e80"}, "1aeac423-3fea-46f0-b5bb-e72244ee392a": {"doc_hash": "31f2ebe127a35047a37704beaefc90ee3bef94c6edf2d45cd993834580662f60", "ref_doc_id": "f903da9f-a2fc-417c-8f9f-6aeb5c20da39"}, "29960fdf-fe52-4f36-b17b-1df3c13963e4": {"doc_hash": "a0630c0054cb1399d83b6bd5cce3a618cb716a3a9f0af74fda0ec234a986bb01", "ref_doc_id": "ff0741f0-b9cb-4102-98e3-7cc6e65b7c61"}, "96920b71-9c4c-443d-a292-e253f5af872f": {"doc_hash": "8b59473ecdb13b7dc60bbf6ddca08286370d4533fb1c4daaa498bcf7da793303", "ref_doc_id": "aedd1df4-f4b7-4cae-be44-9de39544658f"}, "f6069ff2-3719-4901-8dc1-507eb3d3d6f6": {"doc_hash": "5d673e6c2d167be9cba75f8c4e01c2fbed680123a403ebe95de6a9d0ce67c93d", "ref_doc_id": "d3491f8d-09e8-419c-8d4e-017e94defcb2"}, "83452570-b6e4-4305-9cd5-89d278a3da28": {"doc_hash": "efbe27c5effbb866860fe6a03b789d05bd917c63f50034b4aef2994c559b9399", "ref_doc_id": "15631da4-1411-408a-952d-045e94357c9b"}, "083b6735-0907-452d-8dec-60f9d0f84cc0": {"doc_hash": "c5dd331e8d0b03e46d0b6a9cae263709a2a068d80b0dcb354aff769d556a8151", "ref_doc_id": "f582e90a-fdf1-4a27-97a1-3140be02b491"}, "42b6b026-2f34-4e95-958b-ee45a25c7402": {"doc_hash": "2364780bad42708e24f59d3cc2e60ab019f0f7f830b53bc46259f1a4ea29327f", "ref_doc_id": "2618e903-bba0-487a-b68b-83c937a06020"}, "2813dff9-588e-45d3-a529-8a0d41e70179": {"doc_hash": "faff4ea07287c8eb1e638eabfaa5b6748e02a5a3642168ca0891da77793fa3e9", "ref_doc_id": "6fc69100-3289-422b-981f-e69e2252f04c"}, "33dbbe25-2f1b-4376-9674-ff547406c003": {"doc_hash": "c465ecc4f633943488c441e90861ec33ae371464a08f27b123fb725bc10c56e6", "ref_doc_id": "bab9c87e-cbef-4e35-a7cd-621e67a17d79"}, "f02dffc1-9916-4f35-958c-af8bf13bfdb3": {"doc_hash": "4b40e553fa4a93301b14479aed3433b8e4ab643f9293b5453b0b5c5783ad3d1f", "ref_doc_id": "a282b95e-76c3-4aab-bfd3-92c048856308"}, "1a00afd0-25ec-4aa5-a295-93d0f358cdc2": {"doc_hash": "02b3e14b727c502d1d98042570743cc0b7377570999ae7203e6b85a40387e99f", "ref_doc_id": "007a4aa3-3666-41a5-9183-c700a9cef904"}, "8fdf3ff4-014f-4d18-a333-0e2ddea777c0": {"doc_hash": "30d99145d3044310f17b0dbf7bc26b054c4bda7005cb0924740ac723609e0605", "ref_doc_id": "c6f2cdf2-e3dc-462c-a3d3-ae26931f0e65"}, "2d23f43b-386a-4077-9f73-07613de4d622": {"doc_hash": "565ae4a43c8fa44bc3900efffe1211ed5f97b46a22465f7e5ba68e58dafea687", "ref_doc_id": "57f3d04b-6fbf-441c-980f-e46ebaecc55d"}, "c0ab14d9-d29f-4101-b8fe-2d5228070273": {"doc_hash": "7f1df2df4926e4e05f2a0693e249b2af2f9925c3072df876ca872ae333513f9b", "ref_doc_id": "100c06f3-70bb-415f-bcda-2fad0d1c1cac"}, "1675aa9d-5bce-4d0a-bcde-b6bb2a384bf2": {"doc_hash": "f316098bf0bdefeefd94f2d53a35ef7602d3496042a88ac27285a3b215ccba92", "ref_doc_id": "b6f0ca96-d944-4d73-8315-97cf5c8ad3d1"}, "2412c453-60ba-4331-92c7-da995edfd5f6": {"doc_hash": "aa640d4b7f2c9bad84a4fee94b61a67623245333682b555c9ccbf232b96410ea", "ref_doc_id": "13947329-c54d-4c86-901a-511bb8753032"}, "41fc6360-c05a-4ed4-b1d0-2d89e711f3c2": {"doc_hash": "37ced02557f77daeedc7de8902465c05c5b69cdea766c2704ac176bb53d60177", "ref_doc_id": "a7350025-1754-422b-aacc-869a13bb1805"}, "237ea2cc-e885-4499-a1ea-96007723b0e2": {"doc_hash": "eca307430d9ade708bef789363ec5fa2adee4ac4d4227603065aedbaf480da00", "ref_doc_id": "5058d0de-fc90-4331-8f33-858482122957"}, "7f6fd917-eb92-4333-9461-a6cf484bb92a": {"doc_hash": "1d7b7b3d1398f7c69d66e576f28c60917f914a993d84724749615cd8f1884dea", "ref_doc_id": "1efa0a96-ca69-4f3e-91a6-7c651e568e16"}, "48e50a9c-deaf-44bf-8500-ae1571546672": {"doc_hash": "86fd3b171a0738bd36af1344ffb019bcb73bf86c9a1bd30cd58663fc3177ed2f", "ref_doc_id": "5fd6bff1-d3e6-425b-a614-0e00b78e321e"}, "aa85935f-ebe9-4d7f-ab1b-9e6752d9bcda": {"doc_hash": "b2d32076e2bbf10321737d505b64aa09b596132cd5050e4223ddfcad3ba418da", "ref_doc_id": "fc6ca18c-01ba-4865-9a83-edfdfbc88f02"}, "4e4a5b9b-701b-4622-8971-6b52519b0fac": {"doc_hash": "98585606ad6c5f7c725c031eecbf1add2ee8812d6ee9091048b9615dc9319b4c", "ref_doc_id": "644f9537-32a2-477f-80ae-7e09816a87d6"}, "4fe38eb5-9d5f-49dc-9313-b6a11d479b3e": {"doc_hash": "6acd74d87c92ad36d901d69903d27c4caa5914055f23f242d6991650c1f1a7af", "ref_doc_id": "7d62600d-d939-4f9f-8faa-6b58249421c1"}, "0e1b5ff4-efa2-484b-8025-3ecf5ceb92de": {"doc_hash": "c4ee27ebddddf82a6c64b1a0bb4cb351f8cf4b06a61fe69cb6af16cb14a5cc2d", "ref_doc_id": "485b9608-28cb-464b-934c-5041986ea7e7"}, "29d47020-12aa-432d-b7ef-b0fc6d667cae": {"doc_hash": "57e41baf1e781520112401161037beebf6f3b361ddc7810ceaf69f6a471d2d75", "ref_doc_id": "b4bf828a-a92d-4c7e-b481-737298f2415e"}, "90bd1a87-864b-4456-a782-32ea552c7d8a": {"doc_hash": "1aeb523c2a981b318a008d0b035e0dc4f2b440387d5009c8053589189b9be219", "ref_doc_id": "4460a739-0778-48fb-9264-d1d47973cb8e"}, "a2ee67ab-a0f7-430f-bc85-494083f7b9e4": {"doc_hash": "16a5dee8f2cddd3f7b6dc5477af462b1e4d54a73e4f9438f2314d812b049689e", "ref_doc_id": "b51da2c0-5a1d-4a8a-bd75-b7badb4fb94a"}, "e07f7beb-53c7-404f-a1ea-b93095af99b9": {"doc_hash": "a3444f1b12f8754ea1e70c288b0960b91d045da1d7dd1e828527d8c1bf70e28e", "ref_doc_id": "cbc270dd-7139-43fd-a2e5-6ffad0c7d0c4"}, "fa333f01-83a8-4516-9024-44eab8154b51": {"doc_hash": "898c6741a8b8f957d9d86399b83effe970b5f0f0b45c03b0859d6233cc46218e", "ref_doc_id": "3e7d8348-072d-42d8-a6ed-fa6c06bed413"}, "d46f6800-8708-4d49-9c00-5084dacb4d8b": {"doc_hash": "84d9387922af0b3447257b304f984e6c4eaf9b4b975547d38e8b73c92b9570cd", "ref_doc_id": "7f1a1ef5-fd8b-404f-930a-079a6d2c9193"}, "529ca347-f0c4-4c4e-b1a0-36fceb78c978": {"doc_hash": "77b42bafe777f04b2aea37cf8e410cd44099b9a492a597f0bb2647aff7a16a1c", "ref_doc_id": "9fe96171-9e83-4d7c-9e9a-4a11b1f1cb2b"}, "5b4ba3ea-c114-46d4-8a7f-fccf6f4290bc": {"doc_hash": "99c41d56abcd8a6176467168ab40578bcebd79dfc74315867bf9a50e715521d7", "ref_doc_id": "a0635607-1f7c-4d33-a2ec-a5f127f6fbb8"}, "1843d43d-2835-4e5b-b853-a7b6ededdbee": {"doc_hash": "fd3356c28035e24ff7eff3e1d991406273318692b92903a465fc0a2948a930f6", "ref_doc_id": "ffed1bb5-ae2c-4b88-85a5-e7eacd4f1f2d"}, "0d2b8f11-ba66-435c-b982-8e848c58a126": {"doc_hash": "96c87d9376efe6ec6bba0c9b9fa7c0406d0b644a7d9c5e38f30c5af03d8bba9e", "ref_doc_id": "ab83186c-6632-4aa1-bd4d-4886df9713f0"}, "4961bdab-bed5-4829-9a62-ef395ec2ce28": {"doc_hash": "f0840251960d92d4446405fb93535f61e7c10d67aebd17768df7b239a2a0c988", "ref_doc_id": "ced2817d-3870-49c2-b564-aa634cfbdbba"}, "54472170-0995-4d87-8725-7cf5495df154": {"doc_hash": "5b3bc2ed90387eec7719a13db2024065e6c8556189662230a296a20fb1dcbff3", "ref_doc_id": "ccfae469-3d91-4fbd-a091-c9bc4d364198"}, "683c7e01-5423-442a-9e01-d9dfdb4c0534": {"doc_hash": "68ad9677d30340fce5369f1461e35502f6f383125891b201379e78af7ba7852f", "ref_doc_id": "5604b322-4d05-4472-832b-f5bd0b703a68"}, "d85277e1-a0fe-4231-acf3-d6d1290f6e24": {"doc_hash": "4dd6d36008a3a9add420b2163b27a6f548f0da756605f58b03c8c0123d48fceb", "ref_doc_id": "29b8969b-bbc9-4587-9ca4-bd340120a4aa"}, "1ccb9ffb-7323-4053-8be4-1aca96656acc": {"doc_hash": "9611cea5ea364a67afee703c6813ae69fdeb9aaade42b594dde65685db2efd66", "ref_doc_id": "e01ad11f-a4e2-449d-95c0-530046007c6d"}, "bf557c95-b2e1-4fbd-9164-52ddc53fa175": {"doc_hash": "45b299732aeeb9406263915acab77df9510026c084245c146fdf69fa11253e81", "ref_doc_id": "19fdb505-cef2-42fe-b064-95ec8a4fbea6"}, "3e0b29a1-1bef-4580-9eda-0895cffdacc4": {"doc_hash": "af5c31d4247a2144d995f2f7fd02c9890a85c4cafaaab062d0f778d8c9c44fa9", "ref_doc_id": "060230c5-bb69-44af-9482-05c8f2bf7dc0"}, "31f5b185-dbc0-4ab6-8404-9cb5807b58b8": {"doc_hash": "caad5428ec47c5cb6f9c7381511f91d5d1f309cb6a13c81cc1da9d9f5bb49781", "ref_doc_id": "8c6984aa-dcb3-4469-9379-1d2922949b40"}, "bab65dbe-8491-43a1-be0f-b76fafb8bda0": {"doc_hash": "03940129ceaa5cd94f26b57612f640b345f3e57df40d2f36023b7b7111890ee7", "ref_doc_id": "b7d74deb-ec9c-485a-8a92-9b8ed8b821bf"}, "57a257b9-9dde-4bed-99c9-fc3935fe226a": {"doc_hash": "241bacd40b58d919780222cc30cb0793af5dfdb1a931d4bcf1bb8ca109abdfbb", "ref_doc_id": "ab223abb-0a7b-4d84-8b80-a5568c3f01ff"}, "e9db37bf-772c-41c0-8fd9-46e65ee447aa": {"doc_hash": "d0e0ddc21ccffee3d87c5b67fb5b258bae4540c4459fcf7d6217fd743fbfcb68", "ref_doc_id": "cd494963-ecb2-44a3-bc31-847820c68b00"}, "8ecacdcf-30c8-41de-b9ba-86f15e672e36": {"doc_hash": "e60c3ab6cdec3ddfca7703f4367863f49293c9d3321d302b9ab8b6c31ac61411", "ref_doc_id": "a75e0141-1417-4abe-bdc7-70413e55316d"}, "4cb8438d-c313-4be3-85c5-8936e7bdeb0b": {"doc_hash": "99e5f90d5ee008090b06a6a28ef6c0e1d2336b26ca1c27f42a2cd0941d4cf3dc", "ref_doc_id": "f23b9acb-eeaa-4513-9340-9a21ed6954d0"}, "d8aef747-500b-44e5-844d-182fceb1c53d": {"doc_hash": "9926ed71fc4efc57045a0c2dc12f0fbc988b648ee5d32fe5992ff01ad7d76e2c", "ref_doc_id": "3df6f536-ea22-4f2c-911c-02fbe7118229"}, "f664a0f8-d29a-47ef-a74a-b7beb706cbae": {"doc_hash": "7544ccd361b0713b446dda04363eb5c129535dfb75012049c33d108e38cada62", "ref_doc_id": "72763741-b01d-481b-bd09-46f3899a78d3"}, "70b4213e-009c-42d8-a46a-ae72ffdf0991": {"doc_hash": "5319dbc7f5b20857f3276eed9ecdda2a4b0d5330ffbf70c0fc72d58011ad5b3d", "ref_doc_id": "714ec507-0896-44aa-ae89-0ec98ccea9a7"}, "f5ab5366-de8f-4197-adf2-a651294578fb": {"doc_hash": "05a9f9ca1bc49b9841f9ca0854293f657c4d0f8df28179a4d82917dc385918e0", "ref_doc_id": "8eb519ee-76cf-4db2-8954-a247818fdff6"}, "2697b7ab-0419-412b-8a2a-d6d98e95eb39": {"doc_hash": "a290cb313b3ad1fd9bb249ecea786e703452ddd6fd03258525cff926fd01c3e8", "ref_doc_id": "0fae4ee6-d962-4347-91a0-ebbf93d558e7"}, "7e76f11a-3145-4750-ab0f-26311feede61": {"doc_hash": "c931f10522e4bb851fa3952ed60e18e823dfb32035bb3f5a7583feea63e4a67d", "ref_doc_id": "de63a42e-6d58-4997-bfb3-e58ea11ce748"}, "c373532f-7d1f-4449-b395-08aa5b92fcdf": {"doc_hash": "6b7a633d2464896c077402bfc17788036c904d19d988df0154058aba8bc3b4d9", "ref_doc_id": "edf8e059-c964-4854-9887-ad2d6fecaeb8"}, "13684e5a-92f3-47e4-8d6f-f2806c8546d9": {"doc_hash": "9198d7482e0e3dc0ad80a8e5f94a170a4b8fc0207b6073e982859e25c071ddd3", "ref_doc_id": "e6b5dba8-d1c0-469d-a6a0-741a2c07027b"}, "fb36edd4-c448-4460-8c1d-8cee4f2d7f9c": {"doc_hash": "05399d7016471c0661ccf5a9c0dcd26d5b349255bbf666ae201fde85fa5c5d8f", "ref_doc_id": "2a2aa94c-88fd-40f2-ad87-a232943b6fba"}, "08bfa745-9c8d-4302-9be5-f590ab3d2a72": {"doc_hash": "0b2711428e46f4ecd229ec28a44c2c95b942e90a44769b82fabd3f30f9510635", "ref_doc_id": "aca5c4f3-1022-46d1-a90c-021ab4ab7129"}, "ad80c14c-5a84-4853-983e-714955aa6888": {"doc_hash": "755c4d5863123121b5f6234960b05bdfcfa6220c5169c13cbe86abdb45815729", "ref_doc_id": "a94be88f-e238-4004-b88a-726eba5e0296"}, "b3b2ae06-6c94-40a8-9cea-0dc80c926587": {"doc_hash": "fe9ec97beef788ef807c377bfa8b73afe9c28ee426a81852ab0c87b2f2aa5812", "ref_doc_id": "a5e3c7c6-c0e5-440b-82f5-44f6d2edb657"}, "d71d9e6c-3d45-4bb4-9157-9c82eba85423": {"doc_hash": "16c00fc0f3cf6c8df596ba22d53d235da8090bf8ec9e0cad8f59b17867419014", "ref_doc_id": "0c0aef52-208d-4f11-8f08-f3f4b6d51032"}, "4315e452-6dcb-44f5-b554-d55b8a47ee12": {"doc_hash": "3292ba8e3303a3193a4db0b89aea8e9263f8e343229b4b64ae1a7b25486aca14", "ref_doc_id": "67dfa0a6-4abc-4822-9a4a-4f35abd05085"}, "50ca534a-bcbf-466a-aee0-b91b54c246d5": {"doc_hash": "a43244cfdab42fa7bdedc1671427e0adb19362a993e6dfbfc02726b0b4ec0366", "ref_doc_id": "e95a53db-59d9-43b2-a603-fe6837875221"}, "9d5aeb26-97de-4134-b0b3-714f4218ba1c": {"doc_hash": "d96bfa9d47b04be4262afa6a9ed5a2a3dfd3d374d8e30ab6138e76926033cda1", "ref_doc_id": "52947ac4-7a6a-4404-a868-60d87b8b4c84"}, "584cf30f-3e8f-4a94-a799-f7836b2fc688": {"doc_hash": "9a7017d51af329412d89868869236f3ae127fca60159482e625b50445dfed902", "ref_doc_id": "9fe608d3-9d31-4070-91a1-fe8c2628b4b1"}, "dc6338ec-f870-4371-b78a-16cdb05f19c7": {"doc_hash": "236fca0f71f9bf26a63d75476e66aace8a4fc32e8441098f5615869e90d32dbf", "ref_doc_id": "9beb838d-2898-4fba-8a1b-b163dff6db33"}, "5912ce45-50b7-4701-b1ab-26d54aac913d": {"doc_hash": "3c9fbba96c9de50e23e90da1c27f2869dc828d31d3ea53115483e5f19d5505e0", "ref_doc_id": "0ed2d918-58cb-4fa4-a407-8bb73b97e3f4"}, "04a1b02e-3967-454c-8ec2-2b3babfea0df": {"doc_hash": "c804c538106ca7f50099cc21573753f1ba40dbe0c7f3ae0bbef78851691dedb6", "ref_doc_id": "74738175-42ff-4da1-ae30-aab93d2ca1df"}, "c8df6a4e-e4fe-4552-aaa8-fe50b800a3c4": {"doc_hash": "3c8958507f4aa4d8209ebca8f9c2f5c0b9f253a8cb9ec684f2a948876276ec2a", "ref_doc_id": "485504bc-a9cd-40f8-af6f-d936185b770d"}, "e28eb991-1b94-4072-b5a4-628283a9f698": {"doc_hash": "5161b8de6b28a8abfed86b98e168909e633b9e24a728aac45eddf2e413fb093a", "ref_doc_id": "ce0793c9-c9d0-4516-89f1-640c3b33c5f0"}, "cbe1072f-b1f6-4b87-8bca-717bccca8c01": {"doc_hash": "5d7b1153affd8aaf696b64eec652ac46313cab369e04e63294088b9c42bce04c", "ref_doc_id": "ae72cc41-af57-4eb6-aca5-45a68c3b1a87"}, "42419080-56d4-4d26-94e7-fb1f0c3096a3": {"doc_hash": "39b7890f37846458d597f97fb6c6cc47d8f1d425a4cb2b9127d000335358d071", "ref_doc_id": "8788565c-4e78-4af6-85e8-1df101755bcc"}, "59d6bb82-5591-45d9-b5a4-9d8330f49841": {"doc_hash": "2e5a560405feb4de55f5c2026f1735c925edbe710a52b97a574c93ab565898b2", "ref_doc_id": "4c0fc5ea-f921-4c26-a94c-8dc1728f8383"}, "d74cfdb6-167d-4c90-9f62-df231d713262": {"doc_hash": "902fddde205c0e0227d2e4eb713aa7422d81f55d1ca11d49a9dfbe266108c103", "ref_doc_id": "d9d5f245-e020-4bdd-93ce-7f442dc9a6ab"}, "ac4df2e2-cf64-4d91-8373-1b2a5297779f": {"doc_hash": "b4d1297178569964b7b16d75496fb66c318e72e3a71f086f3439ea564cabf5d6", "ref_doc_id": "75490930-70f9-4af4-a1f5-da9f7f3c0b16"}, "6128eb2a-6b5e-45f9-aff0-3ec528554e39": {"doc_hash": "cc039e0d0e1c1bded816820b5f95ebd7b981d77f7b6e015519b52bd10ba81f0d", "ref_doc_id": "1cfadb7d-3cef-4e79-a048-20401eee9cd0"}, "0895e4ad-f346-434a-be08-2cb89a285d9e": {"doc_hash": "b74d61a6ce9a528607ae8014638ff2c8196f095ef7455acaa35459d9c8542f74", "ref_doc_id": "36df0cb3-0a48-4a12-b686-4ce51925ce26"}, "112e7a96-f0b3-47c2-93be-469890af4a4d": {"doc_hash": "3ed978b83e14518aaaa52efa3fb2c00139ab809fddca04da0edf372141da19d7", "ref_doc_id": "872cbf77-4bad-469b-9d04-cf4638d3b2e6"}, "0c24c8f2-a54c-45a0-836e-6b395741b098": {"doc_hash": "dc4927ed80a14807a2798f10f7e1c1bebe3dc03f87bb9654f6f31a5acf3dc316", "ref_doc_id": "0639b309-22a6-4cfd-82ad-3e4487fa7a0c"}, "1df2c3c4-1e00-4e35-afa9-daa640690159": {"doc_hash": "4c759468116d2c602eaa4613e3c9c6caa97c50ebd673196b76826a5c68bb5d3c", "ref_doc_id": "871fe5cd-8532-4c0b-bb0f-d29ffd50b00f"}, "a7746003-3104-48f4-8009-7ddd5ac2df17": {"doc_hash": "6fdd54b138381c1ae58cc41400a22da29d021fce9f912170c6c4593a01d870e6", "ref_doc_id": "489993d1-fc5e-4abd-987c-a2642d40fa5b"}, "35064c4c-b0bb-477c-9cf3-ecc3891594f8": {"doc_hash": "8014de2bc40d882377b823af41a139577c3835e550e4c2928d2e33461578b5db", "ref_doc_id": "59a487ee-3951-4d7c-9772-c1a48b14cdc7"}, "fb15f7e3-2cd0-4f2f-be80-8ca12f0d8dca": {"doc_hash": "82793ceb12bf0838a4311ef03d1d6eecf61e05b5f675b48f6c5dc1adb9126ec3", "ref_doc_id": "a8a9a2a8-413d-4b6b-8c13-76a6009023bb"}, "dd3b760a-b6d1-4bd8-ba72-3ce79aa5765a": {"doc_hash": "38f75918633a8d1ec09727c67d39ef06cdab3b5f027fe6d012e2beb30057b80a", "ref_doc_id": "12cefabd-993c-43b8-bfec-13cd62a35942"}, "4c88063e-8427-46ea-9936-890663d5ce7d": {"doc_hash": "a486c5dd46bfdb33b163049befceaeb5a67a6b9ec56852babd9e262488b39afd", "ref_doc_id": "b84946d3-875d-4089-858d-4e17aa07f35c"}, "4a89dde7-eecb-4e12-98b0-03f344a52240": {"doc_hash": "b12eaab3de93fef26ae51c4486e5cb49e8021bab9215d797bb1e27b4f6f26079", "ref_doc_id": "feb09f25-4454-43ef-8f30-4fbcce9f0ee6"}, "408b0146-282e-437d-af4c-23fde8dbec02": {"doc_hash": "606bb95845db9829db0a114d500f2299644424a92c8bb4d3fd69a6ac9484f79a", "ref_doc_id": "0369e09a-9540-43ed-acde-1e3f374fc5b2"}, "7d9a1a90-1ad0-4635-8964-2499151ad197": {"doc_hash": "8d639c26be4d3a46dd9f474cd8e94e9cc07133b44dd852d50449e78000d69956", "ref_doc_id": "e7395fa4-0985-4177-8c40-f860ef7cbfbf"}, "55e874a5-3817-403b-a931-2bcc4d602eb9": {"doc_hash": "5bedcb75e4afbff7b689342a3c826720981b695078de09c427f70efe5dae6c63", "ref_doc_id": "4790a5ea-3660-440a-b801-8891b87d1f6e"}, "5f93e77a-20b9-4304-a986-6dd6bf08a4d2": {"doc_hash": "18c015d895bd754af72f8491cad6df37f7c8aeb805c3e9aa31ad7cffcc6fb5ad", "ref_doc_id": "df9dd199-68ad-4498-a2a9-401b015a3ef1"}, "4eb192d7-1ecd-4e9b-a0ec-dbd2e0da141d": {"doc_hash": "cd1e026bddf23a143e88bb8243bd9bfcc2554d6d72c4e87c0fcfef76bb67c0bf", "ref_doc_id": "5c658d5c-a01d-488f-832b-aeabf6700f53"}, "550878fc-e6b2-4d47-ac27-ef323f2e501c": {"doc_hash": "8a308ea9abf311e95ed93cdeac5f44f2705789cf0e51b1d3e71fc59eda55b924", "ref_doc_id": "9fd8fc6d-ab69-40e7-9392-e7f2023f4f47"}, "caf00f90-87b5-4fbf-8ad0-379a6c7ab67c": {"doc_hash": "13908ab6509f2b841b7224b9e6070b1fa6336c24605a3f0d5b0d7e50fc81045a", "ref_doc_id": "a4605570-ab36-4893-a17f-3f095cf4b5b1"}, "50393566-0285-427d-a2ab-6f08c5804775": {"doc_hash": "46fcfdb6dc8ca2a5958a8f9fdc77632ce0b06ab5bcf8621b72713f1c421ebbef", "ref_doc_id": "9354b29e-a095-442c-805e-6d2977c2c434"}, "8d355dc1-16b8-4a8f-aa50-ad4336d1046b": {"doc_hash": "274aa494772486157832e1a0b9e3a4ae08cbbb085dbc7a23a6c4c8282055785e", "ref_doc_id": "5925acf1-bdfa-469f-99d7-79c1bea39d7c"}, "88e8254f-5f55-4187-890e-21cbdad88ccc": {"doc_hash": "749f951d7abee8ed3e0b67c5e35cad799ac2e7a33bfb8255a39d4335e344d246", "ref_doc_id": "b2bc8f01-c15e-4401-b248-352b7a8dc3c7"}, "a44b6cbf-e7c9-4f1b-b162-7a935c0ef4b4": {"doc_hash": "5050fe68a57b0967fa964c682a3902f66c0aebad89e032218a258f32e3c8f3fa", "ref_doc_id": "4bbf747e-b846-4068-a42b-1664a00cee01"}, "a81024f6-0760-43a1-9991-77ac1bca7f52": {"doc_hash": "796191cedeee3ae60c7ebad1a1197c2d0ba684099dfd8cf52527fab3b151ea5e", "ref_doc_id": "2d6ccfa2-165f-42e9-b17d-371a9daabf9a"}, "522dae54-3634-4ef2-9b3d-60c964786b5c": {"doc_hash": "587213db534085a8a172a8c601402261db813199e3e4abe7bd80a71ed93fd60a", "ref_doc_id": "6ab45e9e-aba5-4de6-90c4-287a9cbe0628"}, "0ec4b0ad-ce47-4c25-ad98-7f9249723a94": {"doc_hash": "378c51609c0a80dd1337039b3a89b4b9cb2e3480beb54259899cc8bf6261713a", "ref_doc_id": "f2a2d583-0e5a-44a1-9e51-bae9c67b6cf1"}, "8418ba7a-45a6-4225-a79c-918387bd6a62": {"doc_hash": "71b922c47b6ce614ae26f070c98efb17736e851349105bfda14c47a275d8cb73", "ref_doc_id": "171c7bf9-2904-4ded-8341-2b9e4ada4733"}, "06341d7e-e1f2-4625-bc4f-0bc2d1ab7d3d": {"doc_hash": "54309fb6053f5e393109d9da245aff7db0d32c3a465c173daafb51598fd63773", "ref_doc_id": "82340a38-b2c6-42fd-9bc4-cb18b6beeb6d"}, "00e5d97a-2eb0-4e93-b151-91ca48e8aa26": {"doc_hash": "a775113346c01949dff456c7a7f904579e3b7d2ad3c47dac04ea4bc2af7d0968", "ref_doc_id": "b29ad751-f79a-4c42-9b88-c3c083b74488"}, "d366bcf8-baae-4868-aae2-60c54a62bd86": {"doc_hash": "7e10ba68201036dd36c342d0e884661234ddf2f992cd8910b8dbdb0190e6f8ee", "ref_doc_id": "29c5abe5-3b34-49f8-af4e-f61c18a6ac7c"}, "f074787a-e24c-4795-84c2-fb3fb3573ee8": {"doc_hash": "e3c583c101c7149b2da726b6e78a1cad4bc517764af91461e06ac320a7e94d06", "ref_doc_id": "0e82ba89-6557-4b8c-b8c0-bc74b8627efc"}, "9c46119a-ee2c-4060-9ce4-7130d2301244": {"doc_hash": "8b26cd8fd05d6ffd79ea66921e9fdcd174c881a6ffdb60068a65d12032e5dbdf", "ref_doc_id": "77215878-ae99-4a33-a21c-9d6063252670"}, "ce293d1f-bf64-4311-bc5f-dd72f3791f2d": {"doc_hash": "3db0a8db000795a145f2aca882870d69cf42a920505142e13a505bce9aabdade", "ref_doc_id": "08c98c90-cc25-48e0-ad44-4091af21472e"}, "af817e26-7d99-4854-84e1-090205a7122d": {"doc_hash": "2c6fa6aa7b11d082fb2006acff04c8019dea714dffde4523a34ed3eed2cbcc94", "ref_doc_id": "b4884eb8-62e5-4a3a-a4f0-cdaefffd24cc"}, "9d2e69db-6b6b-4b9d-91d1-73284ef39b9d": {"doc_hash": "d358de4eec3bd5f581ca9e9f9b3620784fcb9077fe1152b0ba9908628bfd9954", "ref_doc_id": "173860ac-e8bc-4ddd-a7be-cf5accc32df1"}, "008e7cab-2652-4a68-b89f-d06857898dfc": {"doc_hash": "730dfe30b434c73928b248ac2f75a81bff52ddaf263f90ea96217d6b08cf32c6", "ref_doc_id": "1c7b52eb-1049-4072-9b8f-efc2200435b1"}, "af14e3f9-4fde-4f85-aa9c-28d25fc50758": {"doc_hash": "85413b96dc2a5ae4104b784abba9753a37ae05777b66c73bc763ede17763a3d7", "ref_doc_id": "8f6d6eff-5772-4b1c-abb5-bb62a6223d26"}, "4aa58d5b-3ea8-4788-8d52-be7ee0af0bfc": {"doc_hash": "d009c115dca87ae2fb82253cf7109b3ff51587979575f9ca404755bd4408c291", "ref_doc_id": "dd5f0495-e2e0-4b7b-86fb-91a20f7bc5bf"}, "f5a5722d-263e-42d6-a8dc-f52891a73c6c": {"doc_hash": "09bf9366f4d088ef715c5da5d823047cbcf0e6be3abd62fe7bf8ff54fca00be7", "ref_doc_id": "ac07b51a-77a3-438a-9979-b5d233fd5913"}, "86cc07f6-aa82-4e47-8b31-ec08e82f75a5": {"doc_hash": "46f13f3942a3479b65d2ef3f41bd0059176bff714c2d5a6eb9c8ff24b236d59c", "ref_doc_id": "ac260c0c-fb46-4e91-a248-06ede4262334"}, "51fd4089-5014-443a-89ad-193ea682a28c": {"doc_hash": "335af48a6e7f875e4fe60a19d5c1d400185e302cc9b30c169fd69a0be8c51be4", "ref_doc_id": "656adb28-d9eb-42fa-8a6d-672170726148"}, "6d49d8a4-5306-4e76-affb-ac6299bc28c7": {"doc_hash": "f36a85185468960fc77f7ee2845d6bebe2ec2ea8fcc9ec3f3e697e4897fc0b20", "ref_doc_id": "d9f0c233-0e5f-40b7-a717-33f7daf1a322"}, "b161bda9-9d3f-4a3e-b53c-c67e209b2b3e": {"doc_hash": "b9d9e448ad455a5b48ff2dc2d020c58d895a20a9e6b8ac7e2da65289764c59a9", "ref_doc_id": "a8aa2fe1-9c24-4540-91d1-3dab1eb0a034"}, "017bdc6c-5669-4b3e-b197-0be6124329fb": {"doc_hash": "e09e5e7d3aa3ace3b46ba7308ff1f8e5de40dd4b8573a50142cf70105c3cf25e", "ref_doc_id": "545fcc79-cde7-4489-b822-f42eb2b0fa63"}, "18d24285-d692-45cd-a73d-fff00440c841": {"doc_hash": "7ec2066e13fdfc8a60738f06b8d11dc013d116885a626ab5e191063b63f0769e", "ref_doc_id": "372c792f-c261-4e70-a33b-986ec93bf056"}, "7f783308-9c61-4351-b411-4dd97bfa2c4a": {"doc_hash": "7c653128fe21959016e9f8888514454a8c8bd5c993f7bfcce8a08202c4164f9f", "ref_doc_id": "7767a2db-642e-4808-8a35-2e74a62642be"}, "f720afb1-6b8a-4466-ab92-a87a058d5c94": {"doc_hash": "e89b58ee6818648ff96a0c2c37e239d2d27c491d10883a7b6ce99ddc73ee5e5b", "ref_doc_id": "4c109406-2c19-4313-8501-31ed77725522"}, "84d646bb-d583-49ef-ab52-689fcfe46590": {"doc_hash": "8b7f348bd7ed5644ce74f21f11933f6a6e6b4a28f3e558ddb0802a140fa050b8", "ref_doc_id": "cc156b81-3589-400d-a446-ebd6e1397926"}, "7e221854-309e-4b4d-935a-d0f23f282472": {"doc_hash": "73c6f7e13d450905539b913fde69bcafba8a67252492f81bc400870869870a04", "ref_doc_id": "d174918a-3a87-405b-b195-b39afd3b2620"}, "37ac774b-6b27-443f-93eb-4cac81e900fc": {"doc_hash": "e99f121e2862d0617fd1be5b5426fa0d3be07bf6def573ad53db0bb48225ba32", "ref_doc_id": "578bd1ef-90bc-4809-9d85-6667645212b7"}, "da607bee-1929-423d-ac35-3144e81a82f9": {"doc_hash": "073255892507da3e5cfd1afd1e6ee298ca91131c9df4b0e190d8e45bc137de61", "ref_doc_id": "14d26aa6-5446-4e09-bc2d-a337a5a8b8db"}, "04d13512-1235-49c2-8bbe-a41195dca93a": {"doc_hash": "40af705a8161a11f214949cdf86d577c9f9f9e908f9c7fa84d2a4a8675d57291", "ref_doc_id": "2c31c969-ae0f-4f57-ae1a-1d527bf942d1"}, "6c3e0c68-e587-41a9-8298-9a389cf7441f": {"doc_hash": "a4bdf99610f4d4f8988b368b2151eef1df9891f787615361859714b5b6749236", "ref_doc_id": "45fc436e-de3f-4ebc-9b61-0e49198d66c7"}, "93a6947c-4c20-43c6-8cac-ca01e143b094": {"doc_hash": "7831f49e9685d1bae8792c86b459a7d2fe54105a24754737ef5c3668d07009a7", "ref_doc_id": "7049309e-028c-4a9f-bb50-7e9efcef6c9c"}, "9502839e-557c-4cd4-8bf8-3ffbd29badc2": {"doc_hash": "90c31b7b0d80932326bc1ebbac9f08895b956039c29dd983cf2eca2d8e7b7f55", "ref_doc_id": "73c465cb-578f-4fcb-b30a-81ce4290a97c"}, "0634b079-4d20-4c35-97af-c6bedfabc89e": {"doc_hash": "42938375e565a74981f2e26de03d8141ac8e52195a6680a248e4d9d8c74784b6", "ref_doc_id": "398bb147-33ff-49aa-904d-2152bc65ec73"}, "eebd14ea-71c2-4d98-a82a-d1e6a4305803": {"doc_hash": "e005a69cbb5c2f9b9626814ad3166f9458dc0009db255425428451b6a0fca92d", "ref_doc_id": "840db8c4-bfd1-4190-b374-8c2bbe1f1c00"}, "58bd72a3-7060-44d3-9e44-dc3ff5b83aa6": {"doc_hash": "9a5f508cd453f9ed5acd9d2a6bd362157f8e1d9192d74462e7d4ebcbe5fb64e0", "ref_doc_id": "1f353bf1-8717-41be-a5f8-8c984490032a"}, "33ad246c-8a6d-4eee-8a62-647bb52d2734": {"doc_hash": "97978dbb2cc05495d0a48370cf2b562cc3e1c1a1f9f5ff4101ddaf22ff2ca7b1", "ref_doc_id": "593b7e3e-3b51-40ff-8ccb-dffcff8baaa3"}, "b61ad94f-7fe5-4351-ac12-9c152bae5ed5": {"doc_hash": "10c04498cc5d6f0949974a3529c902c6e491635be39f95d8a50009c5e53b07c3", "ref_doc_id": "8c7d179f-b156-41b8-9342-ab89cc58bf67"}, "5f98ec88-9116-4e83-8409-27c62b9ba00d": {"doc_hash": "3c5172bf1cba7371e19b1355da2cefc465a054f4001a6ab360a2eb683a36fc50", "ref_doc_id": "32e14cbc-5b04-479f-94c9-13317bc8929f"}, "69d86548-9ff3-4eb4-bd32-ca5533a38859": {"doc_hash": "1d96c30e410ef3790692c069de2c50eebf417a5a6ee8b62e4ae7957b5080aa7f", "ref_doc_id": "a5ec5f19-7494-419c-9e49-80524c53925e"}, "f6dde58e-360a-4d93-ad5f-831f972260eb": {"doc_hash": "006ac6a7e1fd3948a3e6343bb6db5a5941bb133a3acf9a05758a349be329fa6f", "ref_doc_id": "75abc701-9547-4db1-88db-b9a70152bb53"}, "dd63543e-3aa2-4b0e-ada8-440b5c9385be": {"doc_hash": "7d89b938e831aa2c447c1fef2d81f222bd857062d7d315591e69a065c958db35", "ref_doc_id": "ede2a2e5-6960-42c7-b0c9-f404a5d8f00e"}, "e8623e5a-b1ce-4c60-b4b3-25a9ad741c01": {"doc_hash": "12b8be284d255d601ab8dfccc3d6f578f0884a29f7342ca6098a1aa33b491613", "ref_doc_id": "09216f3b-90d7-4f81-ad64-eb2e83310f71"}, "d75ed1f1-b824-411e-aede-d87787154fb7": {"doc_hash": "28ba9a8339edd109b092db1b5a5b9da5cc8fc5429c8b7ec247a52599c69411ed", "ref_doc_id": "567f0db9-701b-41e8-92a3-f1a966b1d2f9"}, "a4446c47-231e-439e-a508-b2655bd3aa7c": {"doc_hash": "48e0d32ca465fb655a282fa362ebf298cb309f8b4bd4045b2ae4b05b837f3dd7", "ref_doc_id": "c8b90021-81b5-40e9-8646-855561220ee0"}, "7dc5cd97-4bc1-49db-8eb8-a0402f0a3da8": {"doc_hash": "21b24ec766b4c5de8da21167ba45caffaaa630e8c7c28bae511c2fd89ff51b8d", "ref_doc_id": "9f0d6754-0242-4f15-b6e0-f099ad2c086b"}, "cd67376f-16f1-4baf-86e2-86d0e02c947c": {"doc_hash": "ff613fc848f2cced904bc6752cb793c1f256b8421adf384f315fba7a34875530", "ref_doc_id": "f8b31499-b19e-4343-a4d0-8e2ab04cd358"}, "ded1ba96-9f89-48f0-ad56-c7d714432850": {"doc_hash": "ccce0a8fdeee46d525eeda6a1335cfa7bcce2d1be47b4c49ab143a93eee240bb", "ref_doc_id": "4084ba60-0e11-429b-a8a0-d1830e8fbca1"}, "7efde2bf-2497-49dc-b0c7-ef5302175c78": {"doc_hash": "9f44a339c47d7078b7e1d8361a9e7c14b9976ebd28493814ff1f41b9fb079075", "ref_doc_id": "bbdacd90-1ad1-4053-9dd4-6f05dcec4d2a"}, "f7910503-66d4-481a-89a0-81073f6e930b": {"doc_hash": "8478f5ba67019c6d42f6c380ef697ef9064b5c62fc9fd48e69f176d5ab432939", "ref_doc_id": "df7b4161-83bd-4d60-b70f-11beea6e772b"}, "6475e032-f81b-4dbd-b07a-ee3770810ca8": {"doc_hash": "dd271d73dbf9f0a6cf66706027cc42b1af29f26d42c81578b331d77c4aa6adf4", "ref_doc_id": "14690d05-e6fe-4e10-8615-dcf58f09c781"}, "c8b78db1-c305-4f86-8cfd-64cbbd8b2cb9": {"doc_hash": "3e4863eff8601c06e2005864eecdc98bdda6b93b9ca7854e24bef110e8c90413", "ref_doc_id": "0e77d9e8-f30e-4cc1-8230-798cb63bb713"}, "3fd5b295-7b20-4815-b280-9b50c73b98f9": {"doc_hash": "7cbbadba8973aee1f19600ebb7819a1a7658cae14f41b2bfbd40317ca505cc74", "ref_doc_id": "943c1a3b-4d4b-4b1b-889a-577871e215bb"}, "cb70a7c5-f84b-4ff1-9810-290cb8ddcf69": {"doc_hash": "f082cb53b6bf651abf72c9fac41c830725ca241fe22dc929968e93e917f65b66", "ref_doc_id": "8a6bc93e-cc68-4c19-859f-c332660bee19"}, "45cc1895-847a-4727-881c-3266c35778ee": {"doc_hash": "78ce3ababf09fe919de8869d24f0a744befcbc8e90de8b6bc4b36d53e5adc739", "ref_doc_id": "8968ca03-1aed-44ea-9783-dfec7d31b327"}, "33297f1d-bb5c-45cf-a1e5-aa8c7bf50544": {"doc_hash": "5831e31a04e1c9ad7777cb43a65f29e3056936bb72f0f1c03e24b4188b9ff548", "ref_doc_id": "42ed0caf-9346-48e6-90b3-b4e41dba7294"}, "d04f53a3-54d1-45b5-a6f5-10e49aab0e53": {"doc_hash": "347884873e6a0a9d912889bc7b443ed1e3776a654d694e6e5b357b2623ffb3a6", "ref_doc_id": "5b4d889c-8339-4aac-8640-8f66b43491df"}, "6cd01783-93e5-497e-8ec0-247c839e72af": {"doc_hash": "c5343b1da3cbb42c1fa3419b01e46e75ff07206e2e68dbdb88d68cca364a5268", "ref_doc_id": "f74a0b95-2f14-45d3-b2d0-3604314e549f"}, "75e08a88-edf1-4f33-b4a0-66bab772eb56": {"doc_hash": "d82e2ba21d36c48018a36bc4aa9cd7e4fd0fbfabd7a5182bc24d17efeda40544", "ref_doc_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f"}, "c8c40876-bc2a-49f8-af2e-43468c8189ed": {"doc_hash": "daa402a1fdc3c54cf4caf1a9b59e42c1858ee9865189c9a06dbadd82d2d30ba2", "ref_doc_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f"}, "83e16036-328d-471b-af20-6d2f65679efb": {"doc_hash": "a2dfa1b090e8d4935a3ab769c373c9f46085d43b0b2af54d43b519ae682279b2", "ref_doc_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f"}, "07c75a1e-e995-41bf-9ab2-aade22069c61": {"doc_hash": "908470f854c151bb888c1fb43d32e6b1de4a662bbce9ea9116bf39480f10f5eb", "ref_doc_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f"}}, "docstore/data": {"0ddf3ca2-ae0f-483f-a810-1fac3384e668": {"__data__": {"id_": "0ddf3ca2-ae0f-483f-a810-1fac3384e668", "embedding": null, "metadata": {"page_label": "C1", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1fc78064-ea7c-4167-8ffe-98c190177d1e", "node_type": "4", "metadata": {"page_label": "C1", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "667c8ba27e1b9c48fa84d80d8a81536b34159fff0e2089e3cb3bbd988cdb41eb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Natural Language \nProcessing  \nRecipes\nUnlocking Text Data with  \nMachine Learning and  \nDeep Learning using Python\n\u2014\nAkshay Kulkarni\nAdarsha Shivananda", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 152, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "684e74f6-044f-4ee3-a220-5424a71a6a76": {"__data__": {"id_": "684e74f6-044f-4ee3-a220-5424a71a6a76", "embedding": null, "metadata": {"page_label": "i", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93cc72eb-740e-49e0-b912-52a352cc5a55", "node_type": "4", "metadata": {"page_label": "i", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "48ff659a29583ec15577825fff76daf5699bf7840e98c1d39bfc45f6990290f3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Natural Language \nProcessing Recipes\nUnlocking Text Data with \nMachine Learning and Deep \nLearning using Python\nAkshay Kulkarni\nAdarsha Shivananda", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 146, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "63f9dbd8-fd73-46ea-a7a3-2ba076010f1c": {"__data__": {"id_": "63f9dbd8-fd73-46ea-a7a3-2ba076010f1c", "embedding": null, "metadata": {"page_label": "ii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "937d537a-0c6c-49c8-a68e-c7cf556599b3", "node_type": "4", "metadata": {"page_label": "ii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "77ecf407c109420a8cd1b71c3efab25b6667cec66952837786e205d08973c511", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Natural Language Processing Recipes\nISBN-13 (pbk): 978-1-4842-4266-7  ISBN-13 (electronic): 978-1-4842-4267-4\nhttps://doi.org/10.1007/978-1-4842-4267-4\nLibrary of Congress Control Number: 2019931849\nCopyright \u00a9 2019 by Akshay Kulkarni and Adarsha Shivananda\nThis work is subject to copyright. All rights are reserved by the Publisher, whether the whole \nor part of the material is concerned, specifically the rights of translation, reprinting, reuse of \nillustrations, recitation, broadcasting, reproduction on microfilms or in any other physical \nway, and transmission or information storage and retrieval, electronic adaptation, computer \nsoftware, or by similar or dissimilar methodology now known or hereafter developed.\nTrademarked names, logos, and images may appear in this book. Rather than use a \ntrademark symbol with every occurrence of a trademarked name, logo, or image we use the \nnames, logos, and images only in an editorial fashion and to the benefit of the trademark \nowner, with no intention of infringement of the trademark.\nThe use in this publication of trade names, trademarks, service marks, and similar terms, \neven if they are not identified as such, is not to be taken as an expression of opinion as to \nwhether or not they are subject to proprietary rights.\nWhile the advice and information in this book are believed to be true and accurate at the \ndate of publication, neither the authors nor the editors nor the publisher can accept any \nlegal responsibility for any errors or omissions that may be made. The publisher makes no \nwarranty, express or implied, with respect to the material contained herein.\nManaging Director, Apress Media LLC: Welmoed Spahr\nAcquisitions Editor: Celestin Suresh John\nDevelopment Editor: Matthew Moodie\nCoordinating Editor: Shrikant Vishwakarma\nCover designed by eStudioCalamar\nCover image designed by Freepik (www.freepik.com)\nDistributed to the book trade worldwide by Springer Science+Business Media New\u00a0York, \n233 Spring Street, 6th Floor, New\u00a0York, NY 10013. Phone 1-800-SPRINGER, fax (201) \n348-4505, e-mail orders-ny@springer-sbm.com, or visit www.springeronline.com. Apress \nMedia, LLC is a California LLC and the sole member (owner) is Springer Science + Business \nMedia Finance Inc (SSBM Finance Inc). SSBM Finance Inc is a Delaware corporation.\nFor information on translations, please e-mail rights@apress.com, or visit http://www.\napress.com/rights-permissions.\nApress titles may be purchased in bulk for academic, corporate, or promotional use. eBook \nversions and licenses are also available for most titles. For more information, reference our \nPrint and eBook Bulk Sales web page at http://www.apress.com/bulk-sales.\nAny source code or other supplementary material referenced by the author in this book is \navailable to readers on GitHub via the book\u2019s product page, located at www.apress.com/ \n978-1-4842-4266-7. For more detailed information, please visit http://www.apress.com/\nsource-code.\nPrinted on acid-free paper\nAkshay\u00a0Kulkarni\nBangalore, Karnataka, India\nAdarsha\u00a0Shivananda\nBangalore, Karnataka, India", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 3088, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8aea0a5a-8494-4e5c-b293-6e203f01d36e": {"__data__": {"id_": "8aea0a5a-8494-4e5c-b293-6e203f01d36e", "embedding": null, "metadata": {"page_label": "iii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76cf2f42-2b89-40fd-9158-41dfa4509bac", "node_type": "4", "metadata": {"page_label": "iii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ae64a21f5f5cedb1b6e95f33b9591cc8e7e6dbd8b51c5524b52bd8f2ce89da25", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "To our family", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 13, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e3e9096-78a0-4b95-9c2d-1d1bed9fee13": {"__data__": {"id_": "0e3e9096-78a0-4b95-9c2d-1d1bed9fee13", "embedding": null, "metadata": {"page_label": "v", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1a682b75-57ae-4469-822c-2d409ea4d47a", "node_type": "4", "metadata": {"page_label": "v", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1580b6c0abdb5710df0894a4eeaa7f49286bad0e57f92909bcaaf4a4615b92fc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "v\nAbout the Authors \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxiii\nAbout the Technical Reviewers \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxv\nAcknowledgments \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxvii\nIntroduction \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdxix\nTable of Contents\nChapter 1: Extracting the Data \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1\nIntroduction \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1\nRecipe 1-1\ufffd Collecting Data \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd3\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd3\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd3\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd3\nRecipe 1-2\ufffd Collecting Data from PDFs \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd5\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd5\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd5\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd5\nRecipe 1-3\ufffd Collecting Data from Word Files \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd7\nRecipe 1-4\ufffd Collecting Data from JSON \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd8\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd8\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd8\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd9", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2447, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4bb5f568-8e43-452b-abb5-54844fdd7df5": {"__data__": {"id_": "4bb5f568-8e43-452b-abb5-54844fdd7df5", "embedding": null, "metadata": {"page_label": "vi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75e2caea-88ec-434e-8843-96afa1126480", "node_type": "4", "metadata": {"page_label": "vi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "232bbd9a6a05fac95399a071895439b56961088bf18f85268f2e68a64f1b2b94", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "vi\nRecipe 1-5\ufffd Collecting Data from HTML \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd11\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd11\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd11\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd11\nRecipe 1-6\ufffd Parsing Text Using Regular Expressions \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd15\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd16\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd16\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd16\nRecipe 1-7\ufffd Handling Strings \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd26\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd26\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd26\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd27\nRecipe 1-8\ufffd Scraping Text from the Web \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd28\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd29\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd29\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd29\nChapter 2: Exploring and Processing Text Data \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd37\nRecipe 2-1\ufffd Converting Text Data to Lowercase \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd38\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd38\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd39\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd39\nRecipe 2-2\ufffd Removing Punctuation \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd41\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd41\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd41\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd41\nTable of ConTenTsTable of ConTenTs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2811, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0cd96dd7-0cd8-402f-9638-b26df1114052": {"__data__": {"id_": "0cd96dd7-0cd8-402f-9638-b26df1114052", "embedding": null, "metadata": {"page_label": "vii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd4e933a-4e7f-4200-9ec8-fa81813e8390", "node_type": "4", "metadata": {"page_label": "vii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "04929208f57cc0b1e1ece3bde40f58b0ccac1d2300967a629851382644f820f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72204e42-59a3-4eb3-aa0c-4d2b81f57d84", "node_type": "1", "metadata": {}, "hash": "503ed4bee0d6dc4060d4dc14aa2dfa8a844e795a60b496faea742ec3b91c2418", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "vii\nRecipe 2-3\ufffd Removing Stop Words \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd43\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd44\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd44\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd44\nRecipe 2-4\ufffd Standardizing Text \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd46\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd46\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd46\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd46\nRecipe 2-5\ufffd Correcting Spelling \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd47\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd48\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd48\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd48\nRecipe 2-6\ufffd Tokenizing Text\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd50\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd50\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd50\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd51\nRecipe 2-7\ufffd Stemming \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd52\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd53\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd53\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd53\nRecipe 2-8\ufffd Lemmatizing \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd54\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd55\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd55\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd55\nRecipe 2-9\ufffd Exploring Text Data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2768, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "72204e42-59a3-4eb3-aa0c-4d2b81f57d84": {"__data__": {"id_": "72204e42-59a3-4eb3-aa0c-4d2b81f57d84", "embedding": null, "metadata": {"page_label": "vii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd4e933a-4e7f-4200-9ec8-fa81813e8390", "node_type": "4", "metadata": {"page_label": "vii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "04929208f57cc0b1e1ece3bde40f58b0ccac1d2300967a629851382644f820f3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0cd96dd7-0cd8-402f-9638-b26df1114052", "node_type": "1", "metadata": {"page_label": "vii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "38c0ac8898e2eddc1d8b82d33fb3367529c1b9520005fc5518a0f02388e65b91", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2-9\ufffd Exploring Text Data \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd56\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd56\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd56\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd57\nTable of ConTenTsTable of ConTenTs", "mimetype": "text/plain", "start_char_idx": 2744, "end_char_idx": 3226, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d6d49ed3-973f-45e8-aaf2-ae160466f419": {"__data__": {"id_": "d6d49ed3-973f-45e8-aaf2-ae160466f419", "embedding": null, "metadata": {"page_label": "viii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e5abde96-3f6a-4c23-bce8-92f60f8ff767", "node_type": "4", "metadata": {"page_label": "viii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "366124a6e11f8024cd8ebdad756a1a8b364c6ea89c204153755ceac61c69381d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "viii\nRecipe 2-10\ufffd Building a Text Preprocessing Pipeline \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd62\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd62\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd62\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd62\nChapter 3: Converting Text to Features \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd67\nRecipe 3-1\ufffd Converting Text to Features Using One Hot Encoding \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd68\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd68\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd68\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd69\nRecipe 3-2\ufffd Converting Text to Features Using Count Vectorizing \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd70\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd70\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd70\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd71\nRecipe 3-3\ufffd Generating N-grams \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd72\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd72\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd72\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd73\nRecipe 3-4\ufffd Generating Co-occurrence Matrix \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd75\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd75\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd75\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd75\nRecipe 3-5\ufffd Hash Vectorizing \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd78\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd78\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd78\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd78\nTable of ConTenTsTable of ConTenTs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2792, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "be4fc48c-62c6-4cf0-a739-2eb7b424d3f8": {"__data__": {"id_": "be4fc48c-62c6-4cf0-a739-2eb7b424d3f8", "embedding": null, "metadata": {"page_label": "ix", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75b412d3-b1e4-4caf-bfcf-c13b11826af2", "node_type": "4", "metadata": {"page_label": "ix", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "8a98ddddd9ef1545555369548ade1c7d14d0362caf97fadec9e1da9a5a3c3c5b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "ix\nRecipe 3-6\ufffd Converting Text to Features Using TF-IDF \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd79\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd80\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd80\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd80\nRecipe 3-7\ufffd Implementing Word Embeddings \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd82\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd84\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd84\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd85\nRecipe 3-8 Implementing fastText \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd93\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd93\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd94\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd94\nChapter 4: Advanced Natural Language Processing \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd97\nRecipe 4-1\ufffd Extracting Noun Phrases \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd100\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd100\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd100\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd100\nRecipe 4-2\ufffd Finding Similarity Between Texts \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd101\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd101\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd101\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd102\nRecipe 4-3\ufffd Tagging Part of Speech \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd104\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd104\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd104\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd105\nTable of ConTenTsTable of ConTenTs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2789, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "11beefdb-c5b9-4f20-af21-90a62a4db18b": {"__data__": {"id_": "11beefdb-c5b9-4f20-af21-90a62a4db18b", "embedding": null, "metadata": {"page_label": "x", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9bd203fe-3128-402c-a379-e167508de592", "node_type": "4", "metadata": {"page_label": "x", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f2e6eb6a63636edd255f7ca71d2814db95ef01caf894a653d1a8fdaa8cf43a93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1140755c-f52b-4456-8704-6e3ec8277eda", "node_type": "1", "metadata": {}, "hash": "2cb9f6988a592f699bbd21e1d3380f078f8499d541c42a71a20dc94eec65693c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "x\nRecipe 4-4\ufffd Extract Entities from Text \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd108\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd108\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd108\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd108\nRecipe 4-5\ufffd Extracting Topics from Text \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd110\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd110\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd110\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd110\nRecipe 4-6\ufffd Classifying Text \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd114\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd114\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd114\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd115\nRecipe 4-7\ufffd Carrying Out Sentiment Analysis \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd119\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd119\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd119\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd119\nRecipe 4-8\ufffd Disambiguating Text \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd121\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd121\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd121\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd121\nRecipe 4-9\ufffd Converting Speech to Text \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd123\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd123\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd123\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd123\nRecipe 4-10\ufffd Converting Text to Speech \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd126\nProblem", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2798, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1140755c-f52b-4456-8704-6e3ec8277eda": {"__data__": {"id_": "1140755c-f52b-4456-8704-6e3ec8277eda", "embedding": null, "metadata": {"page_label": "x", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9bd203fe-3128-402c-a379-e167508de592", "node_type": "4", "metadata": {"page_label": "x", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f2e6eb6a63636edd255f7ca71d2814db95ef01caf894a653d1a8fdaa8cf43a93", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11beefdb-c5b9-4f20-af21-90a62a4db18b", "node_type": "1", "metadata": {"page_label": "x", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5c715814352fad796e29a84108945c3a2f52ee833b5c5f9babe082623a5e5929", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "to Speech \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd126\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd126\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd126\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd126\nTable of ConTenTsTable of ConTenTs", "mimetype": "text/plain", "start_char_idx": 2718, "end_char_idx": 3168, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0634c958-7e7b-4cd8-aa24-5ab8164fbbcc": {"__data__": {"id_": "0634c958-7e7b-4cd8-aa24-5ab8164fbbcc", "embedding": null, "metadata": {"page_label": "xi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9385521a-f393-49a2-aa85-666445066e86", "node_type": "4", "metadata": {"page_label": "xi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ff5334e292a16f2f3aab607e8414f0df40f47a6d83ca4ae7cd52b72a41585965", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xi\nRecipe 4-11\ufffd Translating Speech \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd127\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd127\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd127\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd128\nChapter 5: Implementing Industry Applications \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd129\nRecipe 5-1\ufffd Implementing Multiclass Classification \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd130\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd130\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd130\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd130\nRecipe 5-2\ufffd Implementing Sentiment Analysis \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd139\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd139\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd139\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd139\nRecipe 5-3\ufffd Applying Text Similarity Functions \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd152\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd152\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd152\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd152\nRecipe 5-4\ufffd Summarizing Text Data \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd165\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd165\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd165\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd166\nRecipe 5-5\ufffd Clustering Documents \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd172\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd172\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd173\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd173\nTable of ConTenTsTable of ConTenTs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2783, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "47379d28-1b84-4799-a39f-39b73b72917b": {"__data__": {"id_": "47379d28-1b84-4799-a39f-39b73b72917b", "embedding": null, "metadata": {"page_label": "xii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "788d64a3-cf51-45da-acfe-ca16fa10667a", "node_type": "4", "metadata": {"page_label": "xii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2d56bb40cad8a81cbedede8f9823f0be0d817fc5ed2957c9f68d9c84ceb7e42c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xii\nRecipe 5-6\ufffd NLP in a Search Engine \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd180\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd180\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd180\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd181\nChapter 6: Deep Learning for NLP\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd185\nIntroduction to Deep Learning \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd185\nConvolutional Neural Networks \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd187\nRecurrent Neural Networks \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd192\nRecipe 6-1\ufffd Retrieving Information \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd194\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd195\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd195\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd196\nRecipe 6-2\ufffd Classifying Text with Deep Learning \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd202\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd203\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd203\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd203\nRecipe 6-3\ufffd Next Word Prediction \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd218\nProblem \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd218\nSolution \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd219\nHow It Works \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd219\nIndex \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd229\nTable of ConTenTsTable of ConTenTs", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2332, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "73690160-affd-431b-8578-5574b7557c85": {"__data__": {"id_": "73690160-affd-431b-8578-5574b7557c85", "embedding": null, "metadata": {"page_label": "xiii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "332c4430-573e-4657-bafa-244556849206", "node_type": "4", "metadata": {"page_label": "xiii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "34d177d165078b9e15ca7b1aa0531b9e05d6c7e9249a841e8adaa44f55550fca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xiii\nAbout the Authors\nAkshay\u00a0Kulkarni\u00a0is an Artificial Intelligence \nand Machine learning evangelist. Akshay has a \nrich experience of building and scaling AI and \nMachine Learning businesses and creating \nsignificant client impact. He is currently the \nSenior Data Scientist at SapientRazorfish\u2019s core \ndata science team where he is part of strategy \nand transformation interventions through AI \nand works on various Machine Learning, Deep Learning, and Artificial \nIntelligence engagements by applying state-of-the-art techniques in this \nspace. Previously he was part of Gartner and Accenture, where he scaled \nthe analytics and data science business.\nAkshay is a regular speaker at major data science conferences.  \nHe is a visiting faculty at few of the top graduate institutes in India. In his \nspare time, he enjoys reading, writing, coding, and helping aspiring data \nscientists. He lives in Bangalore with his family. \nAdarsha\u00a0Shivananda\u00a0is a Senior Data Scientist \nat Indegene\u2019s Product and Technology team \nwhere he is working on building Machine \nLearning and AI capabilities to pharma \nproducts. He is aiming to build a pool of \nexceptional data scientists within and outside \nof the  organization to solve greater problems \nthrough brilliant training programs; and", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1279, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5be89bbe-c2be-4d12-84f3-8b6817a8ac8a": {"__data__": {"id_": "5be89bbe-c2be-4d12-84f3-8b6817a8ac8a", "embedding": null, "metadata": {"page_label": "xiv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fd9ece08-9d5a-41cc-8283-68dcbcf9cd8d", "node_type": "4", "metadata": {"page_label": "xiv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "64dae9f700ae1cef7e3baeea196aa038e511af8efba65ee4fdd231d2cd4cae0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xiv\nhe always wants to stay ahead of the curve. Previously he was working \nwith Tredence Analytics and IQVIA.\u00a0Adarsha has extensively worked on \npharma, health care, retail, and marketing domains.\nHe lives in Bangalore and loves to read, ride, and teach data science. \nabouT The auThorsabouT The auThors", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 303, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f3681ecb-5999-4d35-a68b-8f4b3feca2ab": {"__data__": {"id_": "f3681ecb-5999-4d35-a68b-8f4b3feca2ab", "embedding": null, "metadata": {"page_label": "xv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14829715-261b-4708-807b-db3ef7ac1309", "node_type": "4", "metadata": {"page_label": "xv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "6e64a93f5ed7b6e8142c74c320ab503f7aa1c09a3bda6b1744bd1f5940cde808", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xv\nAbout the Technical Reviewers\nDikshant\u00a0Shahi\u00a0is a Software Architect \nwith expertise in Search Engines, Semantic \nTechnologies, and Natural Language \nProcessing. He is currently focusing on \nbuilding semantic search platforms and \nrelated enterprise applications. He has been \nbuilding search engines for more than a \ndecade and is also the author of the book \nApache Solr: A Practical Approach to Enterprise Search (Apress, 2015).\nDikshant lives in Bangalore, India. When not at work, you can find him \nbackpacking.\nKrishnendu\u00a0Dasgupta\u00a0is a Senior Consultant \nwith 8 years of experience. He has worked \non different cloud platforms and has \ndesigned data mining architectures. He is \nworking and contributing toward NLP and \nArtificial Intelligence through his work. He \nhas worked with major consulting firms and \nhas experience in supply chain and banking \ndomains.\nKrishnendu is accredited by the Global Innovation and \nEntrepreneurship Bootcamp\u00a0\u2013 Class of 2018, held by the Massachusetts \nInstitute of Technology.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1021, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a1ca83ea-4121-4b0a-84a4-d31b7cac72fa": {"__data__": {"id_": "a1ca83ea-4121-4b0a-84a4-d31b7cac72fa", "embedding": null, "metadata": {"page_label": "xvii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16517f0c-3ddf-4cd7-bfa2-af8ae3561c33", "node_type": "4", "metadata": {"page_label": "xvii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d886fb63d9156755aa3234b66c8f0fbe1e2b32732da45d324c62b7c7ae7b9610", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xvii\nAcknowledgments\nWe are grateful to our mother, father, and loving brother and sister. We \nthank all of them for their motivation and constant support.\nWe would like to express our gratitude to mentors and friends for their \ninputs, inspiration, and support. A special thanks to Anoosh R.\u00a0Kulkarni, \nData Scientist at Awok.com for all his support in writing this book and his \ntechnical inputs. Big thanks to the Apress team for their constant support \nand help.\nFinally, we would like to thank you, the reader, for showing an \ninterest in this book and believe that you can make your natural language \nprocessing journey more interesting and exciting.\nNote that the views expressed in this book are the authors\u2019 personal ones.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 731, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "deff2b54-e241-48ea-af32-04ce290a74ec": {"__data__": {"id_": "deff2b54-e241-48ea-af32-04ce290a74ec", "embedding": null, "metadata": {"page_label": "xix", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "79cef94f-d082-4cc0-8947-a9314abe67ad", "node_type": "4", "metadata": {"page_label": "xix", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "7660dee7739ece121ec24fb9b636aac87cf5e0f99ebe0a592bde385701d9f149", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xix\nIntroduction\nAccording to industry estimates, more than 80% of the data being \ngenerated is in an unstructured format, maybe in the form of text, image, \naudio, video, etc. Data is getting generated as we speak, as we write, as we \ntweet, as we use social media platforms, as we send messages on various \nmessaging platforms, as we use e-commerce for shopping and in various \nother activities. The majority of this data exists in the textual form.\nSo, what is unstructured data? Unstructured data is the information \nthat doesn't reside in a traditional relational database. Examples include \ndocuments, blogs, social media feeds, pictures, and videos.\nMost of the insight is locked within different types of unstructured \ndata. Unlocking all these unstructured data plays a vital role in every \norganization to make improved and better decisions. In this book, let us \nunlock the potential of text data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 908, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "43564e2d-1392-45e1-b6eb-8350986a4d21": {"__data__": {"id_": "43564e2d-1392-45e1-b6eb-8350986a4d21", "embedding": null, "metadata": {"page_label": "xx", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7ed27810-d927-4876-b307-9c68e0e37cba", "node_type": "4", "metadata": {"page_label": "xx", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2919dd109faafe1e6baa2b4b32f42d3ba563863f7de38fb6d1867a7d55d2bf33", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xx\nText data is most common and covers more than 50% of the \nunstructured data. A few examples include\u00a0\u2013 tweets/posts on social media, \nchat conversations, news, blogs and articles, product or services reviews, \nand patient records in the health care sector. A few more recent ones \ninclude voice-driven bots like Siri, Alexa, etc.\nIn order to produce significant and actionable insights from text data, \nto unlock the potential of text data, we use Natural Language Processing \ncoupled with machine learning and deep learning.\nBut what is Natural Language Processing\u00a0- popularly known as NLP? We \nall know that machines/algorithms cannot understand texts or characters, so \nit is very important to convert these text data into machine understandable \nformat (like numbers or binary) to perform any kind of analysis on text data. \nThe ability to make machines understand and interpret the human language \n(text data) is termed as natural language processing.\nSo, if you want to use the power of unstructured text, this book is the \nright starting point. This book unearths the concepts and implementation \nof natural language processing and its applications in the real world. \nNatural Language Processing (NLP) offers unbounded opportunities for \nsolving interesting problems in artificial intelligence, making it the latest \nfrontier for developing intelligent, deep learning-based applications.\n What This Book Covers\nNatural Language Processing Recipes is your handy problem-solution \nreference for learning and implementing NLP solutions using Python. The \nbook is packed with thousands of code and approaches that help you to \nquickly learn and implement the basic and advanced Natural Language \nProcessing techniques. You will learn how to efficiently use a wide range of \nNLP packages and implement text classification, identify parts of speech, \ntopic modeling, text summarization, text generation, sentiment analysis, \nand many more applications of NLP .\nInTroduCTIonInTroduCTIon", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1989, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f91a037-3889-4547-8e35-b75000d03ec9": {"__data__": {"id_": "7f91a037-3889-4547-8e35-b75000d03ec9", "embedding": null, "metadata": {"page_label": "xxi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0038b57a-9f8d-4ad3-85f5-0a4a6eb67dc8", "node_type": "4", "metadata": {"page_label": "xxi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "da6a8a00913883d49a5c11cb3a9e499ac428427addf62730edfd0a9bacd18d97", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xxi\nThis book starts off by ways of extracting text data along with web \nscraping. You will also learn how to clean and preprocess text data and \nways to analyze them with advanced algorithms. During the course of \nthe book, you will explore the semantic as well as syntactic analysis of \nthe text. We will be covering complex NLP solutions that will involve text \nnormalization, various advanced preprocessing methods, POS tagging, \ntext similarity, text summarization, sentiment analysis, topic modeling, \nNER, word2vec, seq2seq, and much more. In this book, we will cover the \nvarious fundamentals necessary for applications of machine learning and \ndeep learning in natural language processing, and the other state-of-the- \nart techniques. Finally, we close it with some of the advanced industrial \napplications of NLP with the solution approach and implementation, also \nleveraging the power of deep learning techniques for Natural Language \nProcessing and Natural Language Generation problems. Employing state- \nof- the-art advanced RNNs, like long short-term memory, to solve complex \ntext generation tasks. Also, we explore word embeddings.\nEach chapter includes several code examples and illustrations.\nBy the end of the book, the reader will have a clear understanding \nof implementing natural language processing and will have worked on \nmultiple examples that implement NLP techniques in the real world. \nThe reader will be comfortable with various NLP techniques coupled \nwith machine learning and deep learning and its industrial applications, \nwhich make the NLP journey much more interesting and will definitely \nhelp improve Python coding skills as well. You will learn about all the \ningredients that you need to, to become successful in the NLP space.\n Who This Book Is For\nFundamental Python skills are assumed, as well as some knowledge of \nmachine learning. If you are an NLP or machine learning enthusiast and \nan intermediate Python programmer who wants to quickly master natural \nInTroduCTIonInTroduCTIon", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2029, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "01aeef60-9af6-44ad-aa61-5def3a6012dc": {"__data__": {"id_": "01aeef60-9af6-44ad-aa61-5def3a6012dc", "embedding": null, "metadata": {"page_label": "xxii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dc1fe8dc-af02-4863-964e-620f837e4de8", "node_type": "4", "metadata": {"page_label": "xxii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d3e32611158342d10ba72332896a4f6f5071ed311049715d8adf141f70c2303d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xxii\nlanguage processing, then this learning path will do you a lot of good. All \nyou need are the basics of machine learning and Python to enjoy this book.\nWhat you will learn:\n 1) Core concepts implementation of NLP and various \napproaches to natural language processing, NLP \nusing Python libraries such as NLTK, TextBlob, \nSpaCy, Stanford CoreNLP , and so on.\n 2) Learn about implementing text preprocessing \nand feature engineering in NLP , along with \nadvanced methods of feature engineering like word \nembeddings.\n 3) Understand and implement the concepts of \ninformation retrieval, text summarization, \nsentiment analysis, text classification, text \ngeneration, and other advanced NLP techniques \nsolved by leveraging machine learning and deep \nlearning.\n 4) After reading this book, the reader should get a good \nhold of the problems faced by different industries \nand how to implement them using NLP techniques.\n 5) Implementing an end-to-end pipeline of the NLP \nlife cycle, which includes framing the problem, \nfinding the data, collecting, preprocessing the data, \nand solving it using state-of-the-art techniques.\n What You\u00a0Need For\u00a0This Book\nTo perform all the recipes of this book successfully, you will need Python \n3.x or higher running on any Windows- or Unix-based operating system \nwith a processor of 2.0\u00a0GHz or higher and a minimum of 4\u00a0GB RAM.\u00a0You \nInTroduCTIonInTroduCTIon", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1397, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4244fec7-270f-426c-ad02-bc4961ba64b0": {"__data__": {"id_": "4244fec7-270f-426c-ad02-bc4961ba64b0", "embedding": null, "metadata": {"page_label": "xxiii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93c87d61-a3c6-4d18-b2e6-af406e25dafb", "node_type": "4", "metadata": {"page_label": "xxiii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "096aea3bc80758a689321021f4b32de0e7979bd3e32c6740fd38662b82894361", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xxiii\ncan download Python from Anaconda and leverage Jupyter notebook for \nall coding purposes. This book assumes you know Keras's basics and how \nto install the basic libraries of machine learning and deep learning.\nPlease make sure you upgrade or install the latest version of all the \nlibraries.\nPython is the most popular and widely used tool for building NLP \napplications. It has a huge number of sophisticated libraries to perform \nNLP tasks starting from basic preprocessing to advanced techniques.\nTo install any library in Python Jupyter notebook. use \u201c!\u201d before the pip \ninstall.\nNLTK: Natural language toolkit and commonly called the mother of all \nNLP libraries. It is one of the mature primary resources when it comes to \nPython and NLP .\n!pip install nltk\nnltk.download()\nSpaCy: SpaCy is recently a trending library, as it comes with the added \nflavors of a deep learning framework. While SpaCy doesn\u2019t cover all of the \nNLP functionalities, the things that it does do, it does really well.\n!pip install spacy\n#if above doesn't work, try this in your terminal/ command \nprompt\nconda install spacy\npython -m spacy.en.download all\n#then load model via\nspacy.load('en')\nTextBlob: This is one of the data scientist\u2019s favorite library when it \ncomes to implementing NLP tasks. It is based on both NLTK and Pattern. \nHowever, TextBlob certainly isn\u2019t the fastest or most complete library.\n!pip install textblob\nInTroduCTIonInTroduCTIon", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1444, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a577ec20-2358-4b44-bc57-c3f5ad0f5fcb": {"__data__": {"id_": "a577ec20-2358-4b44-bc57-c3f5ad0f5fcb", "embedding": null, "metadata": {"page_label": "xxiv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6106e3d8-03ba-4182-b432-0395c0c6daa1", "node_type": "4", "metadata": {"page_label": "xxiv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "9e7d4b5b0ea664688f916cb277f79df95de69cceaa933952b13e8abdb3cc4116", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xxiv\nCoreNLP: It is a Python wrapper for Stanford CoreNLP . The toolkit \nprovides very robust, accurate, and optimized techniques for tagging, \nparsing, and analyzing text in various languages.\n!pip install CoreNLP\nThese are not the only ones; there are hundreds of NLP libraries. But \nwe have covered widely used and important ones.\nMotivation: There is an immense number of industrial applications \nof NLP that are leveraged to uncover insights. By the end of the book, \nyou will have implemented most of these use cases end to end, right \nfrom framing the business problem to building applications and drawing \nbusiness insights.\n\u2022 Sentiment analysis: Customer\u2019s emotions toward \nproducts offered by the business.\n\u2022 Topic modeling: Extract the unique topics from the \ngroup of documents.\n\u2022 Complaint classifications/Email classifications/ \nE- commerce product classification, etc.\n\u2022 Document categorization/management using different \nclustering techniques.\n\u2022 Resume shortlisting and job description matching \nusing similarity methods.\n\u2022 Advanced feature engineering techniques (word2vec \nand fastText) to capture context.\n\u2022 Information/Document Retrieval Systems, for example, \nsearch engine.\n\u2022 Chatbot, Q & A, and Voice-to-Text applications like Siri \nand Alexa.\nInTroduCTIonInTroduCTIon", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1292, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a561f618-192a-4880-b73d-352267d1349b": {"__data__": {"id_": "a561f618-192a-4880-b73d-352267d1349b", "embedding": null, "metadata": {"page_label": "xxv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bb3693ae-3f00-4e65-8975-5996b0799561", "node_type": "4", "metadata": {"page_label": "xxv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e5e4c0a77619592c983f8bef9dd094109dd5a5fc733595e680864231d3613bf6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "xxv\n\u2022 Language detection and translation using neural \nnetworks.\n\u2022 Text summarization using graph methods and \nadvanced techniques.\n\u2022 Text generation/predicting the next sequence of words \nusing deep learning algorithms.\nInTroduCTIonInTroduCTIon", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 245, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f45f0c42-664e-469c-975e-77211614ba7a": {"__data__": {"id_": "f45f0c42-664e-469c-975e-77211614ba7a", "embedding": null, "metadata": {"page_label": "1", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ef7b7fd-7ccc-463e-99df-4c4a33ad2fb6", "node_type": "4", "metadata": {"page_label": "1", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "350b8b3511671e78aab21ce7fed1d6eac7b5298aa52dcfe19d41f116d1e73500", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "1\u00a9 Akshay Kulkarni and Adarsha Shivananda 2019\nA. Kulkarni and A. Shivananda, Natural Language Processing Recipes,  \nhttps://doi.org/10.1007/978-1-4842-4267-4_1\nCHAPTER 1\nExtracting the\u00a0Data\nIn this chapter, we are going to cover various sources of text data and ways \nto extract it, which can act as information or insights for businesses.\nRecipe 1. Text data collection using APIs\nRecipe 2. Reading PDF file in Python\nRecipe 3. Reading word document\nRecipe 4. Reading JSON object\nRecipe 5. Reading HTML page and HTML parsing\nRecipe 6. Regular expressions\nRecipe 7. String handling\nRecipe 8. Web scraping\n Introduction\nBefore getting into details of the book, let\u2019s see the different possible data \nsources available in general. We need to identify potential data sources for \na business\u2019s benefit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 799, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fd9be728-5cb2-4d0d-9e76-7a249fea3acc": {"__data__": {"id_": "fd9be728-5cb2-4d0d-9e76-7a249fea3acc", "embedding": null, "metadata": {"page_label": "2", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b8120285-e08d-4d5a-8771-c8036d7327d8", "node_type": "4", "metadata": {"page_label": "2", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "525fed6d9a3ced55196b077e920670a27a47d297eef7dccab739be511d6795d3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "2\nClient Data For any problem statement, one of the sources is their \nown data that is already present. But it depends on the business \nwhere they store it. Data storage depends on the type of business, \namount of data, and cost associated with different sources.\n\u2022 S QL databases\n\u2022 Hadoop clusters\n\u2022 Cloud storage\n\u2022 Flat files\nFree source A huge amount of data is freely available over the \ninternet. We just need to streamline the problem and start exploring \nmultiple free data sources.\n\u2022 Fr ee APIs like Twitter\n\u2022 Wikipedia\n\u2022 Government data (e.g. http://data.gov)\n\u2022 Census data (e.g. http://www.census.gov/data.html)\n\u2022 Health care claim data (e.g. https://www.healthdata.gov/)\nWeb scraping Extracting the content/data from websites, blogs, \nforums, and retail websites for reviews with the permission from the \nrespective sources using web scraping packages in Python.\nThere are a lot of other sources like crime data, accident data, and \neconomic data that can also be leveraged for analysis based on the \nproblem statement.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1061, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d3df9556-5961-42e5-8ddc-97502470c3e4": {"__data__": {"id_": "d3df9556-5961-42e5-8ddc-97502470c3e4", "embedding": null, "metadata": {"page_label": "3", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0fef6c74-27e7-4b06-9e8c-bc0a0aa6c12c", "node_type": "4", "metadata": {"page_label": "3", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "70e86d1ef7c1a3a2fbc19e5e23f42e133eaca06c240f11c30123e8d5209ca431", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "3\n Recipe 1-1. Collecting Data\nAs discussed, there are a lot of free APIs through which we can collect data \nand use it to solve problems. We will discuss the Twitter API in particular \n(it can be used in other scenarios as well).\n Problem\nYou want to collect text data using Twitter APIs.\n Solution\nTwitter has a gigantic amount of data with a lot of value in it. Social media \nmarketers are making their living from it. There is an enormous amount \nof tweets every day, and every tweet has some story to tell. When all of this \ndata is collected and analyzed, it gives a tremendous amount of insights to \na business about their company, product, service, etc.\nLet\u2019s see how to pull the data in this recipe and then explore how to \nleverage it in coming chapters.\n How It Works\n Step 1-1 Log in\u00a0to\u00a0the\u00a0Twitter developer portal\nCreate your own app in the Twitter developer portal, and get the keys \nmentioned below. Once you have these credentials, you can start pulling \ndata. Keys needed:\n\u2022 consumer key: Key associated with the application \n(Twitter, Facebook, etc.).\n\u2022 consumer secret: Password used to authenticate with \nthe authentication server (Twitter, Facebook, etc.).\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1209, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d957d865-f7a0-4037-9af3-c1074111afb5": {"__data__": {"id_": "d957d865-f7a0-4037-9af3-c1074111afb5", "embedding": null, "metadata": {"page_label": "4", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "181cadfd-5b2e-46fc-8a24-bc3d6ebb1bce", "node_type": "4", "metadata": {"page_label": "4", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ca92aee2f3dec0c232bd22f3a40a3c54447a83c61fc67e01e12afe12d9fd2811", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "4\n\u2022 access token: Key given to the client after successful \nauthentication of above keys.\n\u2022 access token secret: Password for the access key.\n Step 1-2 Execute below query in\u00a0Python\nOnce all the credentials are in place, use the code below to fetch the data.\n# Install tweepy\n!pip install tweepy\n# Import the libraries\nimport numpy as np\nimport tweepy\nimport json\nimport pandas as pd\nfrom tweepy import OAuthHandler\n# credentials\nconsumer_key = \"adjbiejfaaoeh\"\nconsumer_secret = \"had73haf78af\"\naccess_token = \"jnsfby5u4yuawhafjeh\"\naccess_token_secret = \"jhdfgay768476r\"\n# calling API\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n# Provide the query you want to pull the data. For example, \npulling data for the mobile phone ABC\nquery =\"ABC\"\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 864, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "82a53663-c164-451f-aa61-9a6cdefa7b61": {"__data__": {"id_": "82a53663-c164-451f-aa61-9a6cdefa7b61", "embedding": null, "metadata": {"page_label": "5", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "998b880a-dc06-4f31-8f91-0419d7c27580", "node_type": "4", "metadata": {"page_label": "5", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "8a16cdcbb51fe7cb13660b57206d27bd4eb173e384adde7886aacb18faadec01", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "5\n# Fetching tweets\nTweets = api.search(query, count = 10,lang='en', \nexclude='retweets',tweet_mode='extended')\nThe query above will pull the top 10 tweets when the product ABC is \nsearched. The API will pull English tweets since the language given is \u2018en\u2019 \nand it will exclude retweets.\n Recipe 1-2. Collecting Data from\u00a0PDFs\nMost of the time your data will be stored as PDF files. We need to extract \ntext from these files and store it for further analysis.\n Problem\nYou want to read a PDF file.\n Solution\nThe simplest way to do this is by using the PyPDF2 library.\n How It Works\nLet\u2019s follow the steps in this section to extract data from PDF files.\n Step 2-1 Install and\u00a0import all the\u00a0necessary libraries\nHere are the first lines of code:\n!pip install PyPDF2\nimport PyPDF2\nfrom PyPDF2 import PdfFileReader\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 841, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9ec6ac2a-9c59-4883-8832-3052e87ec9a2": {"__data__": {"id_": "9ec6ac2a-9c59-4883-8832-3052e87ec9a2", "embedding": null, "metadata": {"page_label": "6", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "479869ba-de91-4fe2-9885-a0078f07786e", "node_type": "4", "metadata": {"page_label": "6", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3a66e6df3dca6bdaf24134bd31a412bab367ee84355dec4a90810a80bb1164f3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "6\nNote You can download any PDF file from the web and place it in \nthe location where you are running this Jupyter notebook or Python \nscript.\n Step 2-2 Extracting text from\u00a0PDF file\nNow we extract the text.\n#Creating a pdf file object\npdf = open(\"file.pdf\",\"rb\")\n#creating pdf reader object\npdf_reader = PyPDF2.PdfFileReader(pdf)\n#checking number of pages in a pdf file\nprint(pdf_reader.numPages)\n#creating a page object\npage = pdf_reader.getPage(0)\n#finally extracting text from the page\nprint(page.extractText())\n#closing the pdf file\npdf.close()\nPlease note that the function above doesn\u2019t work for scanned PDFs.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 647, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "edb88af1-ed95-44bd-a3d9-f0933511c990": {"__data__": {"id_": "edb88af1-ed95-44bd-a3d9-f0933511c990", "embedding": null, "metadata": {"page_label": "7", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19fa349c-c052-4481-bfa7-8d4fc813cdcf", "node_type": "4", "metadata": {"page_label": "7", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "eb712bc075a3bf98dff6cccee1fca39d1b9764a1f7dbac7d45bb07b95b02fe30", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "7\n Recipe 1-3. Collecting Data from\u00a0Word Files\nNext, let us look at another small recipe by reading Word files in Python.\n Problem\nYou want to read Word files.\n Solution\nThe simplest way to do this is by using the docx library.\n How It Works\nLet\u2019s follow the steps in this section to extract data from the Word file.\n Step 3-1 Install and\u00a0import all the\u00a0necessary libraries\nHere are the first lines of code:\n#Install docx\n!pip install docx\n#Import library\nfrom docx import Document\nNote You can download any Word file from the web and place it in \nthe location where you are running this Jupyter notebook or Python \nscript.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 654, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "036a034c-cbf3-4b04-b508-537430095c83": {"__data__": {"id_": "036a034c-cbf3-4b04-b508-537430095c83", "embedding": null, "metadata": {"page_label": "8", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "745f9cb4-f410-4e21-bcd9-39e7d9266a99", "node_type": "4", "metadata": {"page_label": "8", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "0dda50ec840357dd33d8266b1ff041d901813e75b26e38e917344cef5b459f9b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "8\n Step 3-2 Extracting text from\u00a0word file\nNow we get the text:\n#Creating a word file object\ndoc = open(\"file.docx\",\"rb\")\n#creating word reader object\ndocument = docx.Document(doc)\n# create an empty string and call this document. This document \nvariable store each paragraph in the Word document.We then \ncreate a for loop that goes through each paragraph in the Word \ndocument and appends the paragraph.\ndocu=\"\"\nfor para in document.paragraphs:\n       docu += para.text\n#to see the output call docu\nprint(docu)\n Recipe 1-4. Collecting Data from\u00a0JSON\nReading a JSON file/object.\n Problem\nYou want to read a JSON file/object.\n Solution\nThe simplest way to do this is by using requests and the JSON library.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 736, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3f5c6d27-c7f7-4ca3-aba8-2326ce18e487": {"__data__": {"id_": "3f5c6d27-c7f7-4ca3-aba8-2326ce18e487", "embedding": null, "metadata": {"page_label": "9", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1b7c0615-a836-43a7-b46d-5a90a494907e", "node_type": "4", "metadata": {"page_label": "9", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5e8c6c635a473e71d520902fe2cfcd50621fd202503091f5a7163746fc9fd580", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "9\n How It Works\nLet\u2019s follow the steps in this section to extract data from the JSON.\n Step 4-1 Install and\u00a0import all the\u00a0necessary libraries\nHere is the code for importing the libraries.\nimport requests\nimport json\n Step 4-2 Extracting text from\u00a0JSON file\nNow we extract the text.\n#json from \"https://quotes.rest/qod.json\"\nr = requests.get(\"https://quotes.rest/qod.json\")\nres = r.json()\nprint(json.dumps(res, indent = 4))\n#output\n{\n    \"success\": {\n        \"total\": 1\n    },\n    \"contents\": {\n        \"quotes\": [\n            {\n                 \"quote\":  \"Where there is ruin, there is hope \nfor a treasure.\",\n                \"length\": \"50\",\n                \"author\": \"Rumi\",\n                \"tags\": [\n                    \"failure\",\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 764, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33eb9e8f-2f22-4939-a523-5db11fc3360c": {"__data__": {"id_": "33eb9e8f-2f22-4939-a523-5db11fc3360c", "embedding": null, "metadata": {"page_label": "10", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f11bf69b-469d-437a-a466-30e6ccd2a92b", "node_type": "4", "metadata": {"page_label": "10", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f9f6e65b242d5000a25eff8c656fe6f88eef7cd39460e6eefce5c5ac471059b3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "10\n                    \"inspire\",\n                    \"learning-from-failure\"\n                ],\n                \"category\": \"inspire\",\n                \"date\": \"2018-09-29\",\n                 \"permalink\": \"https://theysaidso.com/quote/\ndPKsui4sQnQqgMnXHLKtfweF/rumi-where-there-is-\nruin-there-is- hope- for-a-treasure\",\n                \"title\": \"Inspiring Quote of the day\",\n                 \"background\": \"https://theysaidso.com/img/bgs/\nman_on_the_mountain.jpg\",\n                \"id\": \"dPKsui4sQnQqgMnXHLKtfweF\"\n            }\n        ],\n        \"copyright\": \"2017-19 theysaidso.com\"\n    }\n}\n#extract contents\nq = res['contents']['quotes'][0]\nq\n#output\n{'author': 'Rumi',\n  'background': 'https://theysaidso.com/img/bgs/man_on_the_\nmountain.jpg',\n 'category': 'inspire',\n 'date': '2018-09-29',\n 'id': 'dPKsui4sQnQqgMnXHLKtfweF',\n 'length': '50',\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 876, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a4900fd8-24a5-4716-a82d-4383895c2575": {"__data__": {"id_": "a4900fd8-24a5-4716-a82d-4383895c2575", "embedding": null, "metadata": {"page_label": "11", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00ec6ac9-caa7-4aeb-9eb8-5973008c0c43", "node_type": "4", "metadata": {"page_label": "11", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a04d141b86c0a50237fc07b15605dff767071e8fee9bbe1afde7eb2c32762cce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "11\n  'permalink': 'https://theysaidso.com/quote/\ndPKsui4sQnQqgMnXHLKtfweF/rumi-where-there-is-ruin-there-is- \nhope- for-a-treasure',\n 'quote': 'Where there is ruin, there is hope for a treasure.',\n 'tags': ['failure', 'inspire', 'learning-from-failure'],\n 'title': 'Inspiring Quote of the day'}\n#extract only quote\nprint(q['quote'], '\\n--', q['author'])\n#output\nIt wasn't raining when Noah built the ark....\n-- Howard Ruff\n Recipe 1-5. Collecting Data from\u00a0HTML\nIn this recipe, let us look at reading HTML pages.\n Problem\nYou want to read parse/read HTML pages.\n Solution\nThe simplest way to do this is by using the bs4 library.\n How It Works\nLet\u2019s follow the steps in this section to extract data from the web.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 742, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2e87d6c6-d124-4099-9841-d7f9ab9e9a6b": {"__data__": {"id_": "2e87d6c6-d124-4099-9841-d7f9ab9e9a6b", "embedding": null, "metadata": {"page_label": "12", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e41906b-466a-4fb5-a7ec-2b58dc8ae5c2", "node_type": "4", "metadata": {"page_label": "12", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "39c9bbf9b02f05063a1a1ec91f71a5a263265e04defe5433e6beb9b60d5d0d81", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "12\n Step 5-1 Install and\u00a0import all the\u00a0necessary libraries\nLet\u2019s import the libraries:\n!pip install bs4\nimport urllib.request as urllib2\nfrom bs4 import BeautifulSoup\n Step 5-2 Fetch the\u00a0HTML file\nPick any website from the web that you want to extract. Let\u2019s pick \nWikipedia for this example.\nresponse = urllib2.urlopen('https://en.wikipedia.org/wiki/\nNatural_language_processing')\nhtml_doc = response.read()\n Step 5-3 Parse the\u00a0HTML file\nNow we get the data:\n#Parsing\nsoup = BeautifulSoup(html_doc, 'html.parser')\n# Formating the parsed html file\nstrhtm = soup.prettify()\n# Print few lines\nprint (strhtm[:1000])\n#output\n<!DOCTYPE html>\n<html class=\"client-nojs\" dir=\"ltr\" lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <title>\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 759, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7259e143-a6f9-4064-a681-2aa1a8da749c": {"__data__": {"id_": "7259e143-a6f9-4064-a681-2aa1a8da749c", "embedding": null, "metadata": {"page_label": "13", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e568726-7098-428d-bbeb-0fc1d0f6772d", "node_type": "4", "metadata": {"page_label": "13", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "7846d04cfc8a6375130379b906c6fe3d4e679e68fe47ca0bc32e714f5bdbfbdd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "13\n   Natural language processing - Wikipedia\n  </title>\n  <script>\n    document.documentElement.className = document.\ndocumentElement.className.replace( /(^|\\s)client-nojs(\\\ns|$)/, \"$1client-js$2\" );\n  </script>\n  <script>\n    (window.RLQ=window.RLQ||[]).push(function(){mw.config. \nset({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\": \nfalse,\"wgNamespaceNumber\":0,\"wgPageName\":\"Natural_language_\nprocessing\",\"wgTitle\":\"Natural language processing\", \n\"wgCurRevisionId\":860741853,\"wgRevisionId\":860741853,\"wgArticle \nId\":21652,\"wgIsArticle\":true,\"wgIsRedirect\":false,\"wgAction\": \n\"view\",\"wgUserName\":null,\"wgUserGroups\":[\"*\"],\"wgCategories\": \n[\"Webarchive template wayback links\",\"All accuracy disputes\", \n\"Articles with disputed statements from June 2018\", \n\"Wikipedia articles with NDL identifiers\",\"Natural language  \nprocessing\",\"Computational linguistics\",\"Speech recognition\", \n\"Computational fields of stud\n Step 5-4 Extracting tag value\nWe can extract a tag value from the first instance of the tag using the \nfollowing code.\nprint(soup.title)\nprint(soup.title.string)\nprint(soup.a.string)\nprint(soup.b.string)\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1157, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b9fad957-67ba-4f80-a93c-f4745a44c158": {"__data__": {"id_": "b9fad957-67ba-4f80-a93c-f4745a44c158", "embedding": null, "metadata": {"page_label": "14", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a1f228e-da52-4a35-ad14-9d43e2a5434e", "node_type": "4", "metadata": {"page_label": "14", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "707db9fd28cd716b68cd665b9d097a02f91fc61d0b7b345426f765e51d45587d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "14\n#output\n <title>Natural language processing - Wikipedia</title>\nNatural language processing - Wikipedia\nNone\nNatural language processing\n Step 5-5 Extracting all instances of\u00a0a\u00a0particular tag\nHere we get all the instances of a tag that we are interested in:\nfor x in soup.find_all('a'): print(x.string)\n#sample output\n None\nJump to navigation\nJump to search\nLanguage processing in the brain\nNone\nNone\nautomated online assistant\ncustomer service\n[1]\ncomputer science\nartificial intelligence\nnatural language\nspeech recognition\nnatural language understanding\nnatural language generation\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 618, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c615a111-a248-4291-9f42-280162b33b44": {"__data__": {"id_": "c615a111-a248-4291-9f42-280162b33b44", "embedding": null, "metadata": {"page_label": "15", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "eb8d1dc1-5210-44f3-956e-f2953500bca1", "node_type": "4", "metadata": {"page_label": "15", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f2480a77e29f1847429df308fd5d9ffe89890c0d5ef6472f4002ac0888f5a426", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "15\n Step 5-6 Extracting all text of\u00a0a\u00a0particular tag\nFinally, we get the text:\nfor x in soup.find_all('p'): print(x.text)\n#sample output\nNatural language processing (NLP) is an area of computer \nscience and artificial intelligence concerned with the \ninteractions between computers and human (natural) languages, \nin particular how to program computers to process and analyze \nlarge amounts of natural language data.\nChallenges in natural language processing frequently involve \nspeech recognition, natural language understanding, and natural \nlanguage generation.\nThe history of natural language processing generally started in \nthe 1950s, although work can be found from earlier periods.\nIn 1950, Alan Turing published an article titled \"Intelligence\" \nwhich proposed what is now called the Turing test as a \ncriterion of intelligence.\nIf you observe here, using the \u2018p\u2019 tag extracted most of the text present \nin the page.\n Recipe 1-6. Parsing Text Using Regular \nExpressions\nIn this recipe, we are going to discuss how regular expressions are helpful \nwhen dealing with text data. This is very much required when dealing with \nraw data from the web, which would contain HTML tags, long text, and \nrepeated text. During the process of developing your application, as well as \nin output, we don\u2019t need such data.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1345, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "df9d2e77-aeae-42ee-9297-d7be09ab9d38": {"__data__": {"id_": "df9d2e77-aeae-42ee-9297-d7be09ab9d38", "embedding": null, "metadata": {"page_label": "16", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9ac2dfe-19f7-4abd-8ba3-4be1b1b29728", "node_type": "4", "metadata": {"page_label": "16", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c0a15e4149c04cb7121dab883a82c2987f9ca82f5bf6b50b748c409590b53c2f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "16\nWe can do all sort of basic and advanced data cleaning using regular \nexpressions.\n Problem\nYou want to parse text data using regular expressions.\n Solution\nThe best way to do this is by using the \u201cre\u201d library in Python.\n How It Works\nLet\u2019s look at some of the ways we can use regular expressions for our tasks. \nBasic flags: the basic flags are I, L, M, S, U, X:\n\u2022 re.I: This flag is used for ignoring casing.\n\u2022 re.L: This flag is used to find a local dependent.\n\u2022 re.M: This flag is useful if you want to find patterns \nthroughout multiple lines.\n\u2022 re.S: This flag is used to find dot matches.\n\u2022 re.U: This flag is used to work for unicode data.\n\u2022 re.X: This flag is used for writing regex in a more \nreadable format.\nRegular expressions\u2019 functionality:\n\u2022 Find the single occurrence of character a and b:\nRegex: [ab]\n\u2022 Find characters except for a and b:\nRegex: [^ab]\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 903, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "49bc9586-539b-437d-803f-3c0408407bc1": {"__data__": {"id_": "49bc9586-539b-437d-803f-3c0408407bc1", "embedding": null, "metadata": {"page_label": "17", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "506ce9c8-3223-48aa-9aa8-580ebd80361a", "node_type": "4", "metadata": {"page_label": "17", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "6b1fb1173e2a8f9f4b494fe07ad7e78677f3644d6b2e54d5ae3c85e16b402812", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "17\n\u2022 Find the character range of a to z:\nRegex: [a-z]\n\u2022 Find a range except to z:\nRegex: [^a-z]\n\u2022 Find all the characters a to z as well as A to Z:\nRegex: [a-zA-Z]\n\u2022 Any single character:\nRegex:\n\u2022 Any whitespace character:\nRegex: \\s\n\u2022 Any non-whitespace character:\nRegex: \\S\n\u2022 Any digit:\nRegex: \\d\n\u2022 Any non-digit:\nRegex: \\D\n\u2022 Any non-words:\nRegex: \\W\n\u2022 Any words:\nRegex: \\w\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 405, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "09b4b64d-2b68-4aff-87d9-8d93b4d33ec6": {"__data__": {"id_": "09b4b64d-2b68-4aff-87d9-8d93b4d33ec6", "embedding": null, "metadata": {"page_label": "18", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "521db331-1c28-45c1-a2f8-1281bc95b45a", "node_type": "4", "metadata": {"page_label": "18", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5c1a8efb2e73e596c1f8e7cae0c74d85da50faef1861dbdd9a5af6cc7188d8e6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "18\n\u2022 Either match a or b:\nRegex: (a|b)\n\u2022 The occurrence of a is either zero or one:\n\u2022 Matches zero or one occurrence but not more than \none occurrence\nRegex: a? ; ?\n\u2022 The occurrence of a is zero times or more than that:\nRegex: a* ; * matches zero or more than that\n\u2022 The occurrence of a is one time or more than that:\nRegex: a+ ; + matches occurrences one or more that \none time\n\u2022 Exactly match three occurrences of a:\nRegex: a{3} \n\u2022 Match simultaneous occurrences of a with 3 or more \nthan 3:\nRegex: a{3,}\n\u2022 Match simultaneous occurrences of a between 3 to 6:\nRegex: a{3,6}\n\u2022 Starting of the string:\nRegex: ^\n\u2022 Ending of the string:\nRegex: $\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 673, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d7d7988c-a04b-4bf1-bd25-b34821182e3b": {"__data__": {"id_": "d7d7988c-a04b-4bf1-bd25-b34821182e3b", "embedding": null, "metadata": {"page_label": "19", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dec5d630-11c5-4b19-be9d-f3ab5e034619", "node_type": "4", "metadata": {"page_label": "19", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ac4270ac2e74f6c8ea9a1fc99b224202d05c29dd236cf7ff369569e929bc93cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "19\n\u2022 Match word boundary:\nRegex: \\b\n\u2022 Non-word boundary:\nRegex: \\B\nre.match() and re.search() functions are used to find the patterns \nand then can be processed according to the requirements of the application.\nLet\u2019s look at the differences between re.match() and re.search():\n\u2022 re.match(): This checks for a match of the string only \nat the beginning of the string. So, if it finds the pattern \nat the beginning of the input string, then it returns the \nmatched pattern; otherwise; it returns a noun.\n\u2022 re.search(): This checks for a match of the string \nanywhere in the string. It finds all the occurrences of \nthe pattern in the given input string or data.\nNow let\u2019s look at a few of the examples using these regular expressions.\n Tokenizing\nYou want to split the sentence into words\u00a0\u2013 tokenize. One of the ways to do \nthis is by using re.split.\n# Import library\nimport re\n#run the split query\nre.split('\\s+','I like this book.')\n['I', 'like', 'this', 'book.']\nFor an explanation of regex, please refer to the main recipe.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1056, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b5a9f83-9444-44be-925b-5241b9904514": {"__data__": {"id_": "5b5a9f83-9444-44be-925b-5241b9904514", "embedding": null, "metadata": {"page_label": "20", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cca06269-8c86-4187-99ca-fa98bd58fd7e", "node_type": "4", "metadata": {"page_label": "20", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5b9f614458a90acda180e434b2c0d7b701a7df1ce0df7e23275d4247831e9331", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "20\n Extracing email IDs\nThe simplest way to do this is by using re.findall.\n 1. Read/create the document or sentences\ndoc = \"For more details please mail us at: xyz@abc.com, \npqr@mno.com\"\n 2. Execute the re.findall function\naddresses = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', doc)\nfor address in addresses:\n    print(address)\n#Output\nxyz@abc.com\npqr@mno.com\n Replacing email IDs\nHere we replace email ids from the sentences or documents with another \nemail id. The simplest way to do this is by using re.sub.\n 1. Read/create the document or sentences\ndoc = \"For more details please mail us at xyz@abc.com\"\n 2. Execute the re.sub function\nnew_email_address = re.sub(r'([\\w\\.-]+)@([\\w\\.-]+)', \nr'pqr@mno.com', doc)\nprint(new_email_address)\n#Output\nFor more details please mail us at pqr@mno.com\nFor an explanation of regex, please refer to Recipe 1-6.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 873, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d704191f-ca7e-438c-9f78-48310f823240": {"__data__": {"id_": "d704191f-ca7e-438c-9f78-48310f823240", "embedding": null, "metadata": {"page_label": "21", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f165c7cb-ef86-4c48-a256-63bdee108582", "node_type": "4", "metadata": {"page_label": "21", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f4f153340496a4647fb27a65bf7c8a85b9f78c98d99ce1e01d3f39f75745d887", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "21\n Extract data from\u00a0the\u00a0ebook and\u00a0perform regex\nLet\u2019s solve this case study by using the techniques learned so far.\n 1. Extract the content from the book\n# Import library\nimport re\nimport requests\n#url you want to extract\nurl = 'https://www.gutenberg.org/files/2638/2638-0.txt'\n#function to extract\ndef get_book(url):\n # Sends a http request to get the text from project \nGutenberg\n raw = requests.get(url).text\n # Discards the metadata from the beginning of the book\n  start = re.search(r\"\\*\\*\\* START OF THIS PROJECT \nGUTENBERG EBOOK .* \\*\\*\\*\",raw ).end()\n # Discards the metadata from the end of the book\n stop = re.search(r\"II\", raw).start()\n # Keeps the relevant text\n text = raw[start:stop]\n return text\n# processing\ndef preprocess(sentence):\n return re.sub('[^A-Za-z0-9.]+' , ' ', sentence).lower()\n#calling the above function\nbook = get_book(url)\nprocessed_book = preprocess(book)\nprint(processed_book)\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 944, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c9fa5f5a-b21b-4b33-ad21-fdee5c244096": {"__data__": {"id_": "c9fa5f5a-b21b-4b33-ad21-fdee5c244096", "embedding": null, "metadata": {"page_label": "22", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "067e13a8-c43d-4bc7-ae56-9a21c6084db9", "node_type": "4", "metadata": {"page_label": "22", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "46585a339378ddae4426d345147d3e5df5a6e054525d33f9f9951a3ae32749ab", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "22\n# Output\n  produced by martin adamson david widger with \ncorrections by andrew sly the idiot by fyodor \ndostoyevsky translated by eva martin part i i. towards \nthe end of november during a thaw at nine o clock one \nmorning a train on the warsaw and petersburg railway \nwas approaching the latter city at full speed. the \nmorning was so damp and misty that it was only with \ngreat difficulty that the day succeeded in breaking \nand it was impossible to distinguish anything more \nthan a few yards away from the carriage windows. \nsome of the passengers by this particular train were \nreturning from abroad but the third class carriages \nwere the best filled chiefly with insignificant \npersons of various occupations and degrees picked up \nat the different stations nearer town. all of them \nseemed weary and most of them had sleepy eyes and a \nshivering expression while their complexions generally \nappeared to have taken on the colour of the fog \noutside. when da\n 2. Perform some exploratory data analysis on this data \nusing regex\n# Count number of times \"the\" is appeared in the book\nlen(re.findall(r'the', processed_book))\n#Output\n302\n#Replace \"i\" with \"I\"\nprocessed_book = re.sub(r'\\si\\s', \" I \", processed_book)\nprint(processed_book)\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1275, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "afc9be9a-3e9c-46dc-8a10-ce5119aee4c5": {"__data__": {"id_": "afc9be9a-3e9c-46dc-8a10-ce5119aee4c5", "embedding": null, "metadata": {"page_label": "23", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9c11804-5551-4b8c-b393-d1b5f0395f19", "node_type": "4", "metadata": {"page_label": "23", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "06ca6eb23c3b8f4bc1bf24022bacdf59418d392de68bbba1b28ae8dbd6e24475", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "23\n#output\n  produced by martin adamson david widger with \ncorrections by andrew sly the idiot by fyodor \ndostoyevsky translated by eva martin part I i. towards \nthe end of november during a thaw at nine o clock one \nmorning a train on the warsaw and petersburg railway \nwas approaching the latter city at full speed. the \nmorning was so damp and misty that it was only with \ngreat difficulty that the day succeeded in breaking \nand it was impossible to distinguish anything more \nthan a few yards away from the carriage windows. \nsome of the passengers by this particular train were \nreturning from abroad but the third class carriages \nwere the best filled chiefly with insignificant \npersons of various occupations and degrees picked up \nat the different stations nearer town. all of them \nseemed weary and most of them had sleepy eyes and a \nshivering expression while their complexions generally \nappeared to have taken on the colour of the fog \noutside. when da\n#find all occurance of text in the format \"abc--xyz\"\nre.findall(r'[a-zA-Z0-9]*--[a-zA-Z0-9]*', book)\n#output\n ['ironical--it',\n 'malicious--smile',\n 'fur--or',\n 'astrachan--overcoat',\n 'it--the',\n 'Italy--was',\n 'malady--a',\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1223, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08d7c105-3ed8-48c8-b6ed-431e902b7247": {"__data__": {"id_": "08d7c105-3ed8-48c8-b6ed-431e902b7247", "embedding": null, "metadata": {"page_label": "24", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "024849df-666b-46da-80c5-1af2417b2486", "node_type": "4", "metadata": {"page_label": "24", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5fc8437a6c9e91036336e293f83828c11e9f3dfe8c70da7b4c537c93eb1b26e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "24\n 'money--and',\n 'little--to',\n 'No--Mr',\n 'is--where',\n 'I--I',\n 'I--',\n '--though',\n 'crime--we',\n 'or--judge',\n 'gaiters--still',\n '--if',\n 'through--well',\n 'say--through',\n 'however--and',\n 'Epanchin--oh',\n 'too--at',\n 'was--and',\n 'Andreevitch--that',\n 'everyone--that',\n 'reduce--or',\n 'raise--to',\n 'listen--and',\n 'history--but',\n 'individual--one',\n 'yes--I',\n 'but--',\n 't--not',\n 'me--then',\n 'perhaps--',\n 'Yes--those',\n 'me--is',\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 476, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08d9dfa9-a52b-46ce-be1b-4a921862af16": {"__data__": {"id_": "08d9dfa9-a52b-46ce-be1b-4a921862af16", "embedding": null, "metadata": {"page_label": "25", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fda53c78-1148-481e-936d-80ff4b680ffd", "node_type": "4", "metadata": {"page_label": "25", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "bc553a00a1f34097c5a63fde93b1a096dd9128f12825408abdfeb385b32fb4a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "25\n 'servility--if',\n 'Rogojin--hereditary',\n 'citizen--who',\n 'least--goodness',\n 'memory--but',\n 'latter--since',\n 'Rogojin--hung',\n 'him--I',\n 'anything--she',\n 'old--and',\n 'you--scarecrow',\n 'certainly--certainly',\n 'father--I',\n 'Barashkoff--I',\n 'see--and',\n 'everything--Lebedeff',\n 'about--he',\n 'now--I',\n 'Lihachof--',\n 'Zaleshoff--looking',\n 'old--fifty',\n 'so--and',\n 'this--do',\n 'day--not',\n 'that--',\n 'do--by',\n 'know--my',\n 'illness--I',\n 'well--here',\n 'fellow--you']\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 517, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a29112f0-82a8-47d7-9fb9-2e9b8a4f2215": {"__data__": {"id_": "a29112f0-82a8-47d7-9fb9-2e9b8a4f2215", "embedding": null, "metadata": {"page_label": "26", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f098579b-dfd5-462d-8f4c-d9bdc7ea4374", "node_type": "4", "metadata": {"page_label": "26", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2a85f07d7c83b3fbd154cbb4bf9bfe6377e4247ac35b5b3ce72f550b95a5a19a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "26\n Recipe 1-7. Handling Strings\nIn this recipe, we are going to discuss how to handle strings and dealing \nwith text data.\nWe can do all sort of basic text explorations using string operations.\n Problem\nYou want to explore handling strings.\n Solution\nThe simplest way to do this is by using the below string functionality.\ns.find(t) index of first instance of string t inside s (-1 if not found)\ns.rfind(t) index of last instance of string t inside s (-1 if not found)\ns.index(t) like s.find(t) except it raises ValueError if not found\ns.rindex(t) like s.rfind(t) except it raises ValueError if not found\n s.join(text) combine the words of the text into a string  \nusing s as the glue\n s.split(t) split s into a list wherever a t is found  \n(whitespace by default)\ns.splitlines() split s into a list of strings, one per line\ns.lower() a lowercased version of the string s\ns.upper() an uppercased version of the string s\ns.title() a titlecased version of the string s\ns.strip() a copy of s without leading or trailing whitespace\ns.replace(t, u) replace instances of t with u inside s\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1114, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6b88a86a-bf3e-4ebb-8e64-830cee933314": {"__data__": {"id_": "6b88a86a-bf3e-4ebb-8e64-830cee933314", "embedding": null, "metadata": {"page_label": "27", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0691f2ee-29eb-472e-b1f4-c5eb24e299c7", "node_type": "4", "metadata": {"page_label": "27", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "63497a74a7f335ed6e6f64d5c0c6d307dcb80457e73d0a2159e48847116fb21d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "27\n How It Works\nNow let us look at a few of the examples.\n Replacing content\nCreate a string and replace the content. Creating Strings is easy, and it \nis done by enclosing the characters in single or double quotes. And to \nreplace, you can use the replace function.\n 1. Creating a string\nString_v1 = \"I am exploring NLP\"\n#To extract particular character or range of characters \nfrom string\nprint(String_v1[0])\n#output\n\"I\"\n#To extract exploring\nprint(String_v1[5:14])\n#output\nexploring\n 2. Replace \u201cexploring\u201d with \u201clearning\u201d in the above string\nString_v2 = String_v1.replace(\"exploring\", \"learning\")\nprint(String_v2)\n#Output\nI am learning NLP\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 675, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a4576f7e-d29f-4e0b-812b-a84ba3ea0736": {"__data__": {"id_": "a4576f7e-d29f-4e0b-812b-a84ba3ea0736", "embedding": null, "metadata": {"page_label": "28", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbd1ed40-0742-4a7d-9a18-dc2fa04dd135", "node_type": "4", "metadata": {"page_label": "28", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "7916957c1201886fb4c24c05c07b77b51ae9c16ef63e637cb5eaa2b7c0df8840", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "28\n Concatenating two strings\nHere\u2019s the simple code:\ns1 = \"nlp\"\ns2 = \"machine learning\"\ns3 = s1+s2\nprint(s3)\n#output\n'nlpmachine learning'\n Searching for\u00a0a\u00a0substring in\u00a0a\u00a0string\nUse the find function to fetch the starting index value of the substring in \nthe whole string.\nvar=\"I am learning NLP\"\nf= \"learn\"\nvar.find(f)\n#output\n5\n Recipe 1-8. Scraping Text from\u00a0the\u00a0Web\nIn this recipe, we are going to discuss how to scrape data from the web.\nCaution Before scraping any websites, blogs, or e-commerce \nwebsites, please make sure you read the terms and conditions of the \nwebsites on whether it gives permissions for data scraping.\nSo, what is web scraping, also called web harvesting or web data \nextraction?\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 741, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "85208465-f245-4074-a384-2e8a66124dac": {"__data__": {"id_": "85208465-f245-4074-a384-2e8a66124dac", "embedding": null, "metadata": {"page_label": "29", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c26aba46-f344-495e-ba3d-f5c7a78e8b47", "node_type": "4", "metadata": {"page_label": "29", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a872e7e494c4733c7218a0b75253d71a083f67dcd674067302f2bae4b687fbbd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "29\nIt is a technique to extract a large amount of data from websites and \nsave it in a database or locally. You can use this data to extract information \nrelated to your customers/users/products for the business\u2019s benefit.\nPrerequisite: Basic understanding of HTML structure.\n Problem\nYou want to extract data from the web by scraping. Here we have taken the \nexample of the IMDB website for scraping top movies.\n Solution\nThe simplest way to do this is by using beautiful soup or scrapy library \nfrom Python. Let\u2019s use beautiful soup in this recipe.\n How It Works\nLet\u2019s follow the steps in this section to extract data from the web.\n Step 8-1 Install all the\u00a0necessary libraries\n!pip install bs4\n!pip install requests\n Step 8-2 Import the\u00a0libraries\nfrom bs4 import BeautifulSoup\nimport requests\nimport pandas as pd\nfrom pandas import Series, DataFrame\nfrom ipywidgets import FloatProgress\nfrom time import sleep\nfrom IPython.display import display\nimport re\nimport pickle\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1003, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fbb69ee6-d9e3-4eed-859a-b4eaa19a677a": {"__data__": {"id_": "fbb69ee6-d9e3-4eed-859a-b4eaa19a677a", "embedding": null, "metadata": {"page_label": "30", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd090b03-7d30-4ed5-a2b3-187d23e76563", "node_type": "4", "metadata": {"page_label": "30", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "9cee26c94c591e2b7a5ea085d22ccd49e6abe6a66d4c7cecd7404ea2ab1bd311", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "30\n Step 8-3 Identify the\u00a0url to\u00a0extract the\u00a0data\nurl = 'http://www.imdb.com/chart/top?ref_=nv_mv_250_6'\n Step 8-4 Request the\u00a0url and\u00a0download the\u00a0content \nusing beautiful soup\nresult = requests.get(url)\nc = result.content\nsoup = BeautifulSoup(c,\"lxml\")\n Step 8-5 Understand the\u00a0website page structure \nto\u00a0extract the\u00a0required information\nGo to the website and right-click on the page content to inspect the html \nstructure of the website.\nIdentify the data and fields you want to extract. Say, for example, we \nwant the Movie name and IMDB rating from this page.\nSo, we will have to check under which div or class the movie names are \npresent in the HTML and parse the beautiful soup accordingly.\nIn the below example, to extract the movie name, we can parse \nour soup through <table class =\"chart full-width\"> and <td \nclass=\"titleColumn\">.\nSimilarly, we can fetch the other details. For more details, please refer \nto the code in step 8-6.\n \nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 976, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8f37534-c539-4b8e-80ed-ec64f2b6a2ae": {"__data__": {"id_": "e8f37534-c539-4b8e-80ed-ec64f2b6a2ae", "embedding": null, "metadata": {"page_label": "31", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af49f4ca-efdd-4780-b2e8-5c5ccf00ec05", "node_type": "4", "metadata": {"page_label": "31", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "58e42faaf9d95bb579c59d71b8a45fd52ce573788b0400c33fe6acd7de3d91bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "31\n Step 8-6 Use beautiful soup to\u00a0extract and\u00a0parse \nthe\u00a0data from\u00a0HTML tags\nsummary = soup.find('div',{'class':'article'})\n# Create empty lists to append the extracted data.\nmoviename = []\ncast = []\ndescription = []\nrating = []\nratingoutof = []\nyear = []\ngenre = []\nmovielength = []\nrot_audscore = []\nrot_avgrating = []\nrot_users = []\n# Extracting the required data from the html soup.\nrgx = re.compile('[%s]' % '()')\nf = FloatProgress(min=0, max=250)\ndisplay(f)\nfor row,i in zip(summary.find('table').\nfindAll('tr'),range(len(summary.find('table').findAll('tr')))):\n    for sitem in row.findAll('span',{'class':'secondaryInfo'}):\n        s = sitem.find(text=True)\n        year.append(rgx.sub(\", s))\n     for ritem in row.findAll('td',{'class':'ratingColumn \nimdbRating'}):\n        for iget in ritem.findAll('strong'):\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 851, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "940ccba2-0ac8-4228-85db-dc2b585644a3": {"__data__": {"id_": "940ccba2-0ac8-4228-85db-dc2b585644a3", "embedding": null, "metadata": {"page_label": "32", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9c3ba92a-3cb0-4d13-9f75-3d6300543746", "node_type": "4", "metadata": {"page_label": "32", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e4755a094ed4262d308b431f8cc1d07085fee2d93a9adea3ba8a49fdca34d07e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "32\n            rating.append(iget.find(text=True))\n            ratingoutof.append(iget.get('title').split(' ', 4)[3])\n    for item in row.findAll('td',{'class':'titleColumn'}):\n        for href in item.findAll('a',href=True):\n            moviename.append(href.find(text=True))\n             rurl = 'https://www.rottentomatoes.com/m/'+ href.\nfind(text=True)\n            try:\n                rresult = requests.get(rurl)\n            except requests.exceptions.ConnectionError:\n                status_code = \"Connection refused\"\n            rc = rresult.content\n            rsoup = BeautifulSoup(rc)\n            try:\n                 rot_audscore.append(rsoup.find('div', \n{'class':'meter-value'}).find('span', \n{'class':'superPageFontColor'}).text)\n                 rot_avgrating.append(rsoup.find('div', \n{'class':'audience-info hidden-xs \nsuperPageFontColor'}).find('div').contents[2].\nstrip())\n                 rot_users.append(rsoup.find('div', \n{'class':'audience-info hidden-xs \nsuperPageFontColor'}).contents[3].contents[2].\nstrip())\n            except AttributeError:\n                rot_audscore.append(\"\")\n                rot_avgrating.append(\"\")\n                rot_users.append(\"\")\n            cast.append(href.get('title'))\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1264, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9f95594d-e27f-4304-95ca-7d30957ad42d": {"__data__": {"id_": "9f95594d-e27f-4304-95ca-7d30957ad42d", "embedding": null, "metadata": {"page_label": "33", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7b405d4-df5c-49b0-989d-496fa7546953", "node_type": "4", "metadata": {"page_label": "33", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d5358d5b54095e19a708a0ade04683d6d764b1265a5166f354d42a04b409a0bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "33\n            imdb = \"http://www.imdb.com\" + href.get('href')\n            try:\n                iresult = requests.get(imdb)\n                ic = iresult.content\n                isoup = BeautifulSoup(ic)\n                 description.append(isoup.find('div', \n{'class':'summary_text'}).find(text=True).strip())\n                 genre.append(isoup.find('span',{'class':'itempr\nop'}).find(text=True))\n                 movielength.append(isoup.find('time', \n{'itemprop':'duration'}).find(text=True).strip())\n            except requests.exceptions.ConnectionError:\n                description.append(\"\")\n                genre.append(\"\")\n                movielength.append(\"\")\n    sleep(.1)\n    f.value = i\nNote that there is a high chance that you might encounter an error \nwhile executing the above script because of the following reasons:\n\u2022 Your request to the URL has failed, so maybe you need \nto try again after some time. This is common in web \nscraping.\n\u2022 Web pages are dynamic. The HTML tags of websites \nkeep changing. Understand the tags and make small \nchanges in the code in accordance with HTML, and \nyou are good to go.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1159, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a3661a77-0c63-4350-8e75-9bd5568bfe37": {"__data__": {"id_": "a3661a77-0c63-4350-8e75-9bd5568bfe37", "embedding": null, "metadata": {"page_label": "34", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "00deea5d-d926-41db-a9c2-029e0d7698e4", "node_type": "4", "metadata": {"page_label": "34", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "44fa183daf41cc89e15db7181fbb9facd122977a618c85dba1bee931435419ee", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "34\n Step 8-7 Convert lists to\u00a0data frame and\u00a0you\u00a0can \nperform the\u00a0analysis that meets the\u00a0business \nrequirements\n# List to pandas series\nmoviename = Series(moviename)\ncast = Series(cast)\ndescription = Series(description)\nrating = Series(rating)\nratingoutof = Series(ratingoutof)\nyear = Series(year)\ngenre = Series(genre)\nmovielength = Series(movielength)\nrot_audscore = Series(rot_audscore)\nrot_avgrating = Series(rot_avgrating)\nrot_users = Series(rot_users)\n# creating dataframe and doing analysis\nimdb_df =  pd.concat([moviename,year,description,genre, \nmovielength,cast,rating,ratingoutof, \nrot_audscore,rot_avgrating,rot_users],axis=1)\nimdb_df.columns = [ 'moviename','year','description','genre', \n'movielength','cast','imdb_rating', \n'imdb_ratingbasedon','tomatoes_audscore', \n'tomatoes_rating','tomatoes_ratingbasedon']\nimdb_df['rank'] = imdb_df.index + 1\nimdb_df.head(1)\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 909, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2057cd90-07d6-4774-988d-32a2fd09ffbf": {"__data__": {"id_": "2057cd90-07d6-4774-988d-32a2fd09ffbf", "embedding": null, "metadata": {"page_label": "35", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "def17cd7-5e01-49b0-bcce-b1986be4bf8c", "node_type": "4", "metadata": {"page_label": "35", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b677d98f1336d7b65b586350d4c0227bd3d27d6b1df1e8fe378c049d0de15e3d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "35\n#output\n \n Step 8-8 Download the\u00a0data frame\n# Saving the file as CSV.\nimdb_df.to_csv(\"imdbdataexport.csv\")\nWe have implemented most of the ways and techniques to extract text \ndata from possible sources. In the coming chapters, we will look at how to \nexplore, process, and clean this data, followed by feature engineering and \nbuilding NLP applications.\nChAPtEr 1  ExtrACting thE\u00a0DAtA", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 388, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "855a2c95-b507-4543-9bb1-3dedc0ee8801": {"__data__": {"id_": "855a2c95-b507-4543-9bb1-3dedc0ee8801", "embedding": null, "metadata": {"page_label": "37", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "698a8a74-e54a-432a-9149-3ae9f87b9562", "node_type": "4", "metadata": {"page_label": "37", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "0f829c5656c9db11e631432cf8c51a6335633d5ceaddeaab12f97846b20cba74", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "37\u00a9 Akshay Kulkarni and Adarsha Shivananda 2019 \nA. Kulkarni and A. Shivananda, Natural Language Processing Recipes,  \nhttps://doi.org/10.1007/978-1-4842-4267-4_2\nCHAPTER 2\nExploring and  \nProcessing Text Data\nIn this chapter, we are going to cover various methods and techniques to \npreprocess the text data along with exploratory data analysis.\nWe are going to discuss the following recipes under text preprocessing \nand exploratory data analysis.\nRecipe 1. Lowercasing\nRecipe 2. Punctuation removal\nRecipe 3. Stop words removal\nRecipe 4. Text standardization\nRecipe 5. Spelling correction\nRecipe 6. Tokenization\nRecipe 7. Stemming\nRecipe 8. Lemmatization\nRecipe 9. Exploratory data analysis\nRecipe 10. End-to-end processing pipeline", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 735, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "03db3124-915d-4811-b376-bcdd8120b68a": {"__data__": {"id_": "03db3124-915d-4811-b376-bcdd8120b68a", "embedding": null, "metadata": {"page_label": "38", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7c2fec44-3bfd-4272-aa88-fda2a7302ee6", "node_type": "4", "metadata": {"page_label": "38", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f49ead79b3ff2049d3cd493708a71f6083c00e6c83dbb12d1681f06be5677134", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "38\nBefore directly jumping into the recipes, let us first understand the \nneed for preprocessing the text data. As we all know, around 90% of the \nworld\u2019s data is unstructured and may be present in the form of an image, \ntext, audio, and video. Text can come in a variety of forms from a list \nof individual words, to sentences to multiple paragraphs with special \ncharacters (like tweets and other punctuations). It also may be present \nin the form of web, HTML, documents, etc. And this data is never clean \nand consists of a lot of noise. It needs to be treated and then perform a \nfew of the preprocessing functions to make sure we have the right input \ndata for the feature engineering and model building. Suppose if we don\u2019t \npreprocess the data, any algorithms that are built on top of such data will \nnot add any value for the business. This reminds me of a very popular \nphrase in the Data Science world \u201cGarbage in\u00a0\u2013 Garbage out. \u201d\nPreprocessing involves transforming raw text data into an \nunderstandable format. Real-world data is very often incomplete, \ninconsistent, and filled with a lot of noise and is likely to contain many \nerrors. Preprocessing is a proven method of resolving such issues. Data \npreprocessing prepares raw text data for further processing.\n Recipe 2-1. Converting Text Data \nto\u00a0Lowercase\nIn this recipe, we are going to discuss how to lowercase the text data in \norder to have all the data in a uniform format and to make sure \u201cNLP\u201d and \n\u201cnlp\u201d are treated as the same.\n Problem\nHow to lowercase the text data?\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1592, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc2d8b98-fcda-4075-bb25-a853582c4489": {"__data__": {"id_": "dc2d8b98-fcda-4075-bb25-a853582c4489", "embedding": null, "metadata": {"page_label": "39", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b9b21ca3-b8b6-4f7d-a5ae-2171d2af6874", "node_type": "4", "metadata": {"page_label": "39", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2df5025863d3babff8eec9205c55dfa7be5983d3b4cc87312671247a31559f58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "39\n Solution\nThe simplest way to do this is by using the default lower() function in \nPython.\nThe lower() method converts all uppercase characters in a string into \nlowercase characters and returns them.\n How It Works\nLet\u2019s follow the steps in this section to lowercase a given text or document. \nHere, we are going to use Python.\n Step 1-1 Read/create the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable.\ntext=['This is introduction to NLP','It is likely to be useful, \nto people ','Machine learning is the new electrcity','There \nwould be less hype around AI and more action going \nforward','python is the best tool!','R is good langauage','I \nlike this book','I want more books like this']\n#convert list to data frame\nimport pandas as pd\ndf = pd.DataFrame({'tweet':text})\nprint(df)\n#output\n                                               tweet\n0                        This is introduction to NLP\n1              It is likely to be useful, to people\n2             Machine learning is the new electrcity\n3  There would be less hype around AI and more ac...\n4                           python is the best tool!\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1176, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2da9a5a2-128a-4336-8814-f31d9964a410": {"__data__": {"id_": "2da9a5a2-128a-4336-8814-f31d9964a410", "embedding": null, "metadata": {"page_label": "40", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26b94b5b-d3b4-4256-9940-78d4d0046a7e", "node_type": "4", "metadata": {"page_label": "40", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a4de9a1d7845d366d2d0a0a991b0ff749ace91163a603f18239e5ee3d97c4e36", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "40\n5                                R is good langauage\n6                                   I like this book\n7                        I want more books like this\n Step 1-2 Execute lower() function on\u00a0the\u00a0text data\nWhen there is just the string, apply the lower() function directly as shown \nbelow:\nx = 'Testing'\nx2 = x.lower()\nprint(x2)\n#output\n'testing'\nWhen you want to perform lowercasing on a data frame, use the apply \na function as shown below:\ndf['tweet'] = df['tweet'].apply(lambda x: \" \".join(x.lower() \nfor x in x.split()))\ndf['tweet']\n#output\n0                          this is introduction to nlp\n1                 it is likely to be useful, to people\n2               machine learning is the new electrcity\n3    there would be less hype around ai and more ac...\n4                             python is the best tool!\n5                                  r is good langauage\n6                                     i like this book\n7                          i want more books like this\nThat\u2019s all. We have converted the whole tweet column into lowercase. \nLet\u2019s see what else we can do in the next recipes.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1160, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cbf9b61a-dbb4-45c0-bef4-f1b0140479e5": {"__data__": {"id_": "cbf9b61a-dbb4-45c0-bef4-f1b0140479e5", "embedding": null, "metadata": {"page_label": "41", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6251bbd6-6e3b-43a7-b707-a007793c7b03", "node_type": "4", "metadata": {"page_label": "41", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2a997e6e85a91b327596cd4d2dc896c5cccbe14edaf1ea0e2026e85e1c19238f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "41\n Recipe 2-2. Removing Punctuation\nIn this recipe, we are going to discuss how to remove punctuation from the \ntext data. This step is very important as punctuation doesn\u2019t add any extra \ninformation or value. Hence removal of all such instances will help reduce \nthe size of the data and increase computational efficiency.\n Problem\nYou want to remove punctuation from the text data.\n Solution\nThe simplest way to do this is by using the regex and replace() function in \nPython.\n How It Works\nLet\u2019s follow the steps in this section to remove punctuation from the text data.\n Step 2-1 Read/create the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable.\ntext=['This is introduction to NLP','It is likely to be useful, \nto people ','Machine learning is the new electrcity', \n'There would be less hype around AI and more action going \nforward','python is the best tool!','R is good langauage', \n'I like this book','I want more books like this']\n#convert list to dataframe\nimport pandas as pd\ndf = pd.DataFrame({'tweet':text})\nprint(df)\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1097, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8aa74b0-759a-427a-befa-07e993109b4e": {"__data__": {"id_": "d8aa74b0-759a-427a-befa-07e993109b4e", "embedding": null, "metadata": {"page_label": "42", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6f372d4a-f16c-4429-95a6-2ade8d9e2aa9", "node_type": "4", "metadata": {"page_label": "42", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3824fd3074b87f2db1b41f4a8d59722af623fee3b253f3b63192d9b1cad8a1e0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "42\n#output\n tweet\n0 This is introduction to NLP\n1 It is likely to be useful, to people\n2 Machine learning is the new electrcity\n3 There would be less hype around AI and more ac...\n4 python is the best tool!\n5 R is good langauage\n6 I like this book\n7 I want more books like this\n Step 2-2 Execute below function on\u00a0the\u00a0text data\nUsing the regex and replace() function, we can remove the punctuation \nas shown below:\nimport re\ns = \"I. like. This book!\"\ns1 = re.sub(r'[^\\w\\s]',\",s)\ns1\n#output\n'I like This book'\nOr:\ndf['tweet'] = df['tweet'].str.replace('[^\\w\\s]',\")\ndf['tweet']\n#output\n0                          this is introduction to nlp\n1                  it is likely to be useful to people\n2               machine learning is the new electrcity\n3    there would be less hype around ai and more ac...\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 849, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "645cfe3d-6f3f-4740-8d2a-4f1068307565": {"__data__": {"id_": "645cfe3d-6f3f-4740-8d2a-4f1068307565", "embedding": null, "metadata": {"page_label": "43", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9b72c592-4396-4cd0-ad52-f786bcd31984", "node_type": "4", "metadata": {"page_label": "43", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "6ff3e9a71a99e913b203b4260121e2c06635f9783a2407e456d019b1f0d0a54a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "43\n4                              python is the best tool\n5                                  r is good langauage\n6                                     i like this book\n7                          i want more books like this\nOr:\nimport string\ns = \"I. like. This book!\"\nfor c in string.punctuation:\n      s= s.replace(c,\"\")\ns\n#output\n'I like This book'\n Recipe 2-3. Removing Stop Words\nIn this recipe, we are going to discuss how to remove stop words. Stop words \nare very common words that carry no meaning or less meaning compared \nto other keywords. If we remove the words that are less commonly used, \nwe can focus on the important keywords instead. Say, for example, in the \ncontext of a search engine, if your search query is \u201cHow to develop chatbot \nusing python, \u201d if the search engine tries to find web pages that contained the \nterms \u201chow, \u201d \u201cto, \u201d \u201cdevelop, \u201d \u201cchatbot, \u201d \u201cusing, \u201d \u201cpython, \u201d the search engine \nis going to find a lot more pages that contain the terms \u201chow\u201d and \u201cto\u201d than \npages that contain information about developing chatbot because the terms \n\u201chow\u201d and \u201cto\u201d are so commonly used in the English language. So, if we \nremove such terms, the search engine can actually focus on retrieving pages \nthat contain the keywords: \u201cdevelop, \u201d \u201cchatbot, \u201d \u201cpython\u201d\u00a0\u2013 which would \nmore closely bring up pages that are of real interest. Similarly we can remove \nmore common words and rare words as well.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1464, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "00d0a91e-4e99-4e40-9ff2-91c54c818379": {"__data__": {"id_": "00d0a91e-4e99-4e40-9ff2-91c54c818379", "embedding": null, "metadata": {"page_label": "44", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d05e3670-f9a1-434a-adb3-6bd0cb48366a", "node_type": "4", "metadata": {"page_label": "44", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "499967043e9a26f2cd430f69e98a50102cc94a954860cc54ff7281ce3d82759c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "44\n Problem\nYou want to remove stop words.\n Solution\nThe simplest way to do this by using the NLTK library, or you can build \nyour own stop words file.\n How It Works\nLet\u2019s follow the steps in this section to remove stop words from the text data.\n Step 3-1 Read/create the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable.\ntext=['This is introduction to NLP','It is likely to be useful,  \nto people ','Machine learning is the new electrcity', \n'There would be less hype around AI and more action going \nforward','python is the best tool!','R is good langauage','I like \nthis book','I want more books like this']\n#convert list to data frame\nimport pandas as pd\ndf = pd.DataFrame({'tweet':text})\nprint(df)\n#output\n tweet\n0 This is introduction to NLP\n1 It is likely to be useful, to people\n2 Machine learning is the new electrcity\n3 There would be less hype around AI and more ac...\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 945, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2f87141a-7de3-47c1-a7d2-48342fc2dffc": {"__data__": {"id_": "2f87141a-7de3-47c1-a7d2-48342fc2dffc", "embedding": null, "metadata": {"page_label": "45", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d73c636b-772d-4fbd-85ed-4d0e20c12e2b", "node_type": "4", "metadata": {"page_label": "45", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "fb7be36ba805b3bb08d7afdfe7c331477430b6c40e5c7882b23b358fa0e7afe9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "45\n4 python is the best tool!\n5 R is good langauage\n6 I like this book\n7 I want more books like this\n Step 3-2 Execute below commands on\u00a0the\u00a0text data\nUsing the NLTK library, we can remove the punctuation as shown below.\n#install and import libraries\n!pip install nltk\nimport nltk\nnltk.download()\nfrom nltk.corpus import stopwords\n#remove stop words\nstop = stopwords.words('english')\ndf['tweet'] =  df['tweet'].apply(lambda x: \"  \n\".join(x for x in x.split() if x not in stop))\ndf['tweet']\n#output\n0                                  introduction nlp\n1                              likely useful people\n2                   machine learning new electrcity\n3    would less hype around ai action going forward\n4                                  python best tool\n5                                  r good langauage\n6                                         like book\n7                                   want books like\nThere are no stop words now. Everything has been removed in this step.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1030, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b15fb7e8-18b9-42ae-8ccc-c3dab29362cb": {"__data__": {"id_": "b15fb7e8-18b9-42ae-8ccc-c3dab29362cb", "embedding": null, "metadata": {"page_label": "46", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3eeee39b-136d-4c42-a651-b62e6f6676c8", "node_type": "4", "metadata": {"page_label": "46", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "9d1c3c6a08799a1a5962d946200662eeebfe49b9db907d239e19865b1d8a3295", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "46\n Recipe 2-4. Standardizing Text\nIn this recipe, we are going to discuss how to standardize the text. But before \nthat, let\u2019s understand what is text standardization and why we need to do it. \nMost of the text data is in the form of either customer reviews, blogs, or tweets, \nwhere there is a high chance of people using short words and abbreviations to \nrepresent the same meaning. This may help the downstream process to easily \nunderstand and resolve the semantics of the text.\n Problem\nYou want to standardize text.\n Solution\nWe can write our own custom dictionary to look for short words and \nabbreviations.\n How It Works\nLet\u2019s follow the steps in this section to perform text standardization.\n Step 4-1 Create a\u00a0custom lookup dictionary\nThe dictionary will be for text standardization based on your data.\nlookup_dict = {'nlp':'natural language processing', \n'ur':'your', \"wbu\" : \"what about you\"}\nimport re\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 961, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "91fef4b7-d2f1-4535-b9ab-92b09e065565": {"__data__": {"id_": "91fef4b7-d2f1-4535-b9ab-92b09e065565", "embedding": null, "metadata": {"page_label": "47", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e2be1430-634a-44a7-bb14-97c3ae93224d", "node_type": "4", "metadata": {"page_label": "47", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f0d77c747f236acfdf82aa97f0b7a1d57789627cf5dac88c6bd5359753aaa326", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "47\n Step 4-2 Create a\u00a0custom function for\u00a0text \nstandardization\nHere is the code:\ndef text_std(input_text):\n words = input_text.split()\n new_words = []\n for word in words:\n     word = re.sub(r'[^\\w\\s]',\",word)\n     if word.lower() in lookup_dict:\n         word = lookup_dict[word.lower()]\n         new_words.append(word)\n         new_text = \" \".join(new_words)\n return new_text\n Step 4-3 Run the\u00a0text_std function\nWe also need to check the output:\ntext_std(\"I like nlp it's ur choice\")\n#output\n'natural language processing your'\nHere, nlp has standardised to 'natural language processing' and \nur to 'your'.\n Recipe 2-5. Correcting Spelling\nIn this recipe, we are going to discuss how to do spelling correction. But \nbefore that, let\u2019s understand why this spelling correction is important. \nMost of the text data is in the form of either customer reviews, blogs, or \ntweets, where there is a high chance of people using short words and \nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 982, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e25340cf-9b19-4e4a-ab49-6035da8d1837": {"__data__": {"id_": "e25340cf-9b19-4e4a-ab49-6035da8d1837", "embedding": null, "metadata": {"page_label": "48", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06674421-1035-4740-9bfe-70909ee32b22", "node_type": "4", "metadata": {"page_label": "48", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ca0e79d140613e8eab378c74ceff6107e8d4d6b4b48e782280a3dc515f14d9e7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "48\nmaking typo errors. This will help us in reducing multiple copies of words, \nwhich represents the same meaning. For example, \u201cproccessing\u201d and \n\u201cprocessing\u201d will be treated as different words even if they are used in the \nsame sense.\nNote that abbreviations should be handled before this step, or else \nthe corrector would fail at times. Say, for example, \u201cur\u201d (actually means \n\u201cyour\u201d) would be corrected to \u201cor. \u201d\n Problem\nYou want to do spelling correction.\n Solution\nThe simplest way to do this by using the TextBlob library.\n How It Works\nLet\u2019s follow the steps in this section to do spelling correction.\n Step 5-1 Read/create the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable.\ntext=['Introduction to NLP','It is likely to be useful, to \npeople ','Machine learning is the new electrcity', 'R is good \nlangauage','I like this book','I want more books like this']\n#convert list to dataframe\nimport pandas as pd\ndf = pd.DataFrame({'tweet':text})\nprint(df)\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1028, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "41d58da0-6afc-4b35-99b7-3cbd19d30c15": {"__data__": {"id_": "41d58da0-6afc-4b35-99b7-3cbd19d30c15", "embedding": null, "metadata": {"page_label": "49", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c99639c6-395f-4bc0-88d2-e727ce4c8e7d", "node_type": "4", "metadata": {"page_label": "49", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a83c3b9f6c9ffaacfff1810b74d052d47ed852d0d70d2637d3f99dc95434e733", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "49\n#output\n                                    tweet\n0                     Introduction to NLP\n1   It is likely to be useful, to people\n2  Machine learning is the new electrcity\n3                     R is good langauage\n4                        I like this book\n5             I want more books like this\n Step 5-2 Execute below code on\u00a0the\u00a0text data\nUsing TextBlob, we can do spelling correction as shown below:\n#Install textblob library\n!pip install textblob\n#import libraries and use 'correct' function\nfrom textblob import TextBlob\ndf['tweet'].apply(lambda x: str(TextBlob(x).correct()))\n#output\n0                        Introduction to NLP\n1      It is likely to be useful, to people\n2    Machine learning is the new electricity\n3                         R is good language\n4                           I like this book\n5                I want more books like this\nIf you clearly observe this, it corrected the spelling of electricity and \nlanguage.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 998, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bff72761-6026-4db9-9de6-0fe9ee764ff4": {"__data__": {"id_": "bff72761-6026-4db9-9de6-0fe9ee764ff4", "embedding": null, "metadata": {"page_label": "50", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26d5cd0a-1915-4f5d-9ee7-ba2d6b280851", "node_type": "4", "metadata": {"page_label": "50", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "bcc5ca806214ee6cc9310371bc3ce4be7665e2cff93f6a9a281152cd80cbd231", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "50\n#You can also use autocorrect library as shown below\n#install autocorrect\n!pip install autocorrect\nfrom autocorrect import spell\nprint(spell(u'mussage'))\nprint(spell(u'sirvice'))\n#output\n'message'\n'service'\n Recipe 2-6. Tokenizing Text\nIn this recipe, we would look at the ways to tokenize. Tokenization refers to \nsplitting text into minimal meaningful units. There is a sentence tokenizer \nand word tokenizer. We will see a word tokenizer in this recipe, which is \na mandatory step in text preprocessing for any kind of analysis. There are \nmany libraries to perform tokenization like NLTK, SpaCy, and TextBlob. \nHere are a few ways to achieve it.\n Problem\nYou want to do tokenization.\n Solution\nThe simplest way to do this is by using the TextBlob library.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 808, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f9a440e3-f5f7-47a2-94b2-6df0420f7e63": {"__data__": {"id_": "f9a440e3-f5f7-47a2-94b2-6df0420f7e63", "embedding": null, "metadata": {"page_label": "51", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c902ec95-2102-4fde-a931-f696aaa59f4f", "node_type": "4", "metadata": {"page_label": "51", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "435cd551780ee11fd9b2db57baa7f2beb4d7e8fd6d0e517e1821dc308d3a86c8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "51\n How It Works\nLet\u2019s follow the steps in this section to perform tokenization.\n Step 6-1 Read/create the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable.\ntext=['This is introduction to NLP','It is likely to be useful,  \nto people ','Machine learning is the new electrcity', \n'There would be less hype around AI and more action going  \nforward','python is the best tool!','R is good langauage', \n'I like this book','I want more books like this']\n#convert list to dataframe\nimport pandas as pd\ndf = pd.DataFrame({'tweet':text})\nprint(df)\n#output\n tweet\n0 This is introduction to NLP\n1 It is likely to be useful, to people\n2 Machine learning is the new electrcity\n3 There would be less hype around AI and more ac...\n4 python is the best tool!\n5 R is good langauage\n6 I like this book\n7 I want more books like this\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 879, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "78eab3b9-7f8f-4582-8709-90509c0006c4": {"__data__": {"id_": "78eab3b9-7f8f-4582-8709-90509c0006c4", "embedding": null, "metadata": {"page_label": "52", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "64ae019f-daf8-4e3c-9190-3156a73afbf7", "node_type": "4", "metadata": {"page_label": "52", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b2088e4ea272ac48ce00d88c8bd68a8b00188e6e1c746c8a2eaa0463d8b91109", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "52\n Step 6-2 Execute below code on\u00a0the\u00a0text data\nThe result of tokenization is a list of tokens:\n#Using textblob\nfrom textblob import TextBlob\nTextBlob(df['tweet'][3]).words\n#output\nWordList(['would', 'less', 'hype', 'around', 'ai', 'action', \n'going', 'forward'])\n#using NLTK\nimport nltk\n#create data\nmystring = \"My favorite animal is cat\"\nnltk.word_tokenize(mystring)\n#output\n['My', 'favorite', 'animal', 'is', 'cat']\n#using split function from python\nmystring.split()\n#output\n['My', 'favorite', 'animal', 'is', 'cat']\n Recipe 2-7. Stemming\nIn this recipe, we will discuss stemming. Stemming is a process of \nextracting a root word. For example, \u201cfish, \u201d \u201cfishes, \u201d and \u201cfishing\u201d are \nstemmed into fish.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 751, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7ca19936-db15-4602-8f0d-9cf3a5f91e61": {"__data__": {"id_": "7ca19936-db15-4602-8f0d-9cf3a5f91e61", "embedding": null, "metadata": {"page_label": "53", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "190e7c32-5bb6-4779-bc87-1d189cefd086", "node_type": "4", "metadata": {"page_label": "53", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5f8c85826888cb35bfd809bc153175828d1c9b166e95dc78130b8bc92b619f9f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "53\n Problem\nYou want to do stemming.\n Solution\nThe simplest way to do this by using NLTK or a TextBlob library.\n How It Works\nLet\u2019s follow the steps in this section to perform stemming.\n Step 7-1 Read the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable.\ntext=['I like fishing','I eat fish','There are many fishes in pound']\n#convert list to dataframe\nimport pandas as pd\ndf = pd.DataFrame({'tweet':text})\nprint(df)\n#output\n                            tweet\n0                  I like fishing\n1                      I eat fish\n2  There are many fishes in pound\n Step 7-2 Stemming the\u00a0text\nExecute the below code on the text data:\n#Import library\nfrom nltk.stem import PorterStemmer\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 746, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d5de7b7c-0215-4fcd-a7ce-59796e80b3f1": {"__data__": {"id_": "d5de7b7c-0215-4fcd-a7ce-59796e80b3f1", "embedding": null, "metadata": {"page_label": "54", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "041a159b-c2b8-4b32-aea2-dc5d653bda0b", "node_type": "4", "metadata": {"page_label": "54", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a3559cec28f7dd1d9716b08227d72d69c633067b5380faa7d992c1e36bc62b78", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "54\nst = PorterStemmer()\ndf['tweet'][:5].apply(lambda x: \" \".join([st.stem(word) for \nword in x.split()]))\n#output\n0                     I like fish\n1                      I eat fish\n2    there are mani fish in pound\nIf you observe this, you will notice that fish, fishing, and fishes have \nbeen stemmed to fish.\n Recipe 2-8. Lemmatizing\nIn this recipe, we will discuss lemmatization. Lemmatization is a process of \nextracting a root word by considering the vocabulary. For example, \u201cgood, \u201d \n\u201cbetter, \u201d or \u201cbest\u201d is lemmatized into good.\nThe part of speech of a word is determined in lemmatization. It will \nreturn the dictionary form of a word, which must be a valid word while \nstemming just extracts the root word.\n\u2022 Lemmatization handles matching \u201ccar\u201d to \u201ccars\u201d along \nwith matching \u201ccar\u201d to \u201cautomobile. \u201d\n\u2022 Stemming handles matching \u201ccar\u201d to \u201ccars. \u201d\nLemmatization can get better results.\n\u2022 The stemmed form of leafs is leaf.\n\u2022 The stemmed form of leaves is leav.\n\u2022 The lemmatized form of leafs is leaf.\n\u2022 The lemmatized form of leaves is leaf.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1097, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ab0b87af-8643-4801-a077-c8cea679e029": {"__data__": {"id_": "ab0b87af-8643-4801-a077-c8cea679e029", "embedding": null, "metadata": {"page_label": "55", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d2e539f-50e8-45c1-906c-d4eecfea7873", "node_type": "4", "metadata": {"page_label": "55", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5f2e9d82de27a182683dcbf3d4c45524cf7bf8a218278d4fd96f1103cf0807cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "55\n Problem\nYou want to perform lemmatization.\n Solution\nThe simplest way to do this is by using NLTK or the TextBlob library.\n How It Works\nLet\u2019s follow the steps in this section to perform lemmatization.\n Step 8-1 Read the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable.\ntext=['I like fishing','I eat fish','There are many fishes in \npound', 'leaves and leaf']\n#convert list to dataframe\nimport pandas as pd\ndf = pd.DataFrame({'tweet':text})\nprint(df)\n                                tweet\n0                      I like fishing\n1                          I eat fish\n2  There are multiple fishes in pound\n3                     leaves and leaf\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 711, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b23c88dd-d743-4232-9bb3-d57f8db10c97": {"__data__": {"id_": "b23c88dd-d743-4232-9bb3-d57f8db10c97", "embedding": null, "metadata": {"page_label": "56", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "23d8fa53-baee-4bac-a42b-f5ca7fa81c57", "node_type": "4", "metadata": {"page_label": "56", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "fbcaae0674aed317c6a0187d3b5c2f5d9e4d5f7786f940b861731e42da553cc1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "56\n Step 8-2 Lemmatizing the\u00a0data\nExecute the below code on the text data:\n#Import library\nfrom textblob import Word\n#Code for lemmatize\ndf['tweet'] = df['tweet'].apply(lambda x: \" \".join([Word(word).\nlemmatize() for word in x.split()]))\ndf['tweet']\n#output\n0                      I like fishing\n1                          I eat fish\n2    There are multiple fish in pound\n3                       leaf and leaf\nYou can observe that fish and fishes are lemmatized to fish and, as \nexplained, leaves and leaf are lemmatized to leaf.\n Recipe 2-9. Exploring Text Data\nSo far, we are comfortable with data collection and text preprocessing. Let \nus perform some exploratory data analysis.\n Problem\nYou want to explore and understand the text data.\n Solution\nThe simplest way to do this by using NLTK or the TextBlob library.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 864, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3d845e31-d100-45d5-bc06-78cf4dd8b6a4": {"__data__": {"id_": "3d845e31-d100-45d5-bc06-78cf4dd8b6a4", "embedding": null, "metadata": {"page_label": "57", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "39cda3ca-0d0c-4a30-a16d-cee5f34625d4", "node_type": "4", "metadata": {"page_label": "57", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "12272c9c0c9e2f4c7e4584d1945efae9b7ba226d3ea009a563105914887cd83a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "57\n How It Works\nLet\u2019s follow the steps in this process.\n Step 9-1 Read the\u00a0text data\nExecute the below code to download the dataset, if you haven\u2019t already \ndone so:\nnltk.download().\n#Importing data\nimport nltk\nfrom nltk.corpus import webtext\nnltk.download('webtext')\nwt_sentences = webtext.sents('firefox.txt')\nwt_words = webtext.words('firefox.txt')\n Step 9-2 Import necessary libraries\nImport Library for computing frequency:\nfrom nltk.probability import FreqDist\nfrom nltk.corpus import stopwords\nimport string\n Step 9-3 Check number of\u00a0words in\u00a0the\u00a0data\nCount the number of words:\nlen(wt_sentences)\n#output\n1142\nlen(wt_words)\n#output\n102457\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 692, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "92b46045-c548-423c-9589-afd91ca103ac": {"__data__": {"id_": "92b46045-c548-423c-9589-afd91ca103ac", "embedding": null, "metadata": {"page_label": "58", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f5dac9a-ad3f-4db3-967c-17cf4e7a01e3", "node_type": "4", "metadata": {"page_label": "58", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "795fb3cfd9fe050e43fb8693ca940d6a1db7d34a1596cf938257aaa7c3f5eef6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "58\n Step 9-4 Compute the\u00a0frequency of\u00a0all words \nin\u00a0the\u00a0reviews\nGenerating frequency for all the words:\nfrequency_dist = nltk.FreqDist(wt_words)\nfrequency_dist\n#showing only top few results\nFreqDist({'slowing': 1,\n          'warnings': 6,\n          'rule': 1,\n          'Top': 2,\n          'XBL': 12,\n          'installation': 44,\n          'Networking': 1,\n          'inccorrect': 1,\n          'killed': 3,\n          ']\"': 1,\n          'LOCKS': 1,\n          'limited': 2,\n          'cookies': 57,\n          'method': 12,\n          'arbitrary': 2,\n          'b': 3,\n          'titlebar': 6,\nsorted_frequency_dist =sorted(frequency_dist,key=frequency_\ndist.__getitem__, reverse=True)\nsorted_frequency_dist\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 750, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2561eee0-bf27-4ad5-9b88-ef4e5871358e": {"__data__": {"id_": "2561eee0-bf27-4ad5-9b88-ef4e5871358e", "embedding": null, "metadata": {"page_label": "59", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "467857c1-e23a-428c-81e2-b58354c2e31e", "node_type": "4", "metadata": {"page_label": "59", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e89a1f7da1bf08be54d4bd9ae81a698249bfc0fff618df625d58465d81ed3d62", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "59\n['.',\n 'in',\n 'to',\n '\"',\n 'the',\n \"'\",\n 'not',\n '-',\n 'when',\n 'on',\n 'a',\n 'is',\n 't',\n 'and',\n 'of',\n Step 9-5 Consider words with\u00a0length greater than\u00a03 \nand\u00a0plot\nLet\u2019s take the words only if their frequency is greater than 3.\nlarge_words = dict([(k,v) for k,v in frequency_dist.items() if \nlen(k)>3])\nfrequency_dist = nltk.FreqDist(large_words)\nfrequency_dist.plot(50,cumulative=False)\n#output\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 446, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a2391fc-8550-4219-b6f5-01a14a5f0924": {"__data__": {"id_": "1a2391fc-8550-4219-b6f5-01a14a5f0924", "embedding": null, "metadata": {"page_label": "60", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7484857-7fab-4815-8446-41e8972babe9", "node_type": "4", "metadata": {"page_label": "60", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "12fc5295df61e4737906797ff0fb01a95c2234fa3752ed88b19de9e47259a7a0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "60\n \n Step 9-6 Build Wordcloud\nWordcloud is the pictorial representation of the most frequently repeated \nwords representing the size of the word.\n#install library\n!pip install wordcloud\n#build wordcloud\nfrom wordcloud import WordCloud\nwcloud = WordCloud().generate_from_frequencies(frequency_dist)\n#plotting the wordcloud\nimport matplotlib.pyplot as plt\nplt.imshow(wcloud, interpolation='bilinear')\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 445, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "75b32f32-25e7-4504-8737-3b66d6e10371": {"__data__": {"id_": "75b32f32-25e7-4504-8737-3b66d6e10371", "embedding": null, "metadata": {"page_label": "61", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8ba7052b-111e-4942-85af-452b9debf7a3", "node_type": "4", "metadata": {"page_label": "61", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e212766b5482c6201971c6378ac1ee991c13b51089e3b3c4533e4f5322115224", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "61\nplt.axis(\"off\")\n(-0.5, 399.5, 199.5, -0.5)\nplt.show()\n#output\n \nReaders, give this a try: Remove the stop words and then build the \nword cloud. The output would look something like that below.\n \nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 243, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "de5976b7-9cb9-4997-8268-2ffd3f2b5b51": {"__data__": {"id_": "de5976b7-9cb9-4997-8268-2ffd3f2b5b51", "embedding": null, "metadata": {"page_label": "62", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56a58a3c-ab39-4ad1-a865-8b0f5a19e001", "node_type": "4", "metadata": {"page_label": "62", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b266145533fa0318337f0d71a1d525eac3c9e8537c5638eb5d881a96f0d0bb02", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "62\n Recipe 2-10. Building a\u00a0Text Preprocessing \nPipeline\nSo far, we have completed most of the text manipulation and processing \ntechniques and methods. In this recipe, let\u2019s do something interesting.\n Problem\nYou want to build an end-to-end text preprocessing pipeline. Whenever \nyou want to do preprocessing for any NLP application, you can directly \nplug in data to this pipeline function and get the required clean text data as \nthe output.\n Solution\nThe simplest way to do this by creating the custom function with all the \ntechniques learned so far.\n How It Works\nThis works by putting all the possible processing techniques into a \nwrapper function and passing the data through it.\n Step 10-1 Read/create the\u00a0text data\nLet\u2019s create a list of strings and assign it to a variable. Maybe a tweet sample:\ntweet_sample= \"How to take control of your #debt https://\npersonal.vanguard.com/us/insights/saving-investing/ \ndebt- management.#Best advice for #family #financial #success   \n(@PrepareToWin)\"\nYou can also use your Twitter data extracted in Chapter 1.\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1105, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f1ab0c3d-966f-42f3-88ec-378da1b93da1": {"__data__": {"id_": "f1ab0c3d-966f-42f3-88ec-378da1b93da1", "embedding": null, "metadata": {"page_label": "63", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cf275501-bb30-4630-8260-7bb57d2c01ba", "node_type": "4", "metadata": {"page_label": "63", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "30b24a100a72bdff47500e4acffa4ad85fb3446658f882ebf048378fa3e60862", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "63\n Step 10-2 Process the\u00a0text\nExecute the below function to process the tweet:\ndef processRow(row):\n    import re\n    import nltk\n    from textblob import TextBlob\n    from nltk.corpus import stopwords\n    from nltk.stem import PorterStemmer\n    from textblob import Word\n    from nltk.util import ngrams\n    import re\n    from wordcloud import WordCloud, STOPWORDS\n    from nltk.tokenize import word_tokenize\n    tweet = row\n    #Lower case\n    tweet.lower()\n    #Removes unicode strings like \"\\u002c\" and \"x96\"\n    tweet = re.sub(r'(\\\\u[0-9A-Fa-f]+)',r\", tweet)\n    tweet = re.sub(r'[^\\x00-\\x7f]',r\",tweet)\n    #convert any url to URL\n    tweet = re.sub('((www\\.[^\\s]+)|(https?://[^\\s]+))','URL',tweet)\n    #Convert any @Username to \"AT_USER\"\n    tweet = re.sub('@[^\\s]+','AT_USER',tweet)\n    #Remove additional white spaces\n    tweet = re.sub('[\\s]+', ' ', tweet)\n    tweet = re.sub('[\\n]+', ' ', tweet)\n    #Remove not alphanumeric symbols white spaces\n    tweet = re.sub(r'[^\\w]', ' ', tweet)\n    #Removes hastag in front of a word \"\"\"\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1087, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4d23ab57-ceb6-45e2-b722-9cce21c2198b": {"__data__": {"id_": "4d23ab57-ceb6-45e2-b722-9cce21c2198b", "embedding": null, "metadata": {"page_label": "64", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fa9c7b79-c2d5-40a3-9a04-66b8dd9538f5", "node_type": "4", "metadata": {"page_label": "64", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ee50bf0201a6fe421a3af86e969c8f2da674608b1b95a8aed5135f7ae3ccd5a4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "64\n    tweet = re.sub(r'#([^\\s]+)', r'\\1', tweet)\n    #Replace #word with word\n    tweet = re.sub(r'#([^\\s]+)', r'\\1', tweet)\n    #Remove :( or :)\n    tweet = tweet.replace(':)',\")\n    tweet = tweet.replace(':(',\")\n    #remove numbers\n    tweet = \".join([i for i in tweet if not i.isdigit()])\n    #remove multiple exclamation\n    tweet = re.sub(r\"(\\!)\\1+\", ' ', tweet)\n    #remove multiple question marks\n    tweet = re.sub(r\"(\\?)\\1+\", ' ', tweet)\n    #remove multistop\n    tweet = re.sub(r\"(\\.)\\1+\", ' ', tweet)\n    #lemma\n    from textblob import Word\n    tweet =\"  \".join([Word(word).lemmatize() for word in tweet.\nsplit()])\n    #stemmer\n    #st = PorterStemmer()\n    #tweet=\" \".join([st.stem(word) for word in tweet.split()])\n    #Removes emoticons from text\n     tweet =  re.sub(':\\)|;\\)|:-\\)|\\(-:|:-D|=D|:P|xD|X\n- p|\\^\\^|:-*|\\^\\.\\^|\\^\\-\\^|\\^\\_\\^|\\,-\\)|\\)-:|:\\'\\\n(|:\\(|:-\\(|:\\S|T\\.T|\\.\\_\\.|:<|:-\\S|:-<|\\*\\-\n\\*|:O|=O|=\\-O|O\\.o|XO|O\\_O|:-\\@|=/|:/|X\\-\\\n(|>\\.<|>=\\(|D:', \", tweet)\n    #trim\n    tweet = tweet.strip('\\'\"')\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1068, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3aaf69e8-1afb-459d-ab73-a6f5ce3543be": {"__data__": {"id_": "3aaf69e8-1afb-459d-ab73-a6f5ce3543be", "embedding": null, "metadata": {"page_label": "65", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d26911d-c67c-424f-ac39-0c20e020f4dc", "node_type": "4", "metadata": {"page_label": "65", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "4c5008a68530a4240534a5125c7deac1c4e9cfd34f7a3a3763e4d760bdb2794e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "65\n    row = tweet\n    return row\n#call the function with your data\nprocessRow(tweet_sample)\n#output\n'How to take control of your debt URL Best advice for family \nfinancial success AT_USER'\nChapter 2  exploring and proCessing text data", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 235, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3828c994-8a6f-4eff-b777-7ad6ed01e72d": {"__data__": {"id_": "3828c994-8a6f-4eff-b777-7ad6ed01e72d", "embedding": null, "metadata": {"page_label": "67", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "31562bc2-6ad9-4b52-9b67-b113d9c9e76b", "node_type": "4", "metadata": {"page_label": "67", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1956c7271936583495218a67ed53c295111603d99c674092163656f5d5021e60", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "67\u00a9 Akshay Kulkarni and Adarsha Shivananda 2019 \nA. Kulkarni and A. Shivananda, Natural Language Processing Recipes,  \nhttps://doi.org/10.1007/978-1-4842-4267-4_3\nCHAPTER 3\nConverting Text \nto\u00a0Features\nIn this chapter, we are going to cover basic to advanced feature \nengineering (text to features) methods. By the end of this chapter, you will \nbe comfortable with the following recipes:\nRecipe 1. One Hot encoding\nRecipe 2. Count vectorizer\nRecipe 3. N-grams\nRecipe 4. Co-occurrence matrix\nRecipe 5. Hash vectorizer\nRecipe 6.  Term Frequency-Inverse Document \nFrequency (TF-IDF)\nRecipe 7. Word embedding\nRecipe 8. Implementing fastText\nNow that all the text preprocessing steps are discussed, let\u2019s explore \nfeature engineering, the foundation for Natural Language Processing. \nAs we already know, machines or algorithms cannot understand the \ncharacters/words or sentences, they can only take numbers as input that \nalso includes binaries. But the inherent nature of text data is unstructured \nand noisy, which makes it impossible to interact with machines.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1060, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cffa25e7-3c5b-493b-b407-c3a9d330614a": {"__data__": {"id_": "cffa25e7-3c5b-493b-b407-c3a9d330614a", "embedding": null, "metadata": {"page_label": "68", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d380e5c-37b5-4bf0-a82d-afaef7af1e4b", "node_type": "4", "metadata": {"page_label": "68", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "008158eebb5ed99a50142f060495a9274598d83fba4ebb1ee4707644901b67da", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "68\nThe procedure of converting raw text data into machine \nunderstandable format (numbers) is called feature engineering of text \ndata. Machine learning and deep learning algorithms\u2019 performance and \naccuracy is fundamentally dependent on the type of feature engineering \ntechnique used.\nIn this chapter, we will discuss different types of feature engineering \nmethods along with some state-of-the-art techniques; their functionalities, \nadvantages, disadvantages; and examples for each. All of these will make \nyou realize the importance of feature engineering.\n Recipe 3-1. Converting Text to\u00a0Features \nUsing One Hot Encoding\nThe traditional method used for feature engineering is One Hot encoding. \nIf anyone knows the basics of machine learning, One Hot encoding is \nsomething they should have come across for sure at some point of time or \nmaybe most of the time. It is a process of converting categorical variables \ninto features or columns and coding one or zero for the presence of that \nparticular category. We are going to use the same logic here, and the \nnumber of features is going to be the number of total tokens present in the \nwhole corpus.\n Problem\nYou want to convert text to feature using One Hot encoding.\n Solution\nOne Hot Encoding will basically convert characters or words into binary \nnumbers as shown below.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1372, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "510de054-451d-490c-abfa-a56bad77d8cf": {"__data__": {"id_": "510de054-451d-490c-abfa-a56bad77d8cf", "embedding": null, "metadata": {"page_label": "69", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d265890f-3ba3-433e-bce5-e91009873374", "node_type": "4", "metadata": {"page_label": "69", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "fa3d4e4d0e4e22a8cef02aa5de60676e2967c38adaab20e06e323315f5e34bba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "69\nI love NLP is future\ni love nLp 1 1 1 0 0\nnLp is future 0 0 1 1 1\n How It Works\nThere are so many functions to generate One Hot encoding. We will take \none function and discuss it in depth.\n Step 1-1 Store the\u00a0text in\u00a0a\u00a0variable\nThis is for a single line:\nText = \"I am learning NLP\"\n Step 1-2 Execute below function on\u00a0the\u00a0text data\nBelow is the function from the pandas library to convert text to feature.\n# Importing the library\nimport pandas as pd\n# Generating the features\npd.get_dummies(Text.split())\nResult :\n   I  NLP  am  learning\n0  1    0   0         0\n1  0    0   1         0\n2  0    0   0         1\n3  0    1   0         0\nOutput has 4 features since the number of distinct words present in the \ninput was 4.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 762, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "94749006-50ec-458d-a9fa-e23a1c1bfbb4": {"__data__": {"id_": "94749006-50ec-458d-a9fa-e23a1c1bfbb4", "embedding": null, "metadata": {"page_label": "70", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9d4de25c-a719-4a26-98b7-7d5d2ce81a5b", "node_type": "4", "metadata": {"page_label": "70", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a2cdcbf202a07c1302311ad512f591fad5a12df1395800a63d8afb3e254eeec7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "70\n Recipe 3-2. Converting Text to\u00a0Features \nUsing Count Vectorizing\nThe approach in Recipe 3-1 has a disadvantage. It does not take the \nfrequency of the word occurring into consideration. If a particular word \nis appearing multiple times, there is a chance of missing the information \nif it is not included in the analysis. A count vectorizer will solve that \nproblem.\nIn this recipe, we will see the other method of converting text to \nfeature, which is a count vectorizer.\n Problem\nHow do we convert text to feature using a count vectorizer?\n Solution\nCount vectorizer is almost similar to One Hot encoding. The only \ndifference is instead of checking whether the particular word is present or \nnot, it will count the words that are present in the document.\nObserve the below example. The words \u201cI\u201d and \u201cNLP\u201d occur twice in \nthe first document.\nI love NLP is future will learn in 2month\ni love nLp and i will \nlearn nLp in 2 months\n2 1 2 0 0 1 1 1 1\nnLp is future 0 0 1 1 1 0 0 0 0\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1024, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "11b6aa3c-8dda-43f6-b4da-2d4a5c3ccaae": {"__data__": {"id_": "11b6aa3c-8dda-43f6-b4da-2d4a5c3ccaae", "embedding": null, "metadata": {"page_label": "71", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a6280d5-c568-4a8d-b717-106bb5e089aa", "node_type": "4", "metadata": {"page_label": "71", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b521fc8b28f9c4b27a097fca3037d02ee344f4087f2bfbcb5935233296d562bb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "71\n How It Works\nSklearn has a feature extraction function that extracts features out of the \ntext. Let\u2019s discuss how to execute the same. Import the CountVectorizer \nfunction from Sklearn as explained below.\n#importing the function\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Text\ntext = [\"I love NLP and I will learn NLP in 2month \"]\n# create the transform\nvectorizer = CountVectorizer()\n# tokenizing\nvectorizer.fit(text)\n# encode document\nvector = vectorizer.transform(text)\n# summarize & generating output\nprint(vectorizer.vocabulary_)\nprint(vector.toarray())\nResult:\n{'love': 4, 'nlp': 5, 'and': 1, 'will': 6, 'learn': 3, 'in': 2, \n'2month': 0}\n[[1 1 1 1 1 2 1]]\nThe fifth token nlp has appeared twice in the document.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 780, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69c8e12d-a587-438a-8235-6eff72cbcdcb": {"__data__": {"id_": "69c8e12d-a587-438a-8235-6eff72cbcdcb", "embedding": null, "metadata": {"page_label": "72", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c53cc7e-c22c-4049-96df-d2dab8d72145", "node_type": "4", "metadata": {"page_label": "72", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "cf11e775c13b33973a4dcc0b18d90840731329a654072ccacd607a0df5ccc9e9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "72\n Recipe 3-3. Generating N-grams\nIf you observe the above methods, each word is considered as a feature. \nThere is a drawback to this method.\nIt does not consider the previous and the next words, to see if that \nwould give a proper and complete meaning to the words.\nFor example: consider the word \u201cnot bad. \u201d If this is split into individual \nwords, then it will lose out on conveying \u201cgood\u201d\u00a0\u2013 which is what this word \nactually means.\nAs we saw, we might lose potential information or insight because a \nlot of words make sense once they are put together. This problem can be \nsolved by N-grams.\nN-grams are the fusion of multiple letters or multiple words. They are \nformed in such a way that even the previous and next words are captured.\n\u2022 Unigrams are the unique words present in the sentence.\n\u2022 Bigram is the combination of 2 words.\n\u2022 Trigram is 3 words and so on.\nFor example,\n\u201cI am learning NLP\u201d\nUnigrams: \u201cI\u201d , \u201cam\u201d , \u201c learning\u201d , \u201cNLP\u201d\nBigrams: \u201cI am\u201d , \u201cam learning\u201d , \u201clearning NLP\u201d\nTrigrams: \u201cI am learning\u201d , \u201cam learning NLP\u201d\n Problem\nGenerate the N-grams for the given sentence.\n Solution\nThere are a lot of packages that will generate the N-grams. The one that is \nmostly used is TextBlob.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1248, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8091cc5a-97de-424b-94fe-d0ba667bdcaf": {"__data__": {"id_": "8091cc5a-97de-424b-94fe-d0ba667bdcaf", "embedding": null, "metadata": {"page_label": "73", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "310624aa-2fcf-4c5c-a73e-db7ddc2d5da5", "node_type": "4", "metadata": {"page_label": "73", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "99e7d40dc26507eccc55b94d8399927802e14df9bc18e6086e7ab57330a65191", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "73\n How It Works\nFollowing are the steps.\n Step 3-1 Generating N-grams using TextBlob\nLet us see how to generate N-grams using TextBlob.\nText = \"I am learning NLP\"\nUse the below TextBlob function to create N-grams. Use the text that is \ndefined above and mention the \u201cn\u201d based on the requirement.\n#Import textblob\nfrom textblob import TextBlob\n#For unigram : Use n = 1\nTextBlob(Text).ngrams(1)\nOutput:\n[WordList(['I']), WordList(['am']), WordList(['learning']), \nWordList(['NLP'])]\n#For Bigram : For bigrams, use n = 2\nTextBlob(Text).ngrams(2)\n[WordList(['I', 'am']),\n WordList(['am', 'learning']),\n WordList(['learning', 'NLP'])]\nIf we observe, we have 3 lists with 2 words at an instance.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 729, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "17c36ae8-77b3-4aa1-8564-855095cfd73c": {"__data__": {"id_": "17c36ae8-77b3-4aa1-8564-855095cfd73c", "embedding": null, "metadata": {"page_label": "74", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9413569b-8885-4682-8231-0d1c61c7f426", "node_type": "4", "metadata": {"page_label": "74", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2a994e62ee08e4856ce954083117c50258ad460ad0354c5388d38deb1452c067", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "74\n Step 3-2 Bigram-based features for\u00a0a\u00a0document\nJust like in the last recipe, we will use count vectorizer to generate features. \nUsing the same function, let us generate bigram features and see what the \noutput looks like.\n#importing the function\nfrom sklearn.feature_extraction.text import CountVectorizer\n# Text\ntext = [\"I love NLP and I will learn NLP in 2month \"]\n# create the transform\nvectorizer = CountVectorizer(ngram_range=(2,2))\n# tokenizing\nvectorizer.fit(text)\n# encode document\nvector = vectorizer.transform(text)\n# summarize & generating output\nprint(vectorizer.vocabulary_)\nprint(vector.toarray())\nResult: \n{'love nlp': 3, 'nlp and': 4, 'and will': 0, 'will learn': 6, \n'learn nlp': 2, 'nlp in': 5, 'in 2month': 1}\n[[1 1 1 1 1 1 1]]\nThe output has features with bigrams, and for our example, the count \nis one for all the tokens.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 886, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "658d4e68-a5e5-4fdb-993d-8c076a41e42d": {"__data__": {"id_": "658d4e68-a5e5-4fdb-993d-8c076a41e42d", "embedding": null, "metadata": {"page_label": "75", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "95c51f7d-9d54-4889-afec-6283d0b3550a", "node_type": "4", "metadata": {"page_label": "75", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "fdb9f4566fd00cf36026ba8ed07bc872284fc1c8420648dc0fd469a8a74cd6e7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "75\n Recipe 3-4. Generating Co-occurrence \nMatrix\nLet\u2019s discuss one more method of feature engineering called a co- \noccurrence matrix.\n Problem\nUnderstand and generate a co-occurrence matrix.\n Solution\nA co-occurrence matrix is like a count vectorizer where it counts the \noccurrence of the words together, instead of individual words.\n How It Works\nLet\u2019s see how to generate these kinds of matrixes using nltk, bigrams, \nand some basic Python coding skills.\n Step 4-1 Import the\u00a0necessary libraries\nHere is the code:\nimport numpy as np\nimport nltk\nfrom nltk import bigrams\nimport itertools\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 629, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "18816e55-e883-445e-a23a-262aeb5841d6": {"__data__": {"id_": "18816e55-e883-445e-a23a-262aeb5841d6", "embedding": null, "metadata": {"page_label": "76", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "940aa899-06ea-4a73-bbac-dd661b1e6736", "node_type": "4", "metadata": {"page_label": "76", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "22af1f1759cee923faad0921e0e90bd4fefdc6ebec51cc2b01dce051871e0eb7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "76\n Step 4-2 Create function for\u00a0co-occurrence matrix\nThe co_occurrence_matrix function is below.\ndef co_occurrence_matrix(corpus):\n    vocab = set(corpus)\n    vocab = list(vocab)\n    vocab_to_index = { word:i for i, word in enumerate(vocab) }\n    # Create bigrams from all words in corpus\n    bi_grams = list(bigrams(corpus))\n    #  Frequency distribution of bigrams ((word1, word2),  \nnum_occurrences)\n    bigram_freq =  nltk.FreqDist(bi_grams).most_common(len(bi_\ngrams))\n    # Initialise co-occurrence matrix\n    # co_occurrence_matrix[current][previous]\n    co_occurrence_matrix = np.zeros((len(vocab), len(vocab)))\n    # Loop through the bigrams taking the current and previous word,\n    # and the number of occurrences of the bigram.\n    for bigram in bigram_freq:\n        current = bigram[0][1]\n        previous = bigram[0][0]\n        count = bigram[1]\n        pos_current = vocab_to_index[current]\n        pos_previous = vocab_to_index[previous]\n        co_occurrence_matrix[pos_current][pos_previous] = count\n    co_occurrence_matrix = np.matrix(co_occurrence_matrix)\n    # return the matrix and the index\n    return co_occurrence_matrix,vocab_to_index\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1201, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9cd4e61f-5cbc-4a9e-8a52-5a2302354ef6": {"__data__": {"id_": "9cd4e61f-5cbc-4a9e-8a52-5a2302354ef6", "embedding": null, "metadata": {"page_label": "77", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dfe88a7e-981b-4ba1-a92d-db95efe04f7a", "node_type": "4", "metadata": {"page_label": "77", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "336f43ba8a794a0713f4b44b0074220979dae2e65173df02172d68c6e2c21948", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "77\n Step 4-3 Generate co-occurrence matrix\nHere are the sentences for testing:\nsentences = [['I', 'love', 'nlp'],\n                   ['I', 'love','to' 'learn'],\n                   ['nlp', 'is', 'future'],\n                   ['nlp', 'is', 'cool']]\n# create one list using many lists\nmerged = list(itertools.chain.from_iterable(sentences))\nmatrix = co_occurrence_matrix(merged)\n# generate the matrix\nCoMatrixFinal = pd.DataFrame(matrix[0], index=vocab_to_index, \ncolumns=vocab_to_index)\nprint(CoMatrixFinal)\n           I   is  love  future  tolearn  cool  nlp\nI        0.0  0.0   0.0     0.0      0.0   0.0  1.0\nis       0.0  0.0   0.0     0.0      0.0   0.0  2.0\nlove     2.0  0.0   0.0     0.0      0.0   0.0  0.0\nfuture   0.0  1.0   0.0     0.0      0.0   0.0  0.0\ntolearn  0.0  0.0   1.0     0.0      0.0   0.0  0.0\ncool     0.0  1.0   0.0     0.0      0.0   0.0  0.0\nnlp      0.0  0.0   1.0     1.0      1.0   0.0  0.0\nIf you observe, \u201cI, \u201d \u201clove, \u201d and \u201cis, \u201d nlp\u201d has appeared together twice, \nand a few other words appeared only once.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1079, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2af128f1-d628-4d2e-ab6c-d603a9ff30b9": {"__data__": {"id_": "2af128f1-d628-4d2e-ab6c-d603a9ff30b9", "embedding": null, "metadata": {"page_label": "78", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9ad62dac-a812-477f-8b63-7e515f71adc9", "node_type": "4", "metadata": {"page_label": "78", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "63f17e3c12694184308c9066068da51a5731238e92f55e060fc81e96eabcacb4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "78\n Recipe 3-5. Hash Vectorizing\nA count vectorizer and co-occurrence matrix have one limitation though. \nIn these methods, the vocabulary can become very large and cause \nmemory/computation issues.\nOne of the ways to solve this problem is a Hash Vectorizer.\n Problem\nUnderstand and generate a Hash Vectorizer.\n Solution\nHash Vectorizer is memory efficient and instead of storing the tokens \nas strings, the vectorizer applies the hashing trick to encode them as \nnumerical indexes. The downside is that it\u2019s one way and once vectorized, \nthe features cannot be retrieved.\n How It Works\nLet\u2019s take an example and see how to do it using sklearn.\n Step 5-1 Import the\u00a0necessary libraries and\u00a0create \ndocument\nHere\u2019s the code:\nfrom sklearn.feature_extraction.text import HashingVectorizer\n# list of text documents\ntext = [\"The quick brown fox jumped over the lazy dog.\"]\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 906, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7089574c-f26d-44c4-8503-040b62660d33": {"__data__": {"id_": "7089574c-f26d-44c4-8503-040b62660d33", "embedding": null, "metadata": {"page_label": "79", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "935b8148-2f43-495e-a165-8fd3f3b82e80", "node_type": "4", "metadata": {"page_label": "79", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "4b04ff5e4f9a16e0281fe1bd7368f9c2452b552849cbe1b4d81fcc1322489567", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "79\n Step 5-2 Generate hash vectorizer matrix\nLet\u2019s create the HashingVectorizer of a vector size of 10.\n# transform\nvectorizer = HashingVectorizer(n_features=10)\n# create the hashing vector\nvector = vectorizer.transform(text)\n# summarize the vector\nprint(vector.shape)\nprint(vector.toarray())\n(1, 10)\n[[ 0.           0.57735027  0.       0.       0.      0.     0.\n  -0.57735027  -0.57735027  0.       ]]\nIt created vector of size 10 and now this can be used for any \nsupervised/unsupervised tasks.\n Recipe 3-6. Converting Text to\u00a0Features \nUsing TF-IDF\nAgain, in the above-mentioned text-to-feature methods, there are few \ndrawbacks, hence the introduction of TF-IDF .\u00a0Below are the disadvantages \nof the above methods.\n\u2022 Let\u2019s say a particular word is appearing in all the documents \nof the corpus, then it will achieve higher importance in \nour previous methods. That\u2019s bad for our analysis.\n\u2022 The whole idea of having TF-IDF is to reflect on how \nimportant a word is to a document in a collection, and \nhence normalizing words appeared frequently in all the \ndocuments.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1112, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1aeac423-3fea-46f0-b5bb-e72244ee392a": {"__data__": {"id_": "1aeac423-3fea-46f0-b5bb-e72244ee392a", "embedding": null, "metadata": {"page_label": "80", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f903da9f-a2fc-417c-8f9f-6aeb5c20da39", "node_type": "4", "metadata": {"page_label": "80", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c8614e6f9bcdf05ea31211aaa7766c929eb6845ca6bc224380bd4da984c9ef0b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "80\n Problem\nText to feature using TF-IDF .\n Solution\nTerm frequency (TF): Term frequency is simply the ratio of the count of a \nword present in a sentence, to the length of the sentence.\nTF is basically capturing the importance of the word irrespective of the \nlength of the document. For example, a word with the frequency of 3 with \nthe length of sentence being 10 is not the same as when the word length of \nsentence is 100 words. It should get more importance in the first scenario; \nthat is what TF does.\nInverse Document Frequency (IDF): IDF of each word is the log of \nthe ratio of the total number of rows to the number of rows in a particular \ndocument in which that word is present.\nIDF = log(N/n), where N is the total number of rows and n is the \nnumber of rows in which the word was present.\nIDF will measure the rareness of a term. Words like \u201ca, \u201d and \u201cthe\u201d show \nup in all the documents of the corpus, but rare words will not be there \nin all the documents. So, if a word is appearing in almost all documents, \nthen that word is of no use to us since it is not helping to classify or in \ninformation retrieval. IDF will nullify this problem.\nTF-IDF is the simple product of TF and IDF so that both of the \ndrawbacks are addressed, which makes predictions and information \nretrieval relevant.\n How It Works\nLet's look at the following steps.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1395, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29960fdf-fe52-4f36-b17b-1df3c13963e4": {"__data__": {"id_": "29960fdf-fe52-4f36-b17b-1df3c13963e4", "embedding": null, "metadata": {"page_label": "81", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ff0741f0-b9cb-4102-98e3-7cc6e65b7c61", "node_type": "4", "metadata": {"page_label": "81", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "630b5051873af85a1867d4e96f7db2426cbff323f2b10267542d6f5d75411bea", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "81\n Step 6-1 Read the\u00a0text data\nA familiar phrase:\nText = [\"The quick brown fox jumped over the lazy dog.\",\n\"The dog.\",\n\"The fox\"]\n Step 6-2 Creating the\u00a0Features\nExecute the below code on the text data:\n#Import TfidfVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n#Create the transform\nvectorizer = TfidfVectorizer()\n#Tokenize and build vocab\nvectorizer.fit(Text)\n#Summarize\nprint(vectorizer.vocabulary_)\nprint(vectorizer.idf_)\nResult:\nText = [\"The quick brown fox jumped over the lazy dog.\",\n\"The dog.\",\n\"The fox\"]\n{'the': 7, 'quick': 6, 'brown': 0, 'fox': 2, 'jumped': 3, \n'over': 5, 'lazy': 4, 'dog': 1}\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 669, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "96920b71-9c4c-443d-a292-e253f5af872f": {"__data__": {"id_": "96920b71-9c4c-443d-a292-e253f5af872f", "embedding": null, "metadata": {"page_label": "82", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aedd1df4-f4b7-4cae-be44-9de39544658f", "node_type": "4", "metadata": {"page_label": "82", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ed8073050ab5172cd38b31d93599208a5ddaddc8785a2df4806ea2d68dba2d0d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "82\n[  1.69314718  1.28768207  1.28768207  1.69314718   1.69314718   \n1.69314718  1.69314718  1.   ]\nIf you observe, \u201cthe\u201d is appearing in all the 3 documents and it does \nnot add much value, and hence the vector value is 1, which is less than all \nthe other vector representations of the tokens.\nAll these methods or techniques we have looked into so far are based \non frequency and hence called frequency-based embeddings or features. \nAnd in the next recipe, let us look at prediction-based embeddings, \ntypically called word embeddings.\n Recipe 3-7. Implementing Word \nEmbeddings\nThis recipe assumes that you have a working knowledge of how a neural \nnetwork works and the mechanisms by which weights in the neural \nnetwork are updated. If new to a Neural Network (NN), it is suggested that \nyou go through Chapter 6 to gain a basic understanding of how NN works.\nEven though all previous methods solve most of the problems, once \nwe get into more complicated problems where we want to capture the \nsemantic relation between the words, these methods fail to perform.\nBelow are the challenges:\n\u2022 All these techniques fail to capture the context and \nmeaning of the words. All the methods discussed so \nfar basically depend on the appearance or frequency \nof the words. But we need to look at how to capture the \ncontext or semantic relations: that is, how frequently \nthe words are appearing close by.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1442, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f6069ff2-3719-4901-8dc1-507eb3d3d6f6": {"__data__": {"id_": "f6069ff2-3719-4901-8dc1-507eb3d3d6f6", "embedding": null, "metadata": {"page_label": "83", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3491f8d-09e8-419c-8d4e-017e94defcb2", "node_type": "4", "metadata": {"page_label": "83", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1ee5169db9904de4cfcdf2a52feb95706fe11cbcc0fdfc0cc44efe5d684a6e0e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "83\n a. I am eating an apple.\n b. I am using apple.\nIf you observe the above example, Apple gives different meanings \nwhen it is used with different (close by) adjacent words, eating and using.\n\u2022 For a problem like a document classification (book \nclassification in the library), a document is really \nhuge and there are a humongous number of tokens \ngenerated. In these scenarios, your number of features \ncan get out of control (wherein) thus hampering the \naccuracy and performance.\nA machine/algorithm can match two documents/texts and say \nwhether they are same or not. But how do we make machines tell you \nabout cricket or Virat Kohli when you search for MS Dhoni? How do you \nmake a machine understand that \u201c Apple\u201d in \u201c Apple is a tasty fruit\u201d is a fruit \nthat can be eaten and not a company?\nThe answer to the above questions lies in creating a representation \nfor words that capture their meanings, semantic relationships, and the \ndifferent types of contexts they are used in.\nThe above challenges are addressed by Word Embeddings.\nWord embedding is the feature learning technique where words from \nthe vocabulary are mapped to vectors of real numbers capturing the \ncontextual hierarchy.\nIf you observe the below table, every word is represented with 4 \nnumbers called vectors. Using the word embeddings technique, we are \ngoing to derive those vectors for each and every word so that we can use it \nin future analysis. In the below example, the dimension is 4. But we usually \nuse a dimension greater than 100.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1562, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "83452570-b6e4-4305-9cd5-89d278a3da28": {"__data__": {"id_": "83452570-b6e4-4305-9cd5-89d278a3da28", "embedding": null, "metadata": {"page_label": "84", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "15631da4-1411-408a-952d-045e94357c9b", "node_type": "4", "metadata": {"page_label": "84", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f308914281b2dcfd46eb0220d6d7165b87ee7a1140f4cbd0927325c3fce12e7b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "84\n\u00a0\u00a0Words Vectors\ntext 0.36 0.36 -0.43 0.36\nidea -0.56 -0.56 0.72 -0.56\nword 0.35 -0.43 0.12 0.72\nencode 0.19 0.19 0.19 0.43\ndocument -0.43 0.19 -0.43 0.43\ngrams 0.72 -0.43 0.72 0.12\nprocess 0.43 0.72 0.43 0.43\nfeature 0.12 0.45 0.12 0.87\n Problem\nYou want to implement word embeddings.\n Solution\nWord embeddings are prediction based, and they use shallow neural \nnetworks to train the model that will lead to learning the weight and using \nthem as a vector representation.\nword2vec: word2vec is the deep learning Google framework to train \nword embeddings. It will use all the words of the whole corpus and predict \nthe nearby words. It will create a vector for all the words present in the \ncorpus in a way so that the context is captured. It also outperforms any \nother methodologies in the space of word similarity and word analogies.\nThere are mainly 2 types in word2vec.\n\u2022 Skip-Gram\n\u2022 Continuous Bag of Words (CBOW)\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 961, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "083b6735-0907-452d-8dec-60f9d0f84cc0": {"__data__": {"id_": "083b6735-0907-452d-8dec-60f9d0f84cc0", "embedding": null, "metadata": {"page_label": "85", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f582e90a-fdf1-4a27-97a1-3140be02b491", "node_type": "4", "metadata": {"page_label": "85", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "0e30d69ed8650c085bff6341f469c956ed04254ee8857df35f2f975dec82c454", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "85\nCBOW\nInput InputHidden Layer Hidden LayerOutput Output\nSkip Gram\n \n How It Works\nThe above figure shows the architecture of the CBOW and skip-gram \nalgorithms used to build word embeddings. Let us see how these models \nwork in detail.\n Skip-Gram\nThe skip-gram model (Mikolov et\u00a0al., 2013)1 is used to predict the \nprobabilities of a word given the context of word or words.\nLet us take a small sentence and understand how it actually works. \nEach sentence will generate a target word and context, which are the words \nnearby. The number of words to be considered around the target variable \nis called the window size. The table below shows all the possible target \nand context variables for window size 2. Window size needs to be selected \nbased on data and the resources at your disposal. The larger the window \nsize, the higher the computing power.\n1 https://arxiv.org/abs/1310.4546\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 926, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42b6b026-2f34-4e95-958b-ee45a25c7402": {"__data__": {"id_": "42b6b026-2f34-4e95-958b-ee45a25c7402", "embedding": null, "metadata": {"page_label": "86", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2618e903-bba0-487a-b68b-83c937a06020", "node_type": "4", "metadata": {"page_label": "86", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "05faf618fb307c9392cbdebc7610e2a70f7e5e051c934092ee40ff615066660c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "86\nText = \u201cI love NLP and I will learn NLP in 2 months\u201d\nTarget word Context\ni love nLp i love, nLp\ni love nLp and love love, nLp, and\ni love nLp and i will learn nLp i, love, and, i\n\u2026 \u2026 \u2026\nin 2 months month in, 2\nSince it takes a lot of text and computing power, let us go ahead and \ntake sample data and build a skip-gram model.\nAs mentioned in Chapter 3, import the text corpus and break it into \nsentences. Perform some cleaning and preprocessing like the removal of \npunctuation and digits, and split the sentences into words or tokens, etc.\n#Example sentences\nsentences = [['I', 'love', 'nlp'],\n                  ['I', 'will', 'learn', 'nlp', 'in', '2','months'],\n                  ['nlp', 'is', 'future'],\n                  [ 'nlp', 'saves', 'time', 'and', 'solves', \n'lot', 'of', 'industry', 'problems'],\n                  ['nlp', 'uses', 'machine', 'learning']]\n#import library\n!pip install gensim\nimport gensim\nfrom gensim.models import Word2Vec\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1060, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2813dff9-588e-45d3-a529-8a0d41e70179": {"__data__": {"id_": "2813dff9-588e-45d3-a529-8a0d41e70179", "embedding": null, "metadata": {"page_label": "87", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6fc69100-3289-422b-981f-e69e2252f04c", "node_type": "4", "metadata": {"page_label": "87", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1b98d884a9a7454af39f9f5abad8b3a2d9542c01edd4e5faa3a9d2da82ef7f04", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "87\n# training the model\nskipgram = Word2Vec(sentences, size =50, window = 3, min_count=1, \nsg = 1)\nprint(skipgram)\n# access vector for one word\nprint(skipgram['nlp'])\n[ 0.00552227 -0.00723104  0.00857073  0.00368054 -0.00071274 \n  0.00837146\n  0.00179965 -0.0049786  -0.00448666 -0.00182289  0.00857488  \n -0.00499459\n  0.00188365 -0.0093498   0.00174774 -0.00609793  -0.00533857 \n -0.007905\n -0.00176814 -0.00024082 -0.00181886 -0.00093836 -0.00382601  \n -0.00986026\n  0.00312014 -0.00821249  0.00787507 -0.00864689 -0.00686584  \n -0.00370761\n  0.0056183   0.00859488 -0.00163146  0.00928791  0.00904601   \n  0.00443816\n -0.00192308  0.00941    -0.00202355 -0.00756564 -0.00105471 \n  0.00170084\n  0.00606918 -0.00848301 -0.00543473  0.00747958  0.0003408 \n  0.00512787\n -0.00909613  0.00683905]\nSince our vector size parameter was 50, the model gives a vector of size \n50 for each word.\n# access vector for another one word\nprint(skipgram['deep'])\nKeyError: \"word 'deep' not in vocabulary\"\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1029, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33dbbe25-2f1b-4376-9674-ff547406c003": {"__data__": {"id_": "33dbbe25-2f1b-4376-9674-ff547406c003", "embedding": null, "metadata": {"page_label": "88", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bab9c87e-cbef-4e35-a7cd-621e67a17d79", "node_type": "4", "metadata": {"page_label": "88", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "dc8ac05e9b0038ca028726fe202dde750949e393c6c00f3eab5f1d914d880477", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "88\nWe get an error saying the word doesn\u2019t exist because this word was \nnot there in our input training data. This is the reason we need to train the \nalgorithm on as much data possible so that we do not miss out on words.\nThere is one more way to tackle this problem. Read Recipe 3-6\u00a0in this \nchapter for the answer.\n# save model\nskipgram.save('skipgram.bin')\n# load model\nskipgram = Word2Vec.load('skipgram.bin')\nT\u00a0\u2013 SNE plot is one of the ways to evaluate word embeddings. Let\u2019s \ngenerate it and see how it looks.\n# T \u2013 SNE plot\nX = skipgram[skipgram.wv.vocab]\npca = PCA(n_components=2)\nresult = pca.fit_transform(X)\n# create a scatter plot of the projection\npyplot.scatter(result[:, 0], result[:, 1])\nwords = list(skipgram.wv.vocab)\nfor i, word in enumerate(words):\n       pyplot.annotate(word, xy=(result[i, 0], result[i, 1]))\npyplot.show()\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 884, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f02dffc1-9916-4f35-958c-af8bf13bfdb3": {"__data__": {"id_": "f02dffc1-9916-4f35-958c-af8bf13bfdb3", "embedding": null, "metadata": {"page_label": "89", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a282b95e-76c3-4aab-bfd3-92c048856308", "node_type": "4", "metadata": {"page_label": "89", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2ed4bdb997d46b8101a87e928bb66a37faa8c796de9caa812ee660dd1ac6317d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "89\nResult: \n \n Continuous Bag of\u00a0Words (CBOW)\nNow let\u2019s see how to build CBOW model.\n#import library\nfrom gensim.models import Word2Vec\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot\n#Example sentences\nsentences = [['I', 'love', 'nlp'],\n                   ['I', 'will', 'learn', 'nlp', 'in', '2','months'],\n                   ['nlp', 'is', 'future'],\n                   [ 'nlp', 'saves', 'time', 'and', 'solves', \n'lot', 'of', 'industry', 'problems'],\n                   ['nlp', 'uses', 'machine', 'learning']]\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 570, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1a00afd0-25ec-4aa5-a295-93d0f358cdc2": {"__data__": {"id_": "1a00afd0-25ec-4aa5-a295-93d0f358cdc2", "embedding": null, "metadata": {"page_label": "90", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "007a4aa3-3666-41a5-9183-c700a9cef904", "node_type": "4", "metadata": {"page_label": "90", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "624395ad930aafb9c2c4570af0f2eb8ddc1df7dfcd3e129005bf1abc6491989e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "90\n# training the model\ncbow = Word2Vec(sentences, size =50, window = 3, min_count=1,sg = 1)\nprint(cbow)\n# access vector for one word\nprint(cbow['nlp'])\n# save model\ncbow.save('cbow.bin')\n# load model\ncbow = Word2Vec.load('cbow.bin')\n# T \u2013 SNE plot\nX = cbow[cbow.wv.vocab]\npca = PCA(n_components=2)\nresult = pca.fit_transform(X)\n# create a scatter plot of the projection\npyplot.scatter(result[:, 0], result[:, 1])\nwords = list(cbow.wv.vocab)\nfor i, word in enumerate(words):\n       pyplot.annotate(word, xy=(result[i, 0], result[i, 1]))\npyplot.show()\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 589, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8fdf3ff4-014f-4d18-a333-0e2ddea777c0": {"__data__": {"id_": "8fdf3ff4-014f-4d18-a333-0e2ddea777c0", "embedding": null, "metadata": {"page_label": "91", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6f2cdf2-e3dc-462c-a3d3-ae26931f0e65", "node_type": "4", "metadata": {"page_label": "91", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "cb6f65518ad5dfe112226eb6c4209e3169262ea194bd0529963a28beb1fa8c99", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "91\nResult:\n \nBut to train these models, it requires a huge amount of computing \npower. So, let us go ahead and use Google\u2019s pre-trained model, which has \nbeen trained with over 100 billion words.\nDownload the model from the below path and keep it in your local \nstorage:\nhttps://drive.google.com/file/d/0B7XkCwpI5KDYNlNUTTlSS21pQmM/edit\nImport the gensim package and follow the steps to understand \nGoogle\u2019s word2vec.\n# import gensim package\nimport gensim\n# load the saved model\nmodel = gensim.models.Word2Vec.load_word2vec_format('C:\\\\\nUsers\\\\GoogleNews-vectors-negative300.bin', binary=True)\n#Checking how similarity works.\nprint (model.similarity('this', 'is'))\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 703, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2d23f43b-386a-4077-9f73-07613de4d622": {"__data__": {"id_": "2d23f43b-386a-4077-9f73-07613de4d622", "embedding": null, "metadata": {"page_label": "92", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "57f3d04b-6fbf-441c-980f-e46ebaecc55d", "node_type": "4", "metadata": {"page_label": "92", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a58a9ebf23dbb39c5ddc2d1e3d2709943ef41a832b17bad081c33971d27665fa", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "92\nOutput:\n0.407970363878\n#Lets check one more.\nprint (model.similarity('post', 'book'))\nOutput:\n0.0572043891977\n\u201cThis\u201d and \u201cis\u201d have a good amount of similarity, but the similarity \nbetween the words \u201cpost\u201d and \u201cbook\u201d is poor. For any given set of words, \nit uses the vectors of both the words and calculates the similarity between \nthem.\n# Finding the odd one out.\nmodel.doesnt_match('breakfast cereal dinner lunch';.split())\nOutput:\n'cereal'\nOf 'breakfast\u2019 , \u2018cereal\u2019 , \u2018dinner\u2019 and \u2018lunch', only cereal is the word that is \nnot anywhere related to the remaining 3 words.\n# It is also finding the relations between words.\nword_vectors.most_similar(positive=['woman', 'king'], \nnegative=['man'])\nOutput:\nqueen: 0.7699\nIf you add \u2018woman\u2019 and \u2018king\u2019 and minus man, it is predicting queen as \noutput with 77% confidence. Isn\u2019t this amazing?\nking woman man queen \nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 900, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c0ab14d9-d29f-4101-b8fe-2d5228070273": {"__data__": {"id_": "c0ab14d9-d29f-4101-b8fe-2d5228070273", "embedding": null, "metadata": {"page_label": "93", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "100c06f3-70bb-415f-bcda-2fad0d1c1cac", "node_type": "4", "metadata": {"page_label": "93", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "de12983ce787614f01b2bb35ab1945556d0e9acd41636d9a25101b1bc1d2d64f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "93\nLet\u2019s have a look at few of the interesting examples using T\u00a0\u2013 SNE plot \nfor word embeddings.\n \nAbove is the word embedding\u2019s output representation of home \ninteriors and exteriors. If you clearly observe, all the words related to \nelectric fittings are near to each other; similarly, words related to bathroom \nfittings are near to each other, and so on. This is the beauty of word \nembeddings.\n Recipe 3-8 Implementing fastText\nfastText is another deep learning framework developed by Facebook to \ncapture context and meaning.\n Problem\nHow to implement fastText in Python.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 616, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1675aa9d-5bce-4d0a-bcde-b6bb2a384bf2": {"__data__": {"id_": "1675aa9d-5bce-4d0a-bcde-b6bb2a384bf2", "embedding": null, "metadata": {"page_label": "94", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b6f0ca96-d944-4d73-8315-97cf5c8ad3d1", "node_type": "4", "metadata": {"page_label": "94", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f3d8536cd11192ce433b990f5b6455d4e86161de52b651c4b21ca8981fb4d6a6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "94\n Solution\nfastText is the improvised version of word2vec. word2vec basically \nconsiders words to build the representation. But fastText takes each \ncharacter while computing the representation of the word.\n How It Works\nLet us see how to build a fastText word embedding.\n# Import FastText\nfrom gensim.models import FastText\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot\n#Example sentences\nsentences = [['I', 'love', 'nlp'],\n                   ['I', 'will', 'learn', 'nlp', 'in', '2','months'],\n                   ['nlp', 'is', 'future'],\n                   [ 'nlp', 'saves', 'time', 'and', 'solves', \n'lot', 'of', 'industry', 'problems'],\n                   ['nlp', 'uses', 'machine', 'learning']]\nfast = FastText(sentences,size=20, window=1, min_count=1, \nworkers=5, min_n=1, max_n=2)\n# vector for word nlp\nprint(fast['nlp'])\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 890, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2412c453-60ba-4331-92c7-da995edfd5f6": {"__data__": {"id_": "2412c453-60ba-4331-92c7-da995edfd5f6", "embedding": null, "metadata": {"page_label": "95", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "13947329-c54d-4c86-901a-511bb8753032", "node_type": "4", "metadata": {"page_label": "95", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ea63556ccb5b51040b1bb720b13987fffa7a41f21c48857a0d9e56f9182b27b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "95\n[-0.00459182  0.00607472 -0.01119007  0.00555629 -0.00781679  \n -0.01376211\n  0.00675235 -0.00840158 -0.00319737  0.00924599  0.00214165  \n -0.01063819\n  0.01226836  0.00852781  0.01361119 -0.00257012  0.00819397  \n -0.00410289\n -0.0053979  -0.01360016]\n# vector for word deep\nprint(fast['deep'])\n[ 0.00271002 -0.00242539 -0.00771885 -0.00396854  0.0114902 \n -0.00640606\n  0.00637542 -0.01248098 -0.01207364  0.01400793 -0.00476079  \n -0.00230879\n  0.02009759 -0.01952532  0.01558956 -0.01581665  0.00510567  \n -0.00957186\n -0.00963234 -0.02059373]\nThis is the advantage of using fastText. The \u201cdeep\u201d was not present in \ntraining of word2vec and we did not get a vector for that word. But since \nfastText is building on character level, even for the word that was not \nthere in training, it will provide results. You can see the vector for the word \n\u201cdeep, \u201d but it's not present in the input data.\n# load model\nfast = Word2Vec.load('fast.bin')\n# visualize\nX = fast[fast.wv.vocab]\npca = PCA(n_components=2)\nresult = pca.fit_transform(X)\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1078, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "41fc6360-c05a-4ed4-b1d0-2d89e711f3c2": {"__data__": {"id_": "41fc6360-c05a-4ed4-b1d0-2d89e711f3c2", "embedding": null, "metadata": {"page_label": "96", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a7350025-1754-422b-aacc-869a13bb1805", "node_type": "4", "metadata": {"page_label": "96", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3d5c3097b625b8ea8e4fd7afbe621e55b72571d97fdc02bcea52a610775731fb", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "96\n# create a scatter plot of the projection\npyplot.scatter(result[:, 0], result[:, 1])\nwords = list(fast.wv.vocab)\nfor i, word in enumerate(words):\n      pyplot.annotate(word, xy=(result[i, 0], result[i, 1]))\npyplot.show()\n \nThe figure above shows the embedding representation for fastText. \nIf you observe closely, the words \u201clove\u201d and \u201csolve\u201d are close together in \nfastText but in your skip-gram and CBOW, \u201clove\u201d and \u201clearn\u201d are near to \neach other. This is an effect of character-level embeddings.\nWe hope that by now you are familiar and comfortable with processing \nthe natural language. Now that data is cleaned and features are created, \nlet\u2019s jump into building some applications around it that solves the \nbusiness problem.\nChapter 3  Converting text to\u00a0Features", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "237ea2cc-e885-4499-a1ea-96007723b0e2": {"__data__": {"id_": "237ea2cc-e885-4499-a1ea-96007723b0e2", "embedding": null, "metadata": {"page_label": "97", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5058d0de-fc90-4331-8f33-858482122957", "node_type": "4", "metadata": {"page_label": "97", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "88359e1bed6f889e280f729db89fa3127d9aa73e548bb63f4b8d9558a392635b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "97\u00a9 Akshay Kulkarni and Adarsha Shivananda 2019 \nA. Kulkarni and A. Shivananda, Natural Language Processing Recipes,  \nhttps://doi.org/10.1007/978-1-4842-4267-4_4\nCHAPTER 4\nAdvanced Natural \nLanguage Processing\nIn this chapter, we are going to cover various advanced NLP techniques \nand leverage machine learning algorithms to extract information from text \ndata as well as some of the advanced NLP applications with the solution \napproach and implementation.\nRecipe 1. Noun Phrase extraction\nRecipe 2. Text similarity\nRecipe 3. Parts of speech tagging\nRecipe 4. Information extraction\u00a0\u2013 NER\u00a0\u2013 Entity recognition\nRecipe 5. Topic modeling\nRecipe 6. Text classification\nRecipe 7. Sentiment analysis\nRecipe 8. Word sense disambiguation\nRecipe 9. Speech recognition and speech to text\nRecipe 10. Text to speech\nRecipe 11. Language detection and translation", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 852, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f6fd917-eb92-4333-9461-a6cf484bb92a": {"__data__": {"id_": "7f6fd917-eb92-4333-9461-a6cf484bb92a", "embedding": null, "metadata": {"page_label": "98", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1efa0a96-ca69-4f3e-91a6-7c651e568e16", "node_type": "4", "metadata": {"page_label": "98", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "187388696c5a17f8523a7e1e1df4bddff37fc3dc9d753e0c81956ca3f961eb58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "98\nBefore getting into recipes, let\u2019s understand the NLP pipeline and life \ncycle first. There are so many concepts we are implementing in this book, \nand we might get overwhelmed by the content of it. To make it simpler \nand smoother, let\u2019s see what is the flow that we need to follow for an NLP \nsolution.\nFor example, let\u2019s consider customer sentiment analysis and \nprediction for a product or brand or service.\n\u2022 Define the Problem: Understand the customer \nsentiment across the products.\n\u2022 Understand the depth and breadth of the problem: \nUnderstand the customer/user sentiments across the \nproduct; why we are doing this? What is the business \nimpact? Etc.\n\u2022 Data requirement brainstorming: Have a \nbrainstorming activity to list out all possible data \npoints.\n\u2022 All the reviews from customers on e-commerce \nplatforms like Amazon, Flipkart, etc.\n\u2022 Emails sent by customers\n\u2022 Warranty claim forms\n\u2022 Survey data\n\u2022 Call center conversations using speech to text\n\u2022 Feedback forms\n\u2022 Social media data like Twitter, Facebook, and \nLinkedIn\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1089, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "48e50a9c-deaf-44bf-8500-ae1571546672": {"__data__": {"id_": "48e50a9c-deaf-44bf-8500-ae1571546672", "embedding": null, "metadata": {"page_label": "99", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5fd6bff1-d3e6-425b-a614-0e00b78e321e", "node_type": "4", "metadata": {"page_label": "99", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "6fa707dd4cf81d0ecc99c3e8d79116ba94b671e8e247b65b9dd43a7a62f9ba98", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "99\n\u2022 Data collection: We learned different techniques to \ncollect the data in Chapter 1. Based on the data and \nthe problem, we might have to incorporate different \ndata collection methods. In this case, we can use web \nscraping and Twitter APIs.\n\u2022 Text Preprocessing: We know that data won\u2019t always \nbe clean. We need to spend a significant amount \nof time to process it and extract insight out of it \nusing different methods that we discussed earlier in \nChapter\u00a02.\n\u2022 Text to feature: As we discussed, texts are characters \nand machines will have a tough time understanding \nthem. We have to convert them to features that \nmachines and algorithms can understand using any of \nthe methods we learned in the previous chapter.\n\u2022 Machine learning/Deep learning: Machine learning/\nDeep learning is a part of an artificial intelligence \numbrella that will make systems automatically learn \npatterns in the data without being programmed. Most \nof the NLP solutions are based on this, and since we \nconverted text to features, we can leverage machine \nlearning or deep learning algorithms to achieve \nthe goals like text classification, natural language \ngeneration, etc.\n\u2022 Insights and deployment: There is absolutely no use \nfor building NLP solutions without proper insights \nbeing communicated to the business. Always take time \nto connect the dots between model/analysis output \nand the business, thereby creating the maximum \nimpact.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1481, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aa85935f-ebe9-4d7f-ab1b-9e6752d9bcda": {"__data__": {"id_": "aa85935f-ebe9-4d7f-ab1b-9e6752d9bcda", "embedding": null, "metadata": {"page_label": "100", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fc6ca18c-01ba-4865-9a83-edfdfbc88f02", "node_type": "4", "metadata": {"page_label": "100", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c1c99565ad3fe31c8d63a9d978ce7ef28063b0da9cb18234a8874dc8b1f1f7ad", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "100\n Recipe 4-1. Extracting Noun Phrases\nIn this recipe, let us extract a noun phrase from the text data (a sentence or \nthe documents).\n Problem\nYou want to extract a noun phrase.\n Solution\nNoun Phrase extraction is important when you want to analyze the \u201cwho\u201d \nin a sentence. Let\u2019s see an example below using TextBlob.\n How It Works\nExecute the below code to extract noun phrases.\n#Import libraries\nimport nltk\nfrom textblob import TextBlob\n#Extract noun\nblob = TextBlob(\"John is learning natural language processing\")\nfor np in blob.noun_phrases:\n    print(np)\nOutput:\njohn\nnatural language processing\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 652, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4e4a5b9b-701b-4622-8971-6b52519b0fac": {"__data__": {"id_": "4e4a5b9b-701b-4622-8971-6b52519b0fac", "embedding": null, "metadata": {"page_label": "101", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "644f9537-32a2-477f-80ae-7e09816a87d6", "node_type": "4", "metadata": {"page_label": "101", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "65df3127c1fd2647ea39eefa261760e182e1b553a2b29ec59a92262f01305a03", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "101\n Recipe 4-2. Finding Similarity \nBetween\u00a0Texts\nIn this recipe, we are going to discuss how to find the similarity between \ntwo documents or text. There are many similarity metrics like Euclidian, \ncosine, Jaccard, etc. Applications of text similarity can be found in areas \nlike spelling correction and data deduplication.\nHere are a few of the similarity measures:\nCosine similarity: Calculates the cosine of the angle \nbetween the two vectors.\nJaccard similarity: The score is calculated using the \nintersection or union of words.\nJaccard Index = (the number in both sets) / (the \nnumber in either set) * 100.\nLevenshtein distance: Minimal number of \ninsertions, deletions, and replacements required for \ntransforming string \u201ca\u201d into string \u201cb. \u201d\nHamming distance: Number of positions with the \nsame symbol in both strings. But it can be defined \nonly for strings with equal length.\n Problem\nYou want to find the similarity between texts/documents.\n Solution\nThe simplest way to do this is by using cosine similarity from the sklearn \nlibrary.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1097, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4fe38eb5-9d5f-49dc-9313-b6a11d479b3e": {"__data__": {"id_": "4fe38eb5-9d5f-49dc-9313-b6a11d479b3e", "embedding": null, "metadata": {"page_label": "102", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7d62600d-d939-4f9f-8faa-6b58249421c1", "node_type": "4", "metadata": {"page_label": "102", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3e3b454978d1ab03b4dcfe0e3d2261bc8fc6081849fe38aa3bd5765ea6bb7a72", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "102\n How It Works\nLet\u2019s follow the steps in this section to compute the similarity score \nbetween text documents.\n Step 2-1 Create/read the\u00a0text data\nHere is the data:\ndocuments = (\n\"I like NLP\",\n\"I am exploring NLP\",\n\"I am a beginner in NLP\",\n\"I want to learn NLP\",\n\"I like advanced NLP\"\n)\n Step 2-2 Find the\u00a0similarity\nExecute the below code to find the similarity.\n#Import libraries\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n#Compute tfidf : feature engineering(refer previous chapter \u2013 \nRecipe 3-4)\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_matrix = tfidf_vectorizer.fit_transform(documents)\ntfidf_matrix.shape\n#output\n(5, 10)\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 752, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0e1b5ff4-efa2-484b-8025-3ecf5ceb92de": {"__data__": {"id_": "0e1b5ff4-efa2-484b-8025-3ecf5ceb92de", "embedding": null, "metadata": {"page_label": "103", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "485b9608-28cb-464b-934c-5041986ea7e7", "node_type": "4", "metadata": {"page_label": "103", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b73e320bdc468e292634894d7212f307cdff27a39dbaa7381076628a9cc93f88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "103\n#compute similarity for first sentence with rest of the sentences\ncosine_similarity(tfidf_matrix[0:1],tfidf_matrix)\n#output\narray([[ 1.       ,  0.17682765,  0.14284054,  0.13489366,   \n0.68374784]])\nIf we clearly observe, the first sentence and last sentence have higher \nsimilarity compared to the rest of the sentences.\n Phonetic matching\nThe next version of similarity checking is phonetic matching, which roughly \nmatches the two words or sentences and also creates an alphanumeric \nstring as an encoded version of the text or word. It is very useful for searching \nlarge text corpora, correcting spelling errors, and matching relevant names. \nSoundex and Metaphone are two main phonetic algorithms used for this \npurpose. The simplest way to do this is by using the fuzzy library.\n 1. Install and import the library\n!pip install fuzzy\nimport fuzzy\n 2. Run the Soundex function\nsoundex = fuzzy.Soundex(4)\n 3. Generate the phonetic form\nsoundex('natural')\n#output\n'N364'\nsoundex('natuaral')\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1046, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "29d47020-12aa-432d-b7ef-b0fc6d667cae": {"__data__": {"id_": "29d47020-12aa-432d-b7ef-b0fc6d667cae", "embedding": null, "metadata": {"page_label": "104", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4bf828a-a92d-4c7e-b481-737298f2415e", "node_type": "4", "metadata": {"page_label": "104", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "cfbf20d101ef4afefec67a23737d3639ed809b2a5e26e8bd8fc1dba24f947290", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "104\n#output\n'N364'\nsoundex('language')\n#output\n'L52'\nsoundex('processing')\n#output\n'P625'\nSoundex is treating \u201cnatural\u201d and \u201cnatuaral\u201d as the same, and the \nphonetic code for both of the strings is \u201cN364. \u201d And for \u201clanguage\u201d and \n\u201cprocessing, \u201d it is \u201cL52\u201d and \u201cP625\u201d respectively.\n Recipe 4-3. Tagging Part of\u00a0Speech\nPart of speech (POS) tagging is another crucial part of natural language \nprocessing that involves labeling the words with a part of speech such as \nnoun, verb, adjective, etc. POS is the base for Named Entity Resolution, \nSentiment Analysis, Question Answering, and Word Sense Disambiguation.\n Problem\nTagging the parts of speech for a sentence.\n Solution\nThere are 2 ways a tagger can be built.\n\u2022 Rule based\u00a0- Rules created manually, which tag a word \nbelonging to a particular POS.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 851, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "90bd1a87-864b-4456-a782-32ea552c7d8a": {"__data__": {"id_": "90bd1a87-864b-4456-a782-32ea552c7d8a", "embedding": null, "metadata": {"page_label": "105", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4460a739-0778-48fb-9264-d1d47973cb8e", "node_type": "4", "metadata": {"page_label": "105", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c6cfb1ad51627c3c562ad90925577d3f668c485ce6417d52c99a86e2189b2b63", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "105\n\u2022 Stochastic based\u00a0- These algorithms capture the \nsequence of the words and tag the probability of the \nsequence using hidden Markov models.\n How It Works\nAgain, NLTK has the best POS tagging module. nltk.pos_tag(word) is the \nfunction that will generate the POS tagging for any given word. Use for loop \nand generate POS for all the words present in the document.\n Step 3-1 Store the\u00a0text in\u00a0a\u00a0variable\nHere is the variable:\nText  =  \"I love NLP and I will learn NLP in 2 month\"\n Step 3-2 NLTK for\u00a0POS\nNow the code:\n# Importing necessary packages and stopwords\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nstop_words = set(stopwords.words('english'))\n# Tokenize the text\ntokens = sent_tokenize(text)\n#Generate tagging for all the tokens using loop\nfor i in tokens:\n    words = nltk.word_tokenize(i)\n    words = [w for w in words if not w in stop_words]\n    #  POS-tagger.\n    tags = nltk.pos_tag(words)\ntags\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1017, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a2ee67ab-a0f7-430f-bc85-494083f7b9e4": {"__data__": {"id_": "a2ee67ab-a0f7-430f-bc85-494083f7b9e4", "embedding": null, "metadata": {"page_label": "106", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b51da2c0-5a1d-4a8a-bd75-b7badb4fb94a", "node_type": "4", "metadata": {"page_label": "106", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "4176403a3790ba10bba298bd8bd73ad01117d45cfabdfe1637b3838a8fe8e6be", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "106\nResults:\n[('I', 'PRP'),\n ('love', 'VBP'),\n ('NLP', 'NNP'),\n ('I', 'PRP'),\n ('learn', 'VBP'),\n ('NLP', 'RB'),\n ('2month', 'CD')]\nBelow are the short forms and explanation of POS tagging. The word \n\u201clove\u201d is VBP , which means verb, sing. present, non-3d take.\n\u2022 CC coordinating conjunction\n\u2022 CD cardinal digit\n\u2022 DT determiner\n\u2022 EX existential there (like: \u201cthere is\u201d ... think of it like \n\u201cthere exists\u201d)\n\u2022 FW foreign word\n\u2022 IN preposition/subordinating conjunction\n\u2022 JJ adjective \u2018big\u2019\n\u2022 JJR adjective, comparative \u2018bigger\u2019\n\u2022 JJS adjective, superlative \u2018biggest\u2019\n\u2022 LS list marker 1)\n\u2022 MD modal could, will\n\u2022 NN noun, singular \u2018desk\u2019\n\u2022 NNS noun plural \u2018desks\u2019\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 709, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e07f7beb-53c7-404f-a1ea-b93095af99b9": {"__data__": {"id_": "e07f7beb-53c7-404f-a1ea-b93095af99b9", "embedding": null, "metadata": {"page_label": "107", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cbc270dd-7139-43fd-a2e5-6ffad0c7d0c4", "node_type": "4", "metadata": {"page_label": "107", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "950e9ffe4abad87b79e6f1843fe4d34d78096ef22262971e4c17efa21b0911d6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "107\n\u2022 NNP proper noun, singular \u2018Harrison\u2019\n\u2022 NNPS proper noun, plural \u2018 Americans\u2019\n\u2022 PDT predeterminer \u2018all the kids\u2019\n\u2022 POS possessive ending parent\u2019s\n\u2022 PRP personal pronoun I, he, she\n\u2022 PRP$ possessive pronoun my, his, hers\n\u2022 RB adverb very, silently\n\u2022 RBR adverb, comparative better\n\u2022 RBS adverb, superlative best\n\u2022 RP particle give up\n\u2022 TO to go \u2018to\u2019 the store\n\u2022 UH interjection\n\u2022 VB verb, base form take\n\u2022 VBD verb, past tense took\n\u2022 VBG verb, gerund/present participle taking\n\u2022 VBN verb, past participle taken\n\u2022 VBP verb, sing. present, non-3d take\n\u2022 VBZ verb, 3rd person sing. present takes\n\u2022 WDT wh-determiner which\n\u2022 WP wh-pronoun who, what\n\u2022 WP$ possessive wh-pronoun whose\n\u2022 WRB wh-adverb where, when\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 758, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fa333f01-83a8-4516-9024-44eab8154b51": {"__data__": {"id_": "fa333f01-83a8-4516-9024-44eab8154b51", "embedding": null, "metadata": {"page_label": "108", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e7d8348-072d-42d8-a6ed-fa6c06bed413", "node_type": "4", "metadata": {"page_label": "108", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "979b2c5915853e68daff0f59b00ccf3671006628f965880c7dbecdfd477271c0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "108\n Recipe 4-4. Extract Entities from\u00a0Text\nIn this recipe, we are going to discuss how to identify and extract entities \nfrom the text, called Named Entity Recognition. There are multiple \nlibraries to perform this task like NLTK chunker, StanfordNER, SpaCy, \nopennlp, and NeuroNER; and there are a lot of APIs also like WatsonNLU, \nAlchemyAPI, NERD, Google Cloud NLP API, and many more.\n Problem\nYou want to identify and extract entities from the text.\n Solution\nThe simplest way to do this is by using the ne_chunk from NLTK or SpaCy.\n How It Works\nLet\u2019s follow the steps in this section to perform NER.\n Step 4-1 Read/create the\u00a0text data\nHere is the text:\nsent = \"John is studying at Stanford University in California\"\n Step 4-2 Extract the\u00a0entities\nExecute the below code.\nUsing NLTK\n#import libraries\nimport nltk\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 867, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d46f6800-8708-4d49-9c00-5084dacb4d8b": {"__data__": {"id_": "d46f6800-8708-4d49-9c00-5084dacb4d8b", "embedding": null, "metadata": {"page_label": "109", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f1a1ef5-fd8b-404f-930a-079a6d2c9193", "node_type": "4", "metadata": {"page_label": "109", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c2523c6df78e1f0e53f26fa0023b1d9120ad5a9b9a7080ccbb41824043ee064a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "109\nfrom nltk import ne_chunk\nfrom nltk import word_tokenize\n#NER\nne_chunk(nltk.pos_tag(word_tokenize(sent)), binary=False)\n#output\nTree('S', [Tree('PERSON', [('John', 'NNP')]), ('is', 'VBZ'), \n('studying', 'VBG'), ('at', 'IN'), Tree('ORGANIZATION', \n[('Stanford', 'NNP'), ('University', 'NNP')]), ('in', 'IN'), \nTree('GPE', [('California', 'NNP')])])\nHere \"John\" is tagged as \"PERSON\"\n\"Stanford\" as \"ORGANIZATION\"\n\"California\" as \"GPE\". Geopolitical entity, i.e. countries, \ncities, states.\nUsing SpaCy\nimport spacy\nnlp = spacy.load('en')\n# Read/create a sentence\ndoc = nlp(u'Apple is ready to launch new phone worth $10000 in \nNew york time square ')\nfor ent in doc.ents:\n   print(ent.text, ent.start_char, ent.end_char, ent.label_)\n#output\nApple 0 5 ORG\n10000 42 47 MONEY\nNew york 51 59 GPE\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 841, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "529ca347-f0c4-4c4e-b1a0-36fceb78c978": {"__data__": {"id_": "529ca347-f0c4-4c4e-b1a0-36fceb78c978", "embedding": null, "metadata": {"page_label": "110", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9fe96171-9e83-4d7c-9e9a-4a11b1f1cb2b", "node_type": "4", "metadata": {"page_label": "110", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "0e7519af3a508a70cba91682c442e776fa2e7b3c2de25af7adbb76566c711f55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "110\nAccording to the output, Apple is an organization, 10000 is money, and \nNew\u00a0York is place. The results are accurate and can be used for any NLP \napplications.\n Recipe 4-5. Extracting Topics from\u00a0Text\nIn this recipe, we are going to discuss how to identify topics from the \ndocument. Say, for example, there is an online library with multiple \ndepartments based on the kind of book. As the new book comes in, \nyou want to look at the unique keywords/topics and decide on which \ndepartment this book might belong to and place it accordingly. In these \nkinds of situations, topic modeling would be handy.\nBasically, this is document tagging and clustering.\n Problem\nYou want to extract or identify topics from the document.\n Solution\nThe simplest way to do this by using the gensim library.\n How It Works\nLet\u2019s follow the steps in this section to identify topics within documents \nusing genism.\n Step 5-1 Create the\u00a0text data\nHere is the text:\ndoc1 = \"I am learning NLP, it is very interesting and exciting. \nit includes machine learning and deep learning\"\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1105, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5b4ba3ea-c114-46d4-8a7f-fccf6f4290bc": {"__data__": {"id_": "5b4ba3ea-c114-46d4-8a7f-fccf6f4290bc", "embedding": null, "metadata": {"page_label": "111", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a0635607-1f7c-4d33-a2ec-a5f127f6fbb8", "node_type": "4", "metadata": {"page_label": "111", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "812affa16becf2277855f9df19c7dfccf30e5f29fdf2edc1462d2886ed356841", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "111\ndoc2 = \"My father is a data scientist and he is nlp expert\"\ndoc3 = \"My sister has good exposure into android development\"\ndoc_complete = [doc1, doc2, doc3]\ndoc_complete\n#output\n['I am learning NLP, it is very interesting and exciting. it \nincludes machine learning and deep learning',\n 'My father is a data scientist and he is nlp expert',\n 'My sister has good exposure into android development']\n Step 5-2 Cleaning and\u00a0preprocessing\nNext, we clean it up:\n# Install and import libraries\n!pip install gensim\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\nimport string\n# Text preprocessing as discussed in chapter 2\nstop = set(stopwords.words('english'))\nexclude = set(string.punctuation)\nlemma = WordNetLemmatizer()\ndef clean(doc):\n    stop_free =  \" \".join([i for i in doc.lower().split()  \nif i not in stop])\n    punc_free =  \".join(ch for ch in stop_free if ch not in \nexclude)\n    normalized =  \" \".join(lemma.lemmatize(word) for word in \npunc_free.split())\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1048, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1843d43d-2835-4e5b-b853-a7b6ededdbee": {"__data__": {"id_": "1843d43d-2835-4e5b-b853-a7b6ededdbee", "embedding": null, "metadata": {"page_label": "112", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ffed1bb5-ae2c-4b88-85a5-e7eacd4f1f2d", "node_type": "4", "metadata": {"page_label": "112", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3867fef354dc7425fb947ced4e3a94fe1849c6d244ee173b9d87cbf5e4dc1a9a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "112\n    return normalized\ndoc_clean = [clean(doc).split() for doc in doc_complete]\ndoc_clean\n#output\n[['learning',\n  'nlp',\n  'interesting',\n  'exciting',\n  'includes',\n  'machine',\n  'learning',\n  'deep',\n  'learning'],\n ['father', 'data', 'scientist', 'nlp', 'expert'],\n ['sister', 'good', 'exposure', 'android', 'development']]\n Step 5-3 Preparing document term matrix\nThe code is below:\n# Importing gensim\nimport gensim\nfrom gensim import corpora\n# Creating the term dictionary of our corpus, where every \nunique term is assigned an index.\ndictionary = corpora.Dictionary(doc_clean)\n# Converting a list of documents (corpus) into Document-Term \nMatrix using dictionary prepared above.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 736, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0d2b8f11-ba66-435c-b982-8e848c58a126": {"__data__": {"id_": "0d2b8f11-ba66-435c-b982-8e848c58a126", "embedding": null, "metadata": {"page_label": "113", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab83186c-6632-4aa1-bd4d-4886df9713f0", "node_type": "4", "metadata": {"page_label": "113", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "20af0e06546f6195ea2543ef96c395115864b3082ce9539aae0fa42fd1d9e330", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "113\ndoc_term_matrix = [dictionary.doc2bow(doc) for doc in doc_clean]\ndoc_term_matrix\n#output\n[[(0, 1), (1, 1), (2, 1), (3, 1), (4, 3), (5, 1), (6, 1)],\n [(6, 1), (7, 1), (8, 1), (9, 1), (10, 1)],\n [(11, 1), (12, 1), (13, 1), (14, 1), (15, 1)]]\n Step 5-4 LDA model\nThe final part is to create the LDA model:\n# Creating the object for LDA model using gensim library\nLda = gensim.models.ldamodel.LdaModel\n# Running and Training LDA model on the document term matrix \nfor 3 topics.\nldamodel = Lda(doc_term_matrix, num_topics=3, id2word = \ndictionary, passes=50)\n# Results\nprint(ldamodel.print_topics())\n#output\n[(0, '0.063*\"nlp\" + 0.063*\"father\" + 0.063*\"data\" + \n0.063*\"scientist\" + 0.063*\"expert\" + 0.063*\"good\" + \n0.063*\"exposure\" + 0.063*\"development\" + 0.063*\"android\" +  \n0.063*\"sister\"'), (1, '0.232*\"learning\" + 0.093*\"nlp\" + \n0.093*\"deep\" + 0.093*\"includes\" + 0.093*\"interesting\" + \n0.093*\"machine\" + 0.093*\"exciting\" + 0.023*\"scientist\" +  \n0.023*\"data\" + 0.023*\"father\"'), (2, '0.087*\"sister\" + \n0.087*\"good\" + 0.087*\"exposure\" + 0.087*\"development\" + \n0.087*\"android\" + 0.087*\"father\" + 0.087*\"scientist\" + \n0.087*\"data\" + 0.087*\"expert\" + 0.087*\"nlp\"')]\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1210, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4961bdab-bed5-4829-9a62-ef395ec2ce28": {"__data__": {"id_": "4961bdab-bed5-4829-9a62-ef395ec2ce28", "embedding": null, "metadata": {"page_label": "114", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ced2817d-3870-49c2-b564-aa634cfbdbba", "node_type": "4", "metadata": {"page_label": "114", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ac65006dbf96027d6f02cd3ab3af959b1951468d11c5635e4e38b9ec4526a2d0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "114\nAll the weights associated with the topics from the sentence seem \nalmost similar. You can perform this on huge data to extract significant \ntopics. The whole idea to implement this on sample data is to make you \nfamiliar with it, and you can use the same code snippet to perform on the \nhuge data for significant results and insights.\n Recipe 4-6. Classifying Text\nText classification\u00a0\u2013 The aim of text classification is to automatically classify \nthe text documents based on pretrained categories.\nApplications:\n\u2022 Sentiment Analysis\n\u2022 Document classification\n\u2022 Spam\u00a0\u2013 ham mail classification\n\u2022 Resume shortlisting\n\u2022 Document summarization\n Problem\nSpam\u00a0- ham classification using machine learning.\n Solution\nIf you observe, your Gmail has a folder called \u201cSpam. \u201d It will basically \nclassify your emails into spam and ham so that you don\u2019t have to read \nunnecessary emails.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 927, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "54472170-0995-4d87-8725-7cf5495df154": {"__data__": {"id_": "54472170-0995-4d87-8725-7cf5495df154", "embedding": null, "metadata": {"page_label": "115", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ccfae469-3d91-4fbd-a091-c9bc4d364198", "node_type": "4", "metadata": {"page_label": "115", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "8e580494d52955969aeaddcd289c2aa15fa7eb5d1be4a8cbb9a43ee50a1c1064", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "115\n How It Works\nLet\u2019s follow the step-by-step method to build the classifier.\n Step 6-1 Data collection and\u00a0understanding\nPlease download data from the below link and save it in your working \ndirectory:\nhttps://www.kaggle.com/uciml/sms-spam-collection- dataset#spam.csv\n#Read the data\nEmail_Data = pd.read_csv(\"spam.csv\",encoding ='latin1')\n#Data undestanding\nEmail_Data.columns\n#output\nIndex(['v1', 'v2', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], \ndtype='object')\nEmail_Data = Email_Data[['v1', 'v2']]\nEmail_Data = Email_Data.rename(columns={\"v1\":\"Target\", \n\"v2\":\"Email\"})\nEmail_Data.head()\n#output\n    Target   Email\n0      ham   Go until jurong point, crazy.. Available only ...\n1      ham   Ok lar... Joking wif u oni...\n2      spam  Free entry in 2 a wkly comp to win FA Cup fina...\n3      ham   U dun say so early hor... U c already then say...\n4      ham   Nah I don't think he goes to usf, he lives aro...\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 964, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "683c7e01-5423-442a-9e01-d9dfdb4c0534": {"__data__": {"id_": "683c7e01-5423-442a-9e01-d9dfdb4c0534", "embedding": null, "metadata": {"page_label": "116", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5604b322-4d05-4472-832b-f5bd0b703a68", "node_type": "4", "metadata": {"page_label": "116", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1263661c711d6101296e8180c26f60b2b80348d1e2b3c78890d3a56cd5d68102", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "116\n Step 6-2 Text processing and\u00a0feature engineering\nThe code is below:\n#import\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport string\nfrom nltk.stem import SnowballStemmer\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nimport os\nfrom textblob import TextBlob\nfrom nltk.stem import PorterStemmer\nfrom textblob import Word\nfrom sklearn.feature_extraction.text import CountVectorizer, \nTfidfVectorizer\nimport sklearn.feature_extraction.text as text\nfrom sklearn import model_selection, preprocessing, linear_\nmodel, naive_bayes, metrics, svm\n#pre processing steps like lower case, stemming and \nlemmatization\nEmail_Data['Email'] =  Email_Data['Email'].apply(lambda x:  \n\" \".join(x.lower() for x in x.split()))\nstop = stopwords.words('english')\nEmail_Data['Email'] =  Email_Data['Email'].apply(lambda x: \" \".join \n(x for x in x.split() if x not in stop))\nst = PorterStemmer()\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1051, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d85277e1-a0fe-4231-acf3-d6d1290f6e24": {"__data__": {"id_": "d85277e1-a0fe-4231-acf3-d6d1290f6e24", "embedding": null, "metadata": {"page_label": "117", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29b8969b-bbc9-4587-9ca4-bd340120a4aa", "node_type": "4", "metadata": {"page_label": "117", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "57b6ceb1d6b00f92df76a131b2c019037f30c62d9368fe3080acae5a352f3271", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "117\nEmail_Data['Email'] =  Email_Data['Email'].apply(lambda x: \" \".join \n([st.stem(word) for word in x.split()]))\nEmail_Data['Email'] =  Email_Data['Email'].apply(lambda x: \" \".join \n([Word(word).lemmatize() for word in \nx.split()]))\nEmail_Data.head()\n#output\n  Target                                              Email\n0    ham  go jurong point, crazy.. avail bugi n great wo...\n1    ham                        ok lar... joke wif u oni...\n2    spam free entri 2 wkli comp win fa cup final tkt 21...\n3    ham          u dun say earli hor... u c alreadi say...\n4    ham              nah think goe usf, live around though\n#Splitting data into train and validation\ntrain_x, valid_x, train_y, valid_y = model_selection.train_\ntest_split(Email_Data['Email'], Email_Data['Target'])\n# TFIDF feature generation for a maximum of 5000 features\nencoder = preprocessing.LabelEncoder()\ntrain_y = encoder.fit_transform(train_y)\nvalid_y = encoder.fit_transform(valid_y)\ntfidf_vect =  TfidfVectorizer(analyzer='word',  \ntoken_pattern=r'\\w{1,}', max_features=5000)\ntfidf_vect.fit(Email_Data['Email'])\nxtrain_tfidf =  tfidf_vect.transform(train_x)\nxvalid_tfidf =  tfidf_vect.transform(valid_x)\nxtrain_tfidf.data\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1241, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1ccb9ffb-7323-4053-8be4-1aca96656acc": {"__data__": {"id_": "1ccb9ffb-7323-4053-8be4-1aca96656acc", "embedding": null, "metadata": {"page_label": "118", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e01ad11f-a4e2-449d-95c0-530046007c6d", "node_type": "4", "metadata": {"page_label": "118", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "aa0d1a838b3ba1830f24b55ec44fd54626c11c27932a80de64e5751d9eb4f906", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "118\n#output\narray([0.39933971, 0.36719906, 0.60411187, ..., 0.36682939, \n0.30602539, 0.38290119])\n Step 6-3 Model training\nThis is the generalized function for training any given model:\ndef train_model(classifier, feature_vector_train, label, \nfeature_vector_valid, is_neural_net=False):\n    # fit the training dataset on the classifier\n    classifier.fit(feature_vector_train, label)\n    # predict the labels on validation dataset\n    predictions = classifier.predict(feature_vector_valid)\n    return metrics.accuracy_score(predictions, valid_y)\n# Naive Bayes trainig\naccuracy = train_model(naive_bayes.MultinomialNB(alpha=0.2), \nxtrain_tfidf, train_y, xvalid_tfidf)\nprint (\"Accuracy: \", accuracy)\n#output\nAccuracy:  0.985642498205\n# Linear Classifier on Word Level TF IDF Vectors\naccuracy =  train_model(linear_model.LogisticRegression(), \nxtrain_tfidf, train_y, xvalid_tfidf)\nprint (\"Accuracy: \", accuracy)\n#output\nAccuracy:  0.970567121321\nNaive Bayes is giving better results than the linear classifier. We can try \nmany more classifiers and then choose the best one.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1120, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bf557c95-b2e1-4fbd-9164-52ddc53fa175": {"__data__": {"id_": "bf557c95-b2e1-4fbd-9164-52ddc53fa175", "embedding": null, "metadata": {"page_label": "119", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19fdb505-cef2-42fe-b064-95ec8a4fbea6", "node_type": "4", "metadata": {"page_label": "119", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e69928f5b2bdede89ebd2f8f2206abccd9213363a0e2f4a42d1499bc677db80f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "119\n Recipe 4-7. Carrying Out\u00a0Sentiment \nAnalysis\nIn this recipe, we are going to discuss how to understand the sentiment of \na particular sentence or statement. Sentiment analysis is one of the widely \nused techniques across the industries to understand the sentiments of the \ncustomers/users around the products/services. Sentiment analysis gives \nthe sentiment score of a sentence/statement tending toward positive or \nnegative.\n Problem\nYou want to do a sentiment analysis.\n Solution\nThe simplest way to do this by using a TextBlob or vedar library.\n How It Works\nLet\u2019s follow the steps in this section to do sentiment analysis using \nTextBlob. It will basically give 2 metrics.\n\u2022 Polarity = Polarity lies in the range of [-1,1] where 1 \nmeans a positive statement and -1 means a negative \nstatement.\n\u2022 Subjectivity = Subjectivity refers that mostly it is a \npublic opinion and not factual information [0,1].\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 960, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3e0b29a1-1bef-4580-9eda-0895cffdacc4": {"__data__": {"id_": "3e0b29a1-1bef-4580-9eda-0895cffdacc4", "embedding": null, "metadata": {"page_label": "120", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "060230c5-bb69-44af-9482-05c8f2bf7dc0", "node_type": "4", "metadata": {"page_label": "120", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b84bed86d09044d496e65e204842f08ad56a6b50bc845b4f33a1ca2c5a86ecd5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "120\n Step 7-1 Create the\u00a0sample data\nHere is the sample data:\nreview =  \"I like this phone. screen quality and camera clarity \nis really good.\"\nreview2 =  \"This tv is not good. Bad quality, no clarity, worst \nexperience\"\n Step 7-2 Cleaning and\u00a0preprocessing\nRefer to Chapter 2, Recipe 2-10, for this step.\n Step 7-3 Get the\u00a0sentiment scores\nUsing a pretrained model from TextBlob to get the sentiment scores:\n#import libraries\nfrom textblob import TextBlob\n#TextBlob has a pre trained sentiment prediction model\nblob = TextBlob(review)\nblob.sentiment\n#output\nSentiment(polarity=0.7, subjectivity=0.6000000000000001)\nIt seems like a very positive review.\n#now lets look at the sentiment of review2\nblob = TextBlob(review2)\nblob.sentiment\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 784, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "31f5b185-dbc0-4ab6-8404-9cb5807b58b8": {"__data__": {"id_": "31f5b185-dbc0-4ab6-8404-9cb5807b58b8", "embedding": null, "metadata": {"page_label": "121", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c6984aa-dcb3-4469-9379-1d2922949b40", "node_type": "4", "metadata": {"page_label": "121", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "4606944deab68f5f593c4a7d83bd4980c3c055800f337659b86f8abd8786a0a4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "121\n#output\nSentiment(polarity=-0.6833333333333332, \nsubjectivity=0.7555555555555555)\nThis is a negative review, as the polarity is \u201c-0.68. \u201d\nNote: We will cover a one real-time use case on sentiment analysis with \nan end-to-end implementation in the next chapter, Recipe 5-2.\n Recipe 4-8. Disambiguating Text\nThere is ambiguity that arises due to a different meaning of words in a \ndifferent context.\nFor example,\nText1 = 'I went to the bank to deposit my money'\nText2 = 'The river bank was full of dead fishes'\nIn the above texts, the word \u201cbank\u201d has different meanings based on \nthe context of the sentence.\n Problem\nUnderstanding disambiguating word sense.\n Solution\nThe Lesk algorithm is one of the best algorithms for word sense \ndisambiguation. Let\u2019s see how to solve using the package pywsd and nltk.\n How It Works\nBelow are the steps to achieve the results.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 914, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "bab65dbe-8491-43a1-be0f-b76fafb8bda0": {"__data__": {"id_": "bab65dbe-8491-43a1-be0f-b76fafb8bda0", "embedding": null, "metadata": {"page_label": "122", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7d74deb-ec9c-485a-8a92-9b8ed8b821bf", "node_type": "4", "metadata": {"page_label": "122", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "03da3d8bac87064d2c36a9a9699afbf8fdedf29e6a02051a9c6009d581c22814", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "122\n Step 8-1 Import libraries\nFirst, import the libraries:\n#Install pywsd\n!pip install pywsd\n#Import functions\nfrom nltk.corpus import wordnet as wn\nfrom nltk.stem import PorterStemmer\nfrom itertools import chain\nfrom pywsd.lesk import simple_lesk\n Step 8-2 Disambiguating word sense\nNow the code:\n# Sentences\nbank_sents = ['I went to the bank to deposit my money',\n'The river bank was full of dead fishes']\n# calling the lesk function and printing results for both the \nsentences\nprint (\"Context-1:\", bank_sents[0])\nanswer = simple_lesk(bank_sents[0],'bank')\nprint (\"Sense:\", answer)\nprint (\"Definition : \", answer.definition())\nprint (\"Context-2:\", bank_sents[1])\nanswer = simple_lesk(bank_sents[1],'bank','n')\nprint (\"Sense:\", answer)\nprint (\"Definition : \", answer.definition())\n#Result:\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 840, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "57a257b9-9dde-4bed-99c9-fc3935fe226a": {"__data__": {"id_": "57a257b9-9dde-4bed-99c9-fc3935fe226a", "embedding": null, "metadata": {"page_label": "123", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ab223abb-0a7b-4d84-8b80-a5568c3f01ff", "node_type": "4", "metadata": {"page_label": "123", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a09713fcc2088347b1b5ccb019a22530a67e9057a4f206adf2e930f3e3004ea8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "123\nContext-1: I went to the bank to deposit my money\nSense: Synset('depository_financial_institution.n.01')\nDefinition :  a financial institution that accepts deposits and \nchannels the money into lending activities\nContext-2: The river bank was full of dead fishes\nSense: Synset('bank.n.01')\nDefinition :  sloping land (especially the slope beside a body \nof water)\nObserve that in context-1, \u201cbank\u201d is a financial institution, but in \ncontext-2, \u201cbank\u201d is sloping land.\n Recipe 4-9. Converting Speech to\u00a0Text\nConverting speech to text is a very useful NLP technique.\n Problem\nYou want to convert speech to text.\n Solution\nThe simplest way to do this by using Speech Recognition and PyAudio.\n How It Works\nLet\u2019s follow the steps in this section to implement speech to text.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 823, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e9db37bf-772c-41c0-8fd9-46e65ee447aa": {"__data__": {"id_": "e9db37bf-772c-41c0-8fd9-46e65ee447aa", "embedding": null, "metadata": {"page_label": "124", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd494963-ecb2-44a3-bc31-847820c68b00", "node_type": "4", "metadata": {"page_label": "124", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "82202b53ee7893f180e05f43dc9e78dd481a88ff01f17c52a779656bd10db532", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "124\n Step 9-1 Understanding/defining business problem\nInteraction with machines is trending toward the voice, which is the usual \nway of human communication. Popular examples are Siri, Alexa\u2019s Google \nVoice, etc.\n Step 9-2 Install and\u00a0import necessary libraries\nHere are the libraries:\n!pip install SpeechRecognition\n!pip install PyAudio\nimport speech_recognition as sr\n Step 9-3 Run below code\nNow after you run the below code snippet, whatever you say on the \nmicrophone (using recognize_google function) gets converted into text.\nr=sr.Recognizer()\nwith sr.Microphone() as source:\n    print(\"Please say something\")\n    audio = r.listen(source)\n    print(\"Time over, thanks\")\ntry:\n    print(\"I think you said: \"+r.recognize_google(audio));\nexcept:\n    pass;\n#output\nPlease say something\nTime over, thanks\nI think you said: I am learning natural language processing\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 913, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8ecacdcf-30c8-41de-b9ba-86f15e672e36": {"__data__": {"id_": "8ecacdcf-30c8-41de-b9ba-86f15e672e36", "embedding": null, "metadata": {"page_label": "125", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a75e0141-1417-4abe-bdc7-70413e55316d", "node_type": "4", "metadata": {"page_label": "125", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "79a6525d9b6c2200644eeeaef27de9068b13f08b9945d09f5c68e80444aaef88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "125\nThis code works with the default language \u201cEnglish. \u201d If you speak in \nany other language, for example Hindi, the text is interpreted in the form of \nEnglish, like as below:\n#code snippet\nr=sr.Recognizer()\nwith sr.Microphone() as source:\n    print(\"Please say something\")\n    audio = r.listen(source)\n    print(\"Time over, thanks\")\ntry:\n    print(\"I think you said: \"+r.recognize_google(audio));\nexcept:\n    pass;\n#output\nPlease say something\nTime over, thanks\nI think you said: aapka naam kya hai\nIf you want the text in the spoken language, please run the below code \nsnippet. Where we have made the minor change is in the recognize_\ngoogle \u2013language(\u2018hi-IN\u2019 , which means Hindi).\n#code snippet\nr=sr.Recognizer()\nwith sr.Microphone() as source:\n    print(\"Please say something\")\n    audio = r.listen(source)\n    print(\"Time over, thanks\")\ntry:\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 897, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4cb8438d-c313-4be3-85c5-8936e7bdeb0b": {"__data__": {"id_": "4cb8438d-c313-4be3-85c5-8936e7bdeb0b", "embedding": null, "metadata": {"page_label": "126", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f23b9acb-eeaa-4513-9340-9a21ed6954d0", "node_type": "4", "metadata": {"page_label": "126", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "eb99c3bc21aeede375c3dc4554d348e827bad16eba62051d02b13f2363f6ba55", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "126\n     print(\"I think you said: \"+r.recognize_google(audio, \nlanguage ='hi-IN'));\nexcept sr.UnknownValueError:\n    print(\"Google Speech Recognition could not understand audio\")\nexcept sr.RequestError as e:\n     print(\"Could not request results from Google Speech \nRecognition service; {0}\".format(e))\nexcept:\n    pass;\n Recipe 4-10. Converting Text to\u00a0Speech\nConverting text to speech is another useful NLP technique.\n Problem\nYou want to convert text to speech.\n Solution\nThe simplest way to do this by using the gTTs library.\n How It Works\nLet\u2019s follow the steps in this section to implement text to speech.\n Step 10-1 Install and\u00a0import necessary libraries\nHere are the libraries:\n!pip install gTTS\nfrom gtts import gTTS\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 773, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d8aef747-500b-44e5-844d-182fceb1c53d": {"__data__": {"id_": "d8aef747-500b-44e5-844d-182fceb1c53d", "embedding": null, "metadata": {"page_label": "127", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3df6f536-ea22-4f2c-911c-02fbe7118229", "node_type": "4", "metadata": {"page_label": "127", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "578613f545d762899c4880d49cd39ed001ed85e6ac58bf265d80344924f4874d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "127\n Step 10-2 Run below code, gTTS function\nNow after you run the below code snippet, whatever you input in the text \nparameter gets converted into audio.\n#chooses the language, English('en')\nconvert = gTTS(text='I like this NLP book', lang='en', slow=False)\n# Saving the converted audio in a mp3 file named\nmyobj.save(\"audio.mp3\")\n#output\nPlease play the audio.mp3 file saved in your local machine to \nhear the audio.\n Recipe 4-11. Translating Speech\nLanguage detection and translation.\n Problem\nWhenever you try to analyze data from blogs that are hosted across the \nglobe, especially websites from countries like China, where Chinese is \nused predominantly, analyzing such data or performing NLP tasks on such \ndata would be difficult. That\u2019s where language translation comes to the \nrescue. You want to translate one language to another.\n Solution\nThe easiest way to do this by using the goslate library.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 957, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f664a0f8-d29a-47ef-a74a-b7beb706cbae": {"__data__": {"id_": "f664a0f8-d29a-47ef-a74a-b7beb706cbae", "embedding": null, "metadata": {"page_label": "128", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "72763741-b01d-481b-bd09-46f3899a78d3", "node_type": "4", "metadata": {"page_label": "128", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1fe70ddc8a244751dd74876d77e5675e4f90c725ad18577a1a9efa6c6961555b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "128\n How It Works\nLet\u2019s follow the steps in this section to implement language translation in \nPython.\n Step 11-1 Install and\u00a0import necessary libraries\nHere are the libraries:\n!pip install goslate\nimport goslate\n Step 11-2 Input text\nA simple phrase:\ntext = \"Bonjour le monde\"\n Step 11-3 Run goslate function\nThe translation function:\ngs = goslate.Goslate()\ntranslatedText = gs.translate(text,'en')\nprint(translatedText)\n#output\nHi world\nWell, it feels accomplished, isn\u2019t it? We have implemented so many \nadvanced NLP applications and techniques. That is not all folks; we \nhave a couple more interesting chapters ahead, where we will look at the \nindustrial applications around NLP , their solution approach, and end-to-\nend implementation.\nChapter 4  advanCed natural language proCessing", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 791, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "70b4213e-009c-42d8-a46a-ae72ffdf0991": {"__data__": {"id_": "70b4213e-009c-42d8-a46a-ae72ffdf0991", "embedding": null, "metadata": {"page_label": "129", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "714ec507-0896-44aa-ae89-0ec98ccea9a7", "node_type": "4", "metadata": {"page_label": "129", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "33bea2cfd9392288b044b426407adae1179217e13576da492deb437384d55410", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "129\u00a9 Akshay Kulkarni and Adarsha Shivananda 2019 \nA. Kulkarni and A. Shivananda, Natural Language Processing Recipes,  \nhttps://doi.org/10.1007/978-1-4842-4267-4_5\nCHAPTER 5\nImplementing \nIndustry Applications\nIn this chapter, we are going to implement end-to-end solutions for a few \nof the Industry applications around NLP .\nRecipe 1. Consumer complaint classification\nRecipe 2. Customer reviews sentiment prediction\nRecipe 3. Data stitching using record linkage\nRecipe 4. Text summarization for subject notes\nRecipe 5. Document clustering\nRecipe 6. Search engine and learning to rank\nWe believe that after 4 chapters, you are comfortable with the concepts \nof natural language processing and ready to solve business problems. Here \nwe need to keep all 4 chapters in mind and think of approaches to solve \nthese problems at hand. It can be one concept or a series of concepts that \nwill be leveraged to build applications.\nSo, let\u2019s go one by one and understand end-to-end implementation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 990, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f5ab5366-de8f-4197-adf2-a651294578fb": {"__data__": {"id_": "f5ab5366-de8f-4197-adf2-a651294578fb", "embedding": null, "metadata": {"page_label": "130", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8eb519ee-76cf-4db2-8954-a247818fdff6", "node_type": "4", "metadata": {"page_label": "130", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3ef51e2077c4dde88654c8297f00710d125f9a8639a23d74d5d1e74f67cae2ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "130\n Recipe 5-1. Implementing Multiclass \nClassification\nLet\u2019s understand how to do multiclass classification for text data in Python \nthrough solving Consumer complaint classifications for the finance \nindustry.\n Problem\nEach week the Consumer Financial Protection Bureau sends thousands \nof consumers\u2019 complaints about financial products and services to \ncompanies for a response. Classify those consumer complaints into the \nproduct category it belongs to using the description of the complaint.\n Solution\nThe goal of the project is to classify the complaint into a specific product \ncategory. Since it has multiple categories, it becomes a multiclass \nclassification that can be solved through many of the machine learning \nalgorithms.\nOnce the algorithm is in place, whenever there is a new complaint, \nwe can easily categorize it and can then be redirected to the concerned \nperson. This will save a lot of time because we are minimizing the human \nintervention to decide whom this complaint should go to.\n How It Works\nLet\u2019s explore the data and build classification problem using many \nmachine learning algorithms and see which one gives better results.\nChapter 5  Implement Ing Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1208, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "2697b7ab-0419-412b-8a2a-d6d98e95eb39": {"__data__": {"id_": "2697b7ab-0419-412b-8a2a-d6d98e95eb39", "embedding": null, "metadata": {"page_label": "131", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0fae4ee6-d962-4347-91a0-ebbf93d558e7", "node_type": "4", "metadata": {"page_label": "131", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "93cdf9e5a8454e060fd5d6e3b57f1fcc998eef4ee62f0d98c2a89bfb419534b6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "131\n Step 1-1 Getting the\u00a0data from\u00a0Kaggle\nGo to the below link and download the data.\nhttps://www.kaggle.com/subhassing/exploring-consumer-complaint-\ndata/data\n Step 1-2 Import the\u00a0libraries\nHere are the libraries:\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport string\nfrom nltk.stem import SnowballStemmer\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nimport os\nfrom textblob import TextBlob\nfrom nltk.stem import PorterStemmer\nfrom textblob import Word\nfrom sklearn.feature_extraction.text import CountVectorizer, \nTfidfVectorizer\nimport sklearn.feature_extraction.text as text\nfrom sklearn import model_selection, preprocessing,  \nlinear_model, naive_bayes, metrics, svm\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.model_selection import cross_val_score\nfrom io import StringIO\nimport seaborn as sns\nChapter 5  Implement Ing Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1135, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7e76f11a-3145-4750-ab0f-26311feede61": {"__data__": {"id_": "7e76f11a-3145-4750-ab0f-26311feede61", "embedding": null, "metadata": {"page_label": "132", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "de63a42e-6d58-4997-bfb3-e58ea11ce748", "node_type": "4", "metadata": {"page_label": "132", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "6cff30a67415cd1d0a8e8eae4c437fe0b2543f1e1817051cbeac1a75e69ebafc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "132\n Step 1-3 Importing the\u00a0data\nImport the data that was downloaded in the last step:\nData = pd.read_csv(\"/Consumer_Complaints.csv\",encoding='latin-1')\n Step 1-4 Data understanding\nLet\u2019s analyze the columns:\nData.dtypes\ndate_received                   object\nproduct                         object\nsub_product                     object\nissue                           object\nsub_issue                       object\nconsumer_complaint_narrative    object\ncompany_public_response         object\ncompany                         object\nstate                           object\nzipcode                         object\ntags                            object\nconsumer_consent_provided       object\nsubmitted_via                   object\ndate_sent_to_company            object\ncompany_response_to_consumer    object\ntimely_response                 object\nconsumer_disputed?              object\ncomplaint_id                     int64\n# Selecting required columns and rows\nData = Data[['product', 'consumer_complaint_narrative']]\nData = Data[pd.notnull(Data['consumer_complaint_narrative'])]\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1125, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c373532f-7d1f-4449-b395-08aa5b92fcdf": {"__data__": {"id_": "c373532f-7d1f-4449-b395-08aa5b92fcdf", "embedding": null, "metadata": {"page_label": "133", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "edf8e059-c964-4854-9887-ad2d6fecaeb8", "node_type": "4", "metadata": {"page_label": "133", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "eb4805131a577959c04930e0ab04645e8fb0f48129971bab9b7a14322425fee9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "133\n# See top 5 rows\nData.head()\n                product           consumer_complaint_narrative\n190126   Debt collection     XXXX has claimed I owe them {$27.00} \nfor XXXX ...\n190135     Consumer Loan     Due to inconsistencies in the amount \nowed that...\n190155          Mortgage     In XX/XX/XXXX my wages that I earned at \nmy job...\n190207          Mortgage     I have an open and current mortgage \nwith Chase...\n190208         Mortgage     XXXX was submitted XX/XX/XXXX. At the \ntime I s...\n# Factorizing the category column\nData['category_id'] = Data['product'].factorize()[0]\nData.head()\n                product    consumer_complaint_narrative   \\\n190126  Debt collection     XXXX has claimed I owe them {$27.00} \nfor XXXX ...\n190135    Consumer Loan     Due to inconsistencies in the amount \nowed that...\n        category_id\n190126            0\n190135            1\n# Check the distriution of complaints by category\nData.groupby('product').consumer_complaint_narrative.count()\nproduct\nBank account or service    5711\nConsumer Loan              3678\nCredit card                7929\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1132, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "13684e5a-92f3-47e4-8d6f-f2806c8546d9": {"__data__": {"id_": "13684e5a-92f3-47e4-8d6f-f2806c8546d9", "embedding": null, "metadata": {"page_label": "134", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e6b5dba8-d1c0-469d-a6a0-741a2c07027b", "node_type": "4", "metadata": {"page_label": "134", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "418a98e38c92d1cd933cafbdb98e65b7d6dcdf5f04ceb7e68f2f35d90fcd52f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "134\nCredit reporting           12526\nDebt collection            17552\nMoney transfers              666\nMortgage                   14919\nOther financial service      110\nPayday loan                  726\nPrepaid card                 861\nStudent loan                2128\n# Lets plot it and see\nfig = plt.figure(figsize=(8,6))\nData.groupby('product').consumer_complaint_narrative.count().\nplot.bar(ylim=0)\nplt.show()\n \nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 460, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb36edd4-c448-4460-8c1d-8cee4f2d7f9c": {"__data__": {"id_": "fb36edd4-c448-4460-8c1d-8cee4f2d7f9c", "embedding": null, "metadata": {"page_label": "135", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2a2aa94c-88fd-40f2-ad87-a232943b6fba", "node_type": "4", "metadata": {"page_label": "135", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "158f34035188070809542626f297af30beacb57b553f854b75873ae8ee46a462", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "135\nDebt collection and Mortgage have the highest number of complaints \nregistered.\n Step 1-5 Splitting the\u00a0data\nSplit the data into train and validation:\ntrain_x, valid_x, train_y, valid_y = model_selection.train_ \ntest_split(Data['consumer_complaint_narrative'], Data['product'])\n Step 1-6 Feature engineering using TF-IDF\nCreate TF-IDF vectors as we discussed in Chapter 3. Here we consider \nmaximum features to be 5000.\nencoder = preprocessing.LabelEncoder()\ntrain_y = encoder.fit_transform(train_y)\nvalid_y = encoder.fit_transform(valid_y)\ntfidf_vect = TfidfVectorizer(analyzer='word',  \ntoken_pattern=r'\\w{1,}', max_features=5000)\ntfidf_vect.fit(Data['consumer_complaint_narrative'])\nxtrain_tfidf =  tfidf_vect.transform(train_x)\nxvalid_tfidf =  tfidf_vect.transform(valid_x)\n Step 1-7 Model building and\u00a0evaluation\nSuppose we are building a linear classifier on word-level TF-IDF vectors. \nWe are using default hyper parameters for the classifier. Parameters can be \nchanged like C, max_iter, or solver to obtain better results.\nmodel = linear_model.LogisticRegression().fit(xtrain_tfidf, train_y)\n# Model summary\nLogisticRegression(C=1.0, class_weight=None, dual=False, fit_\nintercept=True,\nChapter 5  Implement Ing Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1245, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "08bfa745-9c8d-4302-9be5-f590ab3d2a72": {"__data__": {"id_": "08bfa745-9c8d-4302-9be5-f590ab3d2a72", "embedding": null, "metadata": {"page_label": "136", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aca5c4f3-1022-46d1-a90c-021ab4ab7129", "node_type": "4", "metadata": {"page_label": "136", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "676bb7bbafca0b4d622ed1d762b389a17e73bbc3b9ac44380260053167339b76", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "136\n           intercept_scaling=1, max_iter=100, multi_class='ovr', \nn_jobs=1,\n           penalty='l2', random_state=None, solver='liblinear', \ntol=0.0001,\n          verbose=0, warm_start=False)\n# Checking accuracy\naccuracy = metrics.accuracy_score(model.predict(xvalid_tfidf), \nvalid_y)\nprint (\"Accuracy: \", accuracy)\nAccuracy:  0.845048497186\n# Classification report\nprint(metrics.classification_report(valid_y, model.\npredict(xvalid_tfidf),target_names=Data['product'].unique()))\n                        precision    recall  f1-score   support\n        Debt collection    0.81      0.79      0.80       1414\n          Consumer Loan    0.81      0.56      0.66        942\n               Mortgage    0.80      0.82      0.81       1997\n            Credit card    0.85      0.85      0.85       3162\n       Credit reporting    0.82      0.90      0.86       4367\n           Student loan    0.77      0.48      0.59        151\n  Bank account or service    0.92      0.96      0.94       3717\n            Payday loan    0.00      0.00      0.00         26\n        Money transfers    0.76      0.23      0.35        172\nOther financial service    0.77      0.57      0.65        209\n           Prepaid card    0.92      0.76      0.83        545\n            avg / total    0.84      0.85      0.84      16702\n#confusion matrix\nconf_mat = confusion_matrix(valid_y, model.predict(xvalid_tfidf))\n# Vizualizing confusion matrix\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1466, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ad80c14c-5a84-4853-983e-714955aa6888": {"__data__": {"id_": "ad80c14c-5a84-4853-983e-714955aa6888", "embedding": null, "metadata": {"page_label": "137", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a94be88f-e238-4004-b88a-726eba5e0296", "node_type": "4", "metadata": {"page_label": "137", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "17e248a1056b48667a701377f183573855a8422b99037b4f6b2dbb09db1a2b9f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "137\ncategory_id_df = Data[['product', 'category_id']].drop_duplicates() \n.sort_values('category_id')\ncategory_to_id = dict(category_id_df.values)\nid_to_category = dict(category_id_df[['category_id', \n'product']].values)\nfig, ax = plt.subplots(figsize=(8,6))\nsns.heatmap(conf_mat, annot=True, fmt='d', cmap=\"BuPu\",\n             xticklabels=category_id_df[['product']].values, \nyticklabels=category_id_df[['product']].values)\nplt.ylabel('Actual')\nplt.xlabel('Predicted')\nplt.show()\n \nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 527, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b3b2ae06-6c94-40a8-9cea-0dc80c926587": {"__data__": {"id_": "b3b2ae06-6c94-40a8-9cea-0dc80c926587", "embedding": null, "metadata": {"page_label": "138", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5e3c7c6-c0e5-440b-82f5-44f6d2edb657", "node_type": "4", "metadata": {"page_label": "138", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "18ca52362ec240c888314a1b9a16e408e4592226bcde3f03e8f9cd9dc82da91d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "138\nThe accuracy of 85% is good for a baseline model. Precision and recall \nlook pretty good across the categories except for \u201cPayday loan. \u201d If you look \nfor Payload loan, most of the wrong predictions are Debt collection and \nCredit card, which might be because of the smaller number of samples in \nthat category. It also sounds like it\u2019s a subcategory of a credit card. We can \nadd these samples to any other group to make the model more stable. Let\u2019s \nsee what prediction looks like for one example.\n# Prediction example\ntexts =  [\"This company refuses to provide me verification and \nvalidation of debt\"+ \"per my right under the FDCPA.  \nI do not believe this debt is mine.\"]\ntext_features = tfidf_vect.transform(texts)\npredictions = model.predict(text_features)\nprint(texts)\nprint(\"  - Predicted as: '{}'\".format(id_to_\ncategory[predictions[0]]))\nResult :\n['This company refuses to provide me verification and \nvalidation of debtper my right under the FDCPA. I do not \nbelieve this debt is mine.']\n  - Predicted as: 'Credit reporting'\nTo increase the accuracy, we can do the following things:\n\u2022 Reiterate the process with different algorithms like \nRandom Forest, SVM, GBM, Neural Networks, Naive \nBayes.\n\u2022 Deep learning techniques like RNN and LSTM (will be \ndiscussed in next chapter) can also be used.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1356, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d71d9e6c-3d45-4bb4-9157-9c82eba85423": {"__data__": {"id_": "d71d9e6c-3d45-4bb4-9157-9c82eba85423", "embedding": null, "metadata": {"page_label": "139", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0c0aef52-208d-4f11-8f08-f3f4b6d51032", "node_type": "4", "metadata": {"page_label": "139", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "cbed839df2fdac6a89664cda0e49433cc09fb9a7e5eff5396f86944c6afeb495", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "139\n\u2022 In each of these algorithms, there are so many \nparameters to be tuned to get better results. It can be \neasily done through Grid search, which will basically \ntry out all possible combinations and give the best out.\n Recipe 5-2. Implementing Sentiment \nAnalysis\nIn this recipe, we are going to implement, end to end, one of the popular \nNLP industrial applications\u00a0\u2013 Sentiment Analysis. It is very important \nfrom a business standpoint to understand how customer feedback is on \nthe products/services they offer to improvise on the products/service for \ncustomer satisfaction.\n Problem\nWe want to implement sentiment analysis.\n Solution\nThe simplest way to do this by using the TextBlob or vaderSentiment \nlibrary. Since we have used TextBlob previously, now let us use vader.\n How It Works\nLet\u2019s follow the steps in this section to implement sentiment analysis on \nthe business problem.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 940, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4315e452-6dcb-44f5-b554-d55b8a47ee12": {"__data__": {"id_": "4315e452-6dcb-44f5-b554-d55b8a47ee12", "embedding": null, "metadata": {"page_label": "140", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67dfa0a6-4abc-4822-9a4a-4f35abd05085", "node_type": "4", "metadata": {"page_label": "140", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "465b89e529938a291a2cdd8532fcfb9c66d661c88f0ff2121862908a913293a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "140\n Step 2-1 Understanding/defining business problem\nUnderstand how products are doing in the market. How are customers \nreacting to a particular product? What is the consumer\u2019s sentiment \nacross products? Many more questions like these can be answered using \nsentiment analysis.\n Step 2-2 Identifying potential data sources, collection, \nand\u00a0understanding\nWe have a dataset for Amazon food reviews. Let\u2019s use that data and extract \ninsight out of it. You can download the data from the link below:\nhttps://www.kaggle.com/snap/amazon-fine-food-reviews\n# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n#Read the data\ndf = pd.read_csv('Reviews.csv')\n# Look at the top 5 rows of the data\ndf.head(5)\n#output\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 820, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50ca534a-bcbf-466a-aee0-b91b54c246d5": {"__data__": {"id_": "50ca534a-bcbf-466a-aee0-b91b54c246d5", "embedding": null, "metadata": {"page_label": "141", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e95a53db-59d9-43b2-a603-fe6837875221", "node_type": "4", "metadata": {"page_label": "141", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "dfcd8054a7d63bbb0b3ed73c2c6f720439cabac53798466847b786b175fa7822", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "141\n \n# Understand the data types of the columns\ndf.info()\n# Output\nData columns (total 10 columns):\nId                        5 non-null int64\nProductId                 5 non-null object\nUserId                    5 non-null object\nProfileName               5 non-null object\nHelpfulnessNumerator      5 non-null int64\nHelpfulnessDenominator    5 non-null int64\nScore                     5 non-null int64\nTime                      5 non-null int64\nSummary                   5 non-null object\nText                      5 non-null object\ndtypes: int64(5), object(5)\n# Looking at the summary of the reviews.\ndf.Summary.head(5)\n# Output\n0    Good Quality Dog Food\n1        Not as Advertised\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 732, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d5aeb26-97de-4134-b0b3-714f4218ba1c": {"__data__": {"id_": "9d5aeb26-97de-4134-b0b3-714f4218ba1c", "embedding": null, "metadata": {"page_label": "142", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52947ac4-7a6a-4404-a868-60d87b8b4c84", "node_type": "4", "metadata": {"page_label": "142", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "fd84c3745294e01571a4b53d27def6a0a532965d73a6f8ea90ee9e560057993b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "142\n2    \"Delight\" says it all\n3           Cough Medicine\n4              Great taffy\n# Looking at the description of the reviews\ndf.Text.head(5)\n#output\n0    I have bought several of the Vitality canned d...\n1    Product arrived labeled as Jumbo Salted Peanut...\n2    This is a confection that has been around a fe...\n3    If you are looking for the secret ingredient i...\n4    Great taffy at a great price.  There was a wid...\n Step 2-3 Text preprocessing\nWe all know the importance of this step. Let us perform a preprocessing \ntask as discussed in Chapter 2.\n# Import libraries\nfrom nltk.corpus import stopwords\nfrom textblob import TextBlob\nfrom textblob import Word\n# Lower casing and removing punctuations\ndf['Text'] = df['Text'].apply(lambda x: \" \".join(x.lower() for \nx in x.split()))\ndf['Text'] = df['Text'].str.replace('[^\\w\\s]',\")\ndf.Text.head(5)\n# Output\n0    i have bought several of the vitality canned d...\n1    product arrived labeled as jumbo salted peanut...\n2    this is a confection that has been around a fe...\n3    if you are looking for the secret ingredient i...\n4    great taffy at a great price there was a wide ...\nChapter 5  Implement Ing Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1188, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "584cf30f-3e8f-4a94-a799-f7836b2fc688": {"__data__": {"id_": "584cf30f-3e8f-4a94-a799-f7836b2fc688", "embedding": null, "metadata": {"page_label": "143", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9fe608d3-9d31-4070-91a1-fe8c2628b4b1", "node_type": "4", "metadata": {"page_label": "143", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f755fe371689599cd67e8cc50d84a8aea18c24d32a2ffee3b3012e4cc24e43c1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "143\n# Removal of stop words\nstop = stopwords.words('english')\ndf['Text'] = df['Text'].apply(lambda x: \" \".join(x for x in \nx.split() if x not in stop))\ndf.Text.head(5)\n# Output\n0    bought several vitality canned dog food produc...\n1    product arrived labeled jumbo salted peanutsth...\n2    confection around centuries light pillowy citr...\n3    looking secret ingredient robitussin believe f...\n4    great taffy great price wide assortment yummy ...\n# Spelling correction\ndf['Text'] = df['Text'].apply(lambda x: str(TextBlob(x).\ncorrect()))\ndf.Text.head(5)\n# Output\n0    bought several vitality canned dog food produc...\n1    product arrived labelled lumbo halted peanutst...\n2    connection around centuries light pillow citie...\n3    looking secret ingredient robitussin believe f...\n4    great staff great price wide assortment mummy ...\n# Lemmatization\ndf['Text'] = df['Text'].apply(lambda x: \" \".join([Word(word).\nlemmatize() for word in x.split()]))\ndf.Text.head(5)\n# Output\n0    bought several vitality canned dog food produc...\n1    product arrived labelled lumbo halted peanutst...\n2    connection around century light pillow city ge...\n3    looking secret ingredient robitussin believe f...\n4    great staff great price wide assortment mummy ...\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1303, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dc6338ec-f870-4371-b78a-16cdb05f19c7": {"__data__": {"id_": "dc6338ec-f870-4371-b78a-16cdb05f19c7", "embedding": null, "metadata": {"page_label": "144", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9beb838d-2898-4fba-8a1b-b163dff6db33", "node_type": "4", "metadata": {"page_label": "144", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3145d26df3610025e9bdba38646799d903582ab5bd3ffa44e73202f81e90a0e6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "144\n Step 2-4 Exploratory data analysis\nThis step is not connected anywhere in predicting sentiments; what we are \ntrying to do here is to dig deeper into the data and understand it.\n# Create a new data frame \"reviews\" to perform exploratory data \nanalysis upon that\nreviews = df\n# Dropping null values\nreviews.dropna(inplace=True)\n# The histogram reveals this dataset is highly unbalanced \ntowards high rating.\nreviews.Score.hist(bins=5,grid=False)\nplt.show()\nprint(reviews.groupby('Score').count().Id)\n \n# To make it balanced data, we sampled each score by the lowest \nn-count from above. (i.e. 29743 reviews scored as '2')\nscore_1 = reviews[reviews['Score'] == 1].sample(n=29743)\nscore_2 = reviews[reviews['Score'] == 2].sample(n=29743)\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 785, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5912ce45-50b7-4701-b1ab-26d54aac913d": {"__data__": {"id_": "5912ce45-50b7-4701-b1ab-26d54aac913d", "embedding": null, "metadata": {"page_label": "145", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0ed2d918-58cb-4fa4-a407-8bb73b97e3f4", "node_type": "4", "metadata": {"page_label": "145", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ce9d6b087fa84dce7cf9494f433e69b8b6cdceea483750459f9b8776ddac89e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "145\nscore_3 = reviews[reviews['Score'] == 3].sample(n=29743)\nscore_4 = reviews[reviews['Score'] == 4].sample(n=29743)\nscore_5 = reviews[reviews['Score'] == 5].sample(n=29743)\n# Here we recreate a 'balanced' dataset.\nreviews_sample = pd.concat([score_1,score_2,score_3,score_4, \nscore_5],axis=0)\nreviews_sample.reset_index(drop=True,inplace=True)\nYou can use this dataset if you are training your own sentiment \nclassifier from scratch. And to do this. you can follow the same steps as in \ntext classification (Recipe 5-1). Here our target variable would be positive, \nnegative, and neutral created using score.\n\u2022 Score <= 2: Negative\n\u2022 Score = 3: Neutral\n\u2022 Score > =4: Positive\nHaving said that, let\u2019s get back to our exploratory data analysis.\n# Printing count by 'Score' to check dataset is now balanced.\nprint(reviews_sample.groupby('Score').count().Id)\n# Output\nScore\n1    29743\n2    29743\n3    29743\n4    29743\n5    29743\n# Let's build a word cloud looking at the 'Summary'  text\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1094, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "04a1b02e-3967-454c-8ec2-2b3babfea0df": {"__data__": {"id_": "04a1b02e-3967-454c-8ec2-2b3babfea0df", "embedding": null, "metadata": {"page_label": "146", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "74738175-42ff-4da1-ae30-aab93d2ca1df", "node_type": "4", "metadata": {"page_label": "146", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "970a9d982855adc4b1985d005db47d137949d65f78c7fb201f0aa95ac7bf7032", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "146\n# Wordcloud function's input needs to be a single string of text.\n# Here I'm concatenating all Summaries into a single string.\n# similarly you can build for Text column\nreviews_str = reviews_sample.Summary.str.cat()\nwordcloud = WordCloud(background_color='white').\ngenerate(reviews_str)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud,interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n \n# Now let's split the data into Negative (Score is 1 or 2) and \nPositive (4 or #5) Reviews.\nnegative_reviews =  reviews_sample[reviews_sample['Score'].\nisin([1,2]) ]\npositive_reviews =  reviews_sample[reviews_sample['Score'].\nisin([4,5]) ]\n# Transform to single string\nnegative_reviews_str = negative_reviews.Summary.str.cat()\npositive_reviews_str = positive_reviews.Summary.str.cat()\n# Create wordclouds\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 845, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8df6a4e-e4fe-4552-aaa8-fe50b800a3c4": {"__data__": {"id_": "c8df6a4e-e4fe-4552-aaa8-fe50b800a3c4", "embedding": null, "metadata": {"page_label": "147", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "485504bc-a9cd-40f8-af6f-d936185b770d", "node_type": "4", "metadata": {"page_label": "147", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ee1eb10e538617ad30fb7c6a8d3b17f1c0c4feb1e9fa44d78ac5d06d23b6d608", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "147\nwordcloud_negative =  WordCloud(background_color='white').generate \n(negative_reviews_str)\nwordcloud_positive =  WordCloud(background_color='white').generate \n(positive_reviews_str)\n# Plot\nfig = plt.figure(figsize=(10,10))\nax1 = fig.add_subplot(211)\nax1.imshow(wordcloud_negative,interpolation='bilinear')\nax1.axis(\"off\")\nax1.set_title('Reviews with Negative Scores',fontsize=20)\n \nax2 = fig.add_subplot(212)\nax2.imshow(wordcloud_positive,interpolation='bilinear')\nax2.axis(\"off\")\nax2.set_title('Reviews with Positive Scores',fontsize=20)\nplt.show()\n#output\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 607, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e28eb991-1b94-4072-b5a4-628283a9f698": {"__data__": {"id_": "e28eb991-1b94-4072-b5a4-628283a9f698", "embedding": null, "metadata": {"page_label": "148", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ce0793c9-c9d0-4516-89f1-640c3b33c5f0", "node_type": "4", "metadata": {"page_label": "148", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "626f854c6c25107c4dd01af4ce0c57e0ccdfb0ddf09d55d1d4d23637c40e2de8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "148\n \n Step 2-5 Feature engineering\nThis step is not required as we are not building the model from scratch; \nrather we are using the pretrained model from the library vaderSentiment.\nIf you want to build the model from scratch, you can leverage the \nabove positive and negative classes created while exploring as a target \nvariable and then training the model. You can follow the same steps as text \nclassification explained in Recipe 5-1 to build a sentiment classifier from \nscratch.\n Step 2-6 Sentiment scores\nSentiment Analysis: Pretrained model takes the input from the text \ndescription and outputs the sentiment score ranging from -1 to +1 for each \nsentence.\n#Importing required libraries\nimport pandas as pd\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 763, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cbe1072f-b1f6-4b87-8bca-717bccca8c01": {"__data__": {"id_": "cbe1072f-b1f6-4b87-8bca-717bccca8c01", "embedding": null, "metadata": {"page_label": "149", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae72cc41-af57-4eb6-aca5-45a68c3b1a87", "node_type": "4", "metadata": {"page_label": "149", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "df7efdc1b7549d4d44f59ed8bd4883a9b28cc6604077c2bca550e8d6a95ab226", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "149\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport re\nimport os\nimport sys\nimport ast\nplt.style.use('fivethirtyeight')\n# Function for getting the sentiment\ncp = sns.color_palette()\nfrom vaderSentiment.vaderSentiment import \n SentimentIntensityAnalyzer\nanalyzer = SentimentIntensityAnalyzer()\n# Generating sentiment for all the sentence present in the \ndataset\nemptyline=[]\nfor row in df['Text']:\n    vs=analyzer.polarity_scores(row)\n    emptyline.append(vs)\n# Creating new dataframe with sentiments    \ndf_sentiments=pd.DataFrame(emptyline)\ndf_sentiments.head(5)\n# Output\n      compound    neg    neu    pos\n0     0.9413      0.000  0.503  0.497\n1    -0.5719      0.258  0.644  0.099\n2     0.8031      0.133  0.599  0.268\n3     0.4404      0.000  0.854  0.146\n4     0.9186      0.000  0.455  0.545\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 895, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "42419080-56d4-4d26-94e7-fb1f0c3096a3": {"__data__": {"id_": "42419080-56d4-4d26-94e7-fb1f0c3096a3", "embedding": null, "metadata": {"page_label": "150", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8788565c-4e78-4af6-85e8-1df101755bcc", "node_type": "4", "metadata": {"page_label": "150", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "56b817b632c333f05f9fb1f10a8e12f5e8ee5e73be9b6dc792a4e06479282f7a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "150\n# Merging the sentiments back to reviews dataframe\ndf_c = pd.concat([df.reset_index(drop=True), d], axis=1)\ndf_c.head(3)\n#output sample\n \n# Convert scores into positive and negetive sentiments using \nsome threshold\ndf_c['Sentiment'] =  np.where(df_c['compound'] >= 0 , 'Positive', \n'Negative')\ndf_c.head(5)\n#output sample\n \nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 373, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "59d6bb82-5591-45d9-b5a4-9d8330f49841": {"__data__": {"id_": "59d6bb82-5591-45d9-b5a4-9d8330f49841", "embedding": null, "metadata": {"page_label": "151", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c0fc5ea-f921-4c26-a94c-8dc1728f8383", "node_type": "4", "metadata": {"page_label": "151", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "6642b5acb82c1d5bc8d9b3e130cbd0f8c8ae29d38259fa5aa111bb6e7b9b1578", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "151\n Step 2-7 Business insights\nLet\u2019s see how the overall sentiment is using the sentiment we generated.\nresult=df_c['Sentiment'].value_counts()\nresult.plot(kind='bar', rot=0,color='br');\n \nWe just took a sample of 1000 reviews and completed sentiment \nanalysis. If you look, more than 900 (>90%) reviews are positive, which is \nreally good for any business.\nWe can also group by-products, that is, sentiments by-products to \nunderstand the high-level customer feedback against products.\n#Sample code snippet\nresult=df_c.groupby('ProductId')['Sentiment'].value_counts().\nunstack()\nresult[['Negative','Positive']].plot(kind='bar', \nrot=0,color='rb')\nSimilarly, we can analyze sentiments by month using the time column \nand many other such attributes.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 795, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d74cfdb6-167d-4c90-9f62-df231d713262": {"__data__": {"id_": "d74cfdb6-167d-4c90-9f62-df231d713262", "embedding": null, "metadata": {"page_label": "152", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9d5f245-e020-4bdd-93ce-7f442dc9a6ab", "node_type": "4", "metadata": {"page_label": "152", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "9ec2016547148503f9ba956becdab5d07b90ce85909f96a682004b364e37c1a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "152\n Recipe 5-3. Applying Text Similarity \nFunctions\nThis recipe covers data stitching using text similarity.\n Problem\nWe will have multiple tables in the database, and sometimes there won\u2019t \nbe a common \u201cID\u201d or \u201cKEY\u201d to join them\u00a0\u2013 scenarios like the following:\n\u2022 Customer information scattered across multiple tables \nand systems.\n\u2022 No global key to link them all together.\n\u2022 A lot of variations in names and addresses.\n Solution\nThis can be solved by applying text similarity functions on the \ndemographic\u2019s columns like the first name, last name, address, etc. And \nbased on the similarity score on a few common columns, we can decide \neither the record pair is a match or not a match.\n How It Works\nLet\u2019s follow the steps in this section to link the records.\nTechnical challenge:\n\u2022 Huge records that need to be linked/stitched/\ndeduplicated.\n\u2022 Records come from various systems with differing \nschemas.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 953, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ac4df2e2-cf64-4d91-8373-1b2a5297779f": {"__data__": {"id_": "ac4df2e2-cf64-4d91-8373-1b2a5297779f", "embedding": null, "metadata": {"page_label": "153", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75490930-70f9-4af4-a1f5-da9f7f3c0b16", "node_type": "4", "metadata": {"page_label": "153", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5ac86b3846dd811e2816230456b973d79c62313110fdfe2d6da1851e6c7f11f8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "153\nThere is no global key or customer id to merge. There are two possible \nscenarios of data stitching or linking records:\n\u2022 Multiple records of the same customer at the same \ntable, and you want to dedupe.\n\u2022 Records of same customers from multiple tables need \nto be merged.\nFor Recipe 3-A, let\u2019s solve scenario 1 that is deduplication and as a part \nof Recipe 3-B, let\u2019s solve scenario 2 that is record linkage from multiple tables.\n Deduplication in\u00a0the\u00a0same table\nStep 3A-1 Read and\u00a0understand the\u00a0data\nWe need the data first:\n# Import package\n!pip install recordlinkage\nimport recordlinkage\n#For this demo let us use the inbuilt dataset from \nrecordlinkage library\n#import data set\nfrom recordlinkage.datasets import load_febrl1\n#create a dataframe - dfa\ndfA = load_febrl1()\ndfA.head()\n#output\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 845, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6128eb2a-6b5e-45f9-aff0-3ec528554e39": {"__data__": {"id_": "6128eb2a-6b5e-45f9-aff0-3ec528554e39", "embedding": null, "metadata": {"page_label": "154", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cfadb7d-3cef-4e79-a048-20401eee9cd0", "node_type": "4", "metadata": {"page_label": "154", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e5309ac828ca3e81c2a16cb185b6f24194ca263251acea3bb1a7e939a806b9df", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "154\n \nStep 3A-2 Blocking\nHere we reduce the comparison window and create record pairs.\nWhy?\n\u2022 Suppose there are huge records say, 100M records \nmeans (100M choose 2) \u2248 10^16 possible pairs\n\u2022 Need heuristic to quickly cut that 10^16 down without \nlosing many matches\nThis can be accomplished by extracting a \u201cblocking key\u201d How? \nExample:\n\u2022 Record: first name: John, last name: Roberts, address: \n20 Main St Plainville MA 01111\n\u2022 Blocking key: first name\u00a0- John\n\u2022 Will be paired with: John Ray \u2026 011\n\u2022 Won\u2019t be paired with: Frank Sinatra \u2026 07030\n\u2022 Generate pairs only for records in the same block\nBelow is the blocking example at a glance: here blocking is done on the \n\u201cSndx-SN, \u201d column which is nothing but the Soundex value of the surname \ncolumn as discussed in the previous chapter.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 833, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0895e4ad-f346-434a-be08-2cb89a285d9e": {"__data__": {"id_": "0895e4ad-f346-434a-be08-2cb89a285d9e", "embedding": null, "metadata": {"page_label": "155", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "36df0cb3-0a48-4a12-b686-4ce51925ce26", "node_type": "4", "metadata": {"page_label": "155", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "36c0730f5ccf84017929c3ad98186543b6593cb6ce0fffed3f5f2223192b9025", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "155\n \nThere are many advanced blocking techniques, also, like the following:\n\u2022 Standard blocking\n\u2022 Single column\n\u2022 Multiple columns\n\u2022 Sorted neighborhood\n\u2022 Q-gram: fuzzy blocking\n\u2022 LSH\n\u2022 Canopy clustering\nThis can be a new topic altogether, but for now, let\u2019s build the pairs \nusing the first name as the blocking index.\nindexer = recordlinkage.BlockIndex(on='given_name')\npairs = indexer.index(dfA)\nprint (len(pairs))\n#output\n2082\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 477, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "112e7a96-f0b3-47c2-93be-469890af4a4d": {"__data__": {"id_": "112e7a96-f0b3-47c2-93be-469890af4a4d", "embedding": null, "metadata": {"page_label": "156", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "872cbf77-4bad-469b-9d04-cf4638d3b2e6", "node_type": "4", "metadata": {"page_label": "156", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5afa96ba78e37af10c7acae58d2d3101efd42db644fcb67a3e54e1e3d5c2fa5e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "156\nStep 3A-3 Similarity matching and\u00a0scoring\nHere we compute the similarity scores on the columns like given name, \nsurname, and address between the record pairs generated in the previous \nstep. For columns like date of birth, suburb, and state, we are using the \nexact match as it is important for this column to possess exact records.\nWe are using jarowinkler, but you can use any of the other similarity \nmeasures discussed in Chapter 4.\n# This cell can take some time to compute.\ncompare_cl = recordlinkage.Compare()\ncompare_cl.string('given_name', 'given_name',method='jarowinkler',  \nlabel='given_name')\ncompare_cl.string('surname', 'surname', method='jarowinkler', \nlabel='surname')\ncompare_cl.exact('date_of_birth', 'date_of_birth', label='date_\nof_birth')\ncompare_cl.exact('suburb', 'suburb', label='suburb')\ncompare_cl.exact('state', 'state', label='state')\ncompare_cl.string('address_1', 'address_1',method='jarowinkler',  \nlabel='address_1')\nfeatures = compare_cl.compute(pairs, dfA)\nfeatures.sample(5)\n#output\n \nChapter 5  Implement Ing Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1072, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0c24c8f2-a54c-45a0-836e-6b395741b098": {"__data__": {"id_": "0c24c8f2-a54c-45a0-836e-6b395741b098", "embedding": null, "metadata": {"page_label": "157", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0639b309-22a6-4cfd-82ad-3e4487fa7a0c", "node_type": "4", "metadata": {"page_label": "157", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ced5399b1ac672579e4c8a46bf9bebb8d14a4bcd3073908c71f368e441c5e481", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "157\nSo here record \u201crec-115-dup-0\u201d is compared with \u201crec-120-dup-0. \u201d \nSince their first name (blocking column) is matching, similarity scores are \ncalculated on the common columns for these pairs.\nStep 3A-4 Predicting records match or do not match using \nECM\u00a0\u2013 classifier\nHere is an unsupervised learning method to calculate the probability that \nthe records match.\n# select all the features except for given_name since its our \nblocking key\nfeatures1 = features[['suburb','state','surname','date_of_\nbirth','address_1']]\n# Unsupervised learning \u2013 probabilistic\necm = recordlinkage.ECMClassifier()\nresult_ecm = ecm.learn((features1).astype(int),return_type = \n'series')\nresult_ecm\n#output\nrec_id rec_id\nrec-122-org rec-183-dup-0 0\n rec-248-org 0\n rec-469-org 0\n rec-74-org 0\n rec-183-org 0\n rec-360-dup-0 0\n rec-248-dup-0 0\n rec-469-dup-0 0\nrec-183-dup-0 rec-248-org 0\n rec-469-org 0\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 930, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "1df2c3c4-1e00-4e35-afa9-daa640690159": {"__data__": {"id_": "1df2c3c4-1e00-4e35-afa9-daa640690159", "embedding": null, "metadata": {"page_label": "158", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "871fe5cd-8532-4c0b-bb0f-d29ffd50b00f", "node_type": "4", "metadata": {"page_label": "158", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "8adb390cd9dbfae9078e4fbd8a9ec09e38dc1da2040aab827a3780744e687757", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "158\n rec-74-org 0\n rec-183-org 1\n rec-360-dup-0 0\n rec-248-dup-0 0\n rec-469-dup-0 0\nrec-248-org rec-469-org 0\n rec-74-org 0\n rec-360-dup-0 0\n rec-469-dup-0 0\nrec-122-dup-0 rec-122-org 1\n rec-183-dup-0 0\n rec-248-org 0\n rec-469-org 0\n rec-74-org 0\n rec-183-org 0\n rec-360-dup-0 0\n rec-248-dup-0 0\n rec-469-dup-0 0\nrec-469-org rec-74-org 0\nrec-183-org rec-248-org 0\n ..\nrec-208-dup-0 rec-208-org 1\nrec-363-dup-0 rec-363-org 1\nrec-265-dup-0 rec-265-org 1\nrec-315-dup-0 rec-315-org 1\nrec-410-dup-0 rec-410-org 1\nrec-290-org rec-93-org 0\nrec-460-dup-0 rec-460-org 1\nrec-499-dup-0 rec-499-org 1\nrec-11-dup-0 rec-11-org 1\nrec-97-dup-0 rec-97-org 1\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 686, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a7746003-3104-48f4-8009-7ddd5ac2df17": {"__data__": {"id_": "a7746003-3104-48f4-8009-7ddd5ac2df17", "embedding": null, "metadata": {"page_label": "159", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "489993d1-fc5e-4abd-987c-a2642d40fa5b", "node_type": "4", "metadata": {"page_label": "159", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "fb1235dcb5cf4cc223db326d7ee617879104e7a3751954b01d7e06731d851c1f", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "159\nrec-213-dup-0 rec-421-dup-0 0\nrec-349-dup-0 rec-376-dup-0 0\nrec-371-dup-0 rec-371-org 1\nrec-129-dup-0 rec-129-org 1\nrec-462-dup-0 rec-462-org 1\nrec-328-dup-0 rec-328-org 1\nrec-308-dup-0 rec-308-org 1\nrec-272-org rec-308-dup-0 0\n rec-308-org 0\nrec-5-dup-0 rec-5-org 1\nrec-407-dup-0 rec-407-org 1\nrec-367-dup-0 rec-367-org 1\nrec-103-dup-0 rec-103-org 1\nrec-195-dup-0 rec-195-org 1\nrec-184-dup-0 rec-184-org 1\nrec-252-dup-0 rec-252-org 1\nrec-48-dup-0 rec-48-org 1\nrec-298-dup-0 rec-298-org 1\nrec-282-dup-0 rec-282-org 1\nrec-327-org rec-411-org 0\nThe output clearly shows that \u201crec-183-dup-0\u201d matches \u201crec-183- \norg\u201d and can be linked to one global_id. What we have done so far is \ndeduplication: identifying multiple records of the same users from the \nindividual table.\n Records of\u00a0same customers from\u00a0multiple tables\nNext, let us look at how we can solve this problem if records are in multiple \ntables without unique ids to merge with.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 985, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "35064c4c-b0bb-477c-9cf3-ecc3891594f8": {"__data__": {"id_": "35064c4c-b0bb-477c-9cf3-ecc3891594f8", "embedding": null, "metadata": {"page_label": "160", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "59a487ee-3951-4d7c-9772-c1a48b14cdc7", "node_type": "4", "metadata": {"page_label": "160", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "db1bd34a3c68bc1e0150d17d53bfc68885df440d832dd135518eea943684fa0c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "160\nStep 3B-1 Read and\u00a0understand the\u00a0data\nLet us use the built-in dataset from the recordlinkage library:\nfrom recordlinkage.datasets import load_febrl4\ndfA, dfB = load_febrl4()\ndfA.head()\n#output\n \ndfB.head()\n#output\n \nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 266, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fb15f7e3-2cd0-4f2f-be80-8ca12f0d8dca": {"__data__": {"id_": "fb15f7e3-2cd0-4f2f-be80-8ca12f0d8dca", "embedding": null, "metadata": {"page_label": "161", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8a9a2a8-413d-4b6b-8c13-76a6009023bb", "node_type": "4", "metadata": {"page_label": "161", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "711b4a70926ad62ac4690ef6e0e6acf322ba3822aa82ddd96bfa99594686e60d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "161\nStep 3B-2 Blocking\u00a0\u2013 to\u00a0reduce the\u00a0comparison window \nand\u00a0creating record pairs\nThis is the same as explained previously, considering the given_name as a \nblocking index:\nindexer = recordlinkage.BlockIndex(on='given_name')\npairs = indexer.index(dfA, dfB)\nStep 3B-3 Similarity matching\nThe explanation remains the same.\ncompare_cl = recordlinkage.Compare()\ncompare_cl.string('given_name', 'given_name',method='jarowinkler',  \nlabel='given_name')\ncompare_cl.string('surname', 'surname', method='jarowinkler', \nlabel='surname')\ncompare_cl.exact('date_of_birth', 'date_of_birth', label='date_\nof_birth')\ncompare_cl.exact('suburb', 'suburb', label='suburb')\ncompare_cl.exact('state', 'state', label='state')\ncompare_cl.string('address_1', 'address_1',method='jarowinkler',  \nlabel='address_1')\nfeatures = compare_cl.compute(pairs, dfA, dfB)\nfeatures.head(10)\n#output\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 911, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd3b760a-b6d1-4bd8-ba72-3ce79aa5765a": {"__data__": {"id_": "dd3b760a-b6d1-4bd8-ba72-3ce79aa5765a", "embedding": null, "metadata": {"page_label": "162", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "12cefabd-993c-43b8-bfec-13cd62a35942", "node_type": "4", "metadata": {"page_label": "162", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "7c3ce701bf281dcd3efc992b4926287137ff0bfc1a11600d6df14494a12cd824", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "162\n \nSo here record \u201crec-1070-org\u201d is compared with \u201crec-3024-dup-0, \u201d \n\u201crec-2371-dup-0, \u201d \u201crec-4652-dup-0, \u201d \u201crec-4795-dup-0, \u201d and \u201crec-1314- \ndup-0, since their first name (blocking column) is matching and similarity \nscores are calculated on the common columns for these pairs.\nStep 3B-4 Predicting records match or do not match using \nECM\u00a0\u2013 classifier\nHere is an unsupervised learning method to calculate the probability that \nthe record is a match.\n# select all the features except for given_name since its our \nblocking key\nfeatures1 =  features[['suburb','state','surname','date_of_birth', \n'address_1']]\n# unsupervised learning - probablistic\necm = recordlinkage.ECMClassifier()\nresult_ecm = ecm.learn((features1).astype(int),return_type = \n'series')\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 806, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4c88063e-8427-46ea-9936-890663d5ce7d": {"__data__": {"id_": "4c88063e-8427-46ea-9936-890663d5ce7d", "embedding": null, "metadata": {"page_label": "163", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b84946d3-875d-4089-858d-4e17aa07f35c", "node_type": "4", "metadata": {"page_label": "163", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "8a7b27a17b05b7fc6d0495e80f5e7cefdb4b5fc634b2bb9cc0c166dca9f3467d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "163\nresult_ecm\n#output sample\nrec_id        rec_id\nrec-1070-org  rec-3024-dup-0    0\n              rec-2371-dup-0    0\n              rec-4652-dup-0    0\n              rec-4795-dup-0    0\n              rec-1314-dup-0    0\nrec-2371-org  rec-3024-dup-0    0\n              rec-2371-dup-0    1\n              rec-4652-dup-0    0\n              rec-4795-dup-0    0\n              rec-1314-dup-0    0\nrec-3582-org  rec-3024-dup-0    0\n              rec-2371-dup-0    0\n              rec-4652-dup-0    0\n              rec-4795-dup-0    0\n              rec-1314-dup-0    0\nrec-3024-org  rec-3024-dup-0    1\n              rec-2371-dup-0    0\n              rec-4652-dup-0    0\n              rec-4795-dup-0    0\n              rec-1314-dup-0    0\nrec-4652-org  rec-3024-dup-0    0\n              rec-2371-dup-0    0\n              rec-4652-dup-0    1\n              rec-4795-dup-0    0\n              rec-1314-dup-0    0\nrec-4795-org  rec-3024-dup-0    0\n              rec-2371-dup-0    0\n              rec-4652-dup-0    0\n              rec-4795-dup-0    1\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1082, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4a89dde7-eecb-4e12-98b0-03f344a52240": {"__data__": {"id_": "4a89dde7-eecb-4e12-98b0-03f344a52240", "embedding": null, "metadata": {"page_label": "164", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "feb09f25-4454-43ef-8f30-4fbcce9f0ee6", "node_type": "4", "metadata": {"page_label": "164", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "608071cb00a0bfd6812874e8b094ff48ca330db7893510512a344a10745224cd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "164\n              rec-1314-dup-0    0\n                               ..\nrec-2820-org  rec-2820-dup-0    1\n              rec-991-dup-0     0\nrec-1984-org  rec-1984-dup-0    1\nrec-1662-org  rec-1984-dup-0    0\nrec-4415-org  rec-1984-dup-0    0\nrec-1920-org  rec-1920-dup-0    1\nrec-303-org   rec-303-dup-0     1\nrec-1915-org  rec-1915-dup-0    1\nrec-4739-org  rec-4739-dup-0    1\n              rec-4865-dup-0    0\nrec-681-org   rec-4276-dup-0    0\nrec-4603-org  rec-4848-dup-0    0\n              rec-4603-dup-0    1\nrec-3122-org  rec-4848-dup-0    0\n              rec-4603-dup-0    0\nrec-3711-org  rec-3711-dup-0    1\nrec-4912-org  rec-4912-dup-0    1\nrec-664-org   rec-664-dup-0     1\n              rec-1311-dup-0    0\nrec-4031-org  rec-4031-dup-0    1\nrec-1413-org  rec-1413-dup-0    1\nrec-735-org   rec-735-dup-0     1\nrec-1361-org  rec-1361-dup-0    1\nrec-3090-org  rec-3090-dup-0    1\nrec-2571-org  rec-2571-dup-0    1\nrec-4528-org  rec-4528-dup-0    1\nrec-4887-org  rec-4887-dup-0    1\nrec-4350-org  rec-4350-dup-0    1\nrec-4569-org  rec-4569-dup-0    1\nrec-3125-org  rec-3125-dup-0    1\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1137, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "408b0146-282e-437d-af4c-23fde8dbec02": {"__data__": {"id_": "408b0146-282e-437d-af4c-23fde8dbec02", "embedding": null, "metadata": {"page_label": "165", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0369e09a-9540-43ed-acde-1e3f374fc5b2", "node_type": "4", "metadata": {"page_label": "165", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "8ea55fc1d090bba396165eb626317ff24ac37be123a55c1291dbae40e3b42877", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "165\nThe output clearly shows that \u201crec-122-dup-0\u201d matches \u201crec-122-org\u201d \nand can be linked to one global_id.\nIn this way, you can create a data lake consisting of a unique global id and \nconsistent data across tables and also perform any kind of statistical analysis.\n Recipe 5-4. Summarizing Text Data\nIf you just look around, there are lots of articles and books available. Let\u2019s \nassume you want to learn a concept in NLP and if you Google it, you will \nfind an article. You like the content of the article, but it\u2019s too long to read \nit one more time. You want to basically summarize the article and save it \nsomewhere so that you can read it later.\nWell, NLP has a solution for that. Text summarization will help us do \nthat. You don\u2019t have to read the full article or book every time.\n Problem\nText summarization of article/document using different algorithms in \nPython.\n Solution\nText summarization is the process of making large documents into smaller \nones without losing the context, which eventually saves readers time. This \ncan be done using different techniques like the following:\n\u2022 TextRank: A graph-based ranking algorithm\n\u2022 Feature-based text summarization\n\u2022 LexRank: TF-IDF with a graph-based algorithm\n\u2022 Topic based\n\u2022 Using sentence embeddings\n\u2022 Encoder-Decoder Model: Deep learning techniques\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1360, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7d9a1a90-1ad0-4635-8964-2499151ad197": {"__data__": {"id_": "7d9a1a90-1ad0-4635-8964-2499151ad197", "embedding": null, "metadata": {"page_label": "166", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e7395fa4-0985-4177-8c40-f860ef7cbfbf", "node_type": "4", "metadata": {"page_label": "166", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "54ba125896794a3b871fccf6b9c1403ea437f6c4e3f1dccbeaf0a03ee73f24de", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "166\n How It Works\nWe will explore the first 2 approaches in this recipe and see how it works.\n Method 4-1 TextRank\nTextRank is the graph-based ranking algorithm for NLP .\u00a0It is basically \ninspired by PageRank, which is used in the Google search engine but \nparticularly designed for text. It will extract the topics, create nodes out of \nthem, and capture the relation between nodes to summarize the text.\nLet\u2019s see how to do it using the Python package Gensim. \u201cSummarize\u201d \nis the function used.\nBefore that, let\u2019s import the notes. Let\u2019s say your article is Wikipedia for \nthe topic of Natural language processing.\n# Import BeautifulSoup and urllib libraries to fetch data from \nWikipedia.\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\n# Function to get data from Wikipedia\ndef get_only_text(url):\n page = urlopen(url)\n soup = BeautifulSoup(page)\n text = ' '.join(map(lambda p: p.text, soup.find_all('p')))\n print (text)\n return soup.title.text, text\n# Mention the Wikipedia url\nurl=\"https://en.wikipedia.org/wiki/Natural_language_processing\"\n# Call the function created above\ntext = get_only_text(url) \n# Count the number of letters\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1200, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "55e874a5-3817-403b-a931-2bcc4d602eb9": {"__data__": {"id_": "55e874a5-3817-403b-a931-2bcc4d602eb9", "embedding": null, "metadata": {"page_label": "167", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4790a5ea-3660-440a-b801-8891b87d1f6e", "node_type": "4", "metadata": {"page_label": "167", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "47abe1c91bea7185175684cbbd1c3ba8956e3a2d4bad92471ec8fdf97ee8bbb6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "167\nlen(\".join(text))\nResult:\nOut[74]: 8519\n# Lets see first 1000 letters from the text\ntext[:1000]\nResult :\nOut[72]: '(\\'Natural language processing - Wikipedia\\', \n\\'Natural language processing (NLP) is an area of computer \nscience and artificial intelligence concerned with the \ninteractions between computers and human (natural) languages, \nin particular how to program computers to process and analyze \nlarge amounts of natural language\\\\xa0data.\\\\n Challenges \nin natural language processing frequently involve speech \nrecognition, natural language understanding, and natural \nlanguage generation.\\\\n The history of natural language \nprocessing generally started in the 1950s, although work can be \nfound from earlier periods.\\\\nIn 1950, Alan Turing published \nan article titled \"Intelligence\" which proposed what is now \ncalled the Turing test as a criterion of intelligence.\\\\n \nThe Georgetown experiment in 1954 involved fully automatic \ntranslation of more than sixty Russian sentences into English. \nThe authors claimed that within three or five years, machine \ntranslation would be a solved problem.[2]  However, real \nprogress was '\n# Import summarize from gensim\nfrom gensim.summarization.summarizer import summarize\nfrom gensim.summarization import keywords\n# Convert text to string format\ntext = str(text)\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1367, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f93e77a-20b9-4304-a986-6dd6bf08a4d2": {"__data__": {"id_": "5f93e77a-20b9-4304-a986-6dd6bf08a4d2", "embedding": null, "metadata": {"page_label": "168", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df9dd199-68ad-4498-a2a9-401b015a3ef1", "node_type": "4", "metadata": {"page_label": "168", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1101bae9c9bb40a3890341a630968d31740225dd9014ccea1814c3c28fc2c660", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "168\n#Summarize the text with ratio 0.1 (10% of the total words.)\nsummarize(text, ratio=0.1)\nResult:\nOut[77]: 'However, part-of-speech tagging introduced the use \nof hidden Markov models to natural language processing, and \nincreasingly, research has focused on statistical models,  \nwhich make soft, probabilistic decisions based on attaching \nreal-valued weights to the features making up the input data. \n\\nSuch models are generally more robust when given unfamiliar \ninput, especially input that contains errors (as is very \ncommon for real-world data), and produce more reliable results \nwhen integrated into a larger system comprising multiple \nsubtasks.\\\\n Many of the notable early successes occurred in \nthe field of machine translation, due especially to work at \nIBM Research, where successively more complicated statistical \nmodels were developed.'\nThat\u2019s it. The generated summary is as simple as that. If you read this \nsummary and whole article, it's close enough. But still, there is a lot of \nroom for improvement.\n#keywords\nprint(keywords(text, ratio=0.1))\nResult:\nlearning\nlearn\nlanguages\nprocess\nsystems\nworlds\nworld\nreal\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1186, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4eb192d7-1ecd-4e9b-a0ec-dbd2e0da141d": {"__data__": {"id_": "4eb192d7-1ecd-4e9b-a0ec-dbd2e0da141d", "embedding": null, "metadata": {"page_label": "169", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5c658d5c-a01d-488f-832b-aeabf6700f53", "node_type": "4", "metadata": {"page_label": "169", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5585d5677df6b7e6c0b9b65bcc5caf8c8cc058e1850c34c1752ab2cd83e6e6fd", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "169\nnatural language processing\nresearch\nresearched\nresults\nresult\ndata\nstatistical\nhand\ngeneration\ngenerally\ngeneric\ngeneral\ngenerated\ntasks\ntask\nlarge\nhuman\nintelligence\ninput\ncalled\ncalling\ncalls\nproduced\nproduce\nproduces\nproducing\npossibly\npossible\ncorpora\nbase\nbased\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 317, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "550878fc-e6b2-4d47-ac27-ef323f2e501c": {"__data__": {"id_": "550878fc-e6b2-4d47-ac27-ef323f2e501c", "embedding": null, "metadata": {"page_label": "170", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9fd8fc6d-ab69-40e7-9392-e7f2023f4f47", "node_type": "4", "metadata": {"page_label": "170", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b7e0794e46889723bc7f26c5fa7ddb024bb5ee45d05576b3159cc2bf8f9982ba", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "170\n Method 4-2 Feature-based text summarization\nYour feature-based text summarization methods will extract a feature from \nthe sentence and check the importance to rank it. Position, length, term \nfrequency, named entity, and many other features are used to calculate the \nscore.\nLuhn\u2019s Algorithm is one of the feature-based algorithms, and we will \nsee how to implement it using the sumy library.\n# Install sumy\n!pip install sumy\n# Import the packages\nfrom sumy.parsers.html import HtmlParser\nfrom sumy.parsers.plaintext import PlaintextParser\nfrom sumy.nlp.tokenizers import Tokenizer\nfrom sumy.summarizers.lsa import LsaSummarizer\nfrom sumy.nlp.stemmers import Stemmer\nfrom sumy.utils import get_stop_words\nfrom sumy.summarizers.luhn import LuhnSummarizer\n# Extracting and summarizing\nLANGUAGE = \"english\"\nSENTENCES_COUNT = 10\nurl=\"https://en.wikipedia.org/wiki/Natural_language_processing\"\nparser = HtmlParser.from_url(url, Tokenizer(LANGUAGE))\nsummarizer = LsaSummarizer()\nsummarizer = LsaSummarizer(Stemmer(LANGUAGE))\nsummarizer.stop_words = get_stop_words(LANGUAGE)\nfor sentence in summarizer(parser.document, SENTENCES_COUNT):\n    print(sentence)\nResult :\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1210, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "caf00f90-87b5-4fbf-8ad0-379a6c7ab67c": {"__data__": {"id_": "caf00f90-87b5-4fbf-8ad0-379a6c7ab67c", "embedding": null, "metadata": {"page_label": "171", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a4605570-ab36-4893-a17f-3f095cf4b5b1", "node_type": "4", "metadata": {"page_label": "171", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "15460b5574e023f9372d3aafdb0c6fc47751c3ad63cdcf982ea2ee333e7d9e53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "171\n[2] However, real progress was much slower, and after the \nALPAC report in 1966, which found that ten-year-long research \nhad failed to fulfill the expectations, funding for machine \ntranslation was dramatically reduced.\nHowever, there is an enormous amount of non-annotated data \navailable (including, among other things, the entire content of \nthe World Wide Web ), which can often make up for the inferior \nresults if the algorithm used has a low enough time complexity \nto be practical, which some such as Chinese Whispers do.\nSince the so-called \"statistical revolution\"\nin the late 1980s and mid 1990s, much natural language \nprocessing research has relied heavily on machine learning .\nIncreasingly, however, research has focused on statistical \nmodels , which make soft, probabilistic decisions based on \nattaching real-valued weights to each input feature.\nNatural language understanding Convert chunks of text into more \nformal representations such as first-order logic structures \nthat are easier for computer programs to manipulate.\n[18] ^ Implementing an online help desk system based on \nconversational agent Authors: Alisa Kongthon, Chatchawal \nSangkeettrakarn, Sarawoot Kongyoung and Choochart \nHaruechaiyasak.\n[ self-published source ] ^ Chomskyan linguistics encourages \nthe investigation of \" corner cases \" that stress the limits of \nits theoretical models (comparable to pathological phenomena \nin mathematics), typically created using thought experiments , \nrather than the systematic investigation of typical phenomena \nthat occur in real-world data, as is the case in corpus \nlinguistics .\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1663, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "50393566-0285-427d-a2ab-6f08c5804775": {"__data__": {"id_": "50393566-0285-427d-a2ab-6f08c5804775", "embedding": null, "metadata": {"page_label": "172", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9354b29e-a095-442c-805e-6d2977c2c434", "node_type": "4", "metadata": {"page_label": "172", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "748bc68b1d9455096f6964b382ddada65470810b8eb5f93f807ebc90148c3e92", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "172\n^ Antonio Di Marco - Roberto Navigili, \"Clustering and \nDiversifying Web Search Results with Graph Based Word Sense \nInduction\" , 2013 Goldberg, Yoav (2016).\nScripts, plans, goals, and understanding: An inquiry into human \nknowledge structures ^ Kishorjit, N., Vidya Raj RK., Nirmal Y., \nand Sivaji B.\n^ PASCAL Recognizing Textual Entailment Challenge (RTE-7) \nhttps://tac.nist.gov//2011/RTE/ ^ Yi, Chucai; Tian, Yingli \n(2012), \"Assistive Text Reading from Complex Background for \nBlind Persons\" , Camera-Based Document Analysis and Recognition \n, Springer Berlin Heidelberg, pp.\nProblem solved. Now you don\u2019t have to read the whole notes; just read \nthe summary whenever we are running low on time.\nWe can use many of the deep learning techniques to get better \naccuracy and better results like the Encoder-Decoder Model. We will see \nhow to do that in the next chapter.\n Recipe 5-5. Clustering Documents\nDocument clustering, also called text clustering, is a cluster analysis \non textual documents. One of the typical usages would be document \nmanagement.\n Problem\nClustering or grouping the documents based on the patterns and \nsimilarities.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1195, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8d355dc1-16b8-4a8f-aa50-ad4336d1046b": {"__data__": {"id_": "8d355dc1-16b8-4a8f-aa50-ad4336d1046b", "embedding": null, "metadata": {"page_label": "173", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5925acf1-bdfa-469f-99d7-79c1bea39d7c", "node_type": "4", "metadata": {"page_label": "173", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "319e1eb9cb419293bd93187f14d4b220b0fa6ce34fe5f960797e64abda915030", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "173\n Solution\nDocument clustering yet again includes similar steps, so let\u2019s have a look at \nthem:\n 1. Tokenization\n 2. Stemming and lemmatization\n 3. Removing stop words and punctuation\n 4. Computing term frequencies or TF-IDF\n 5. Clustering: K-means/Hierarchical; we can then use \nany of the clustering algorithms to cluster different \ndocuments based on the features we have generated\n 6. Evaluation and visualization: Finally, the clustering \nresults can be visualized by plotting the clusters into \na two-dimensional space\n How It Works\n Step 5-1 Import data and\u00a0libraries\nHere are the libraries, then the data:\n!pip install mpld3\nimport numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.stem.snowball import SnowballStemmer\nfrom bs4 import BeautifulSoup\nimport re\nimport os\nimport codecs\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 843, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "88e8254f-5f55-4187-890e-21cbdad88ccc": {"__data__": {"id_": "88e8254f-5f55-4187-890e-21cbdad88ccc", "embedding": null, "metadata": {"page_label": "174", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b2bc8f01-c15e-4401-b248-352b7a8dc3c7", "node_type": "4", "metadata": {"page_label": "174", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "4069e3fa4f284743cffea0b7fc13f29f208577ea2b027eccfc9cee092c524ab6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "174\nfrom sklearn import feature_extraction\nimport mpld3\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom sklearn.manifold import MDS\n#Lets use the same complaint dataset we use for classification\nData = pd.read_csv(\"/Consumer_Complaints.\ncsv\",encoding='latin-1')\n#selecting required columns and rows\nData = Data[['consumer_complaint_narrative']]\nData = Data[pd.notnull(Data['consumer_complaint_narrative'])]\n# lets do the clustering for just 200 documents. Its easier to \ninterpret.\nData_sample=Data.sample(200)\n Step 5-2 Preprocessing and\u00a0TF-IDF feature engineering\nNow we preprocess it:\n# Remove unwanted symbol\nData_sample['consumer_complaint_narrative'] = Data_\nsample['consumer_complaint_narrative'].str.replace('XXXX',\")\n# Convert dataframe to list\ncomplaints = Data_sample['consumer_complaint_narrative'].tolist()\n# create the rank of documents \u2013 we will use it later\nranks = []\nfor i in range(1, len(complaints)+1):\n    ranks.append(i)\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1067, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a44b6cbf-e7c9-4f1b-b162-7a935c0ef4b4": {"__data__": {"id_": "a44b6cbf-e7c9-4f1b-b162-7a935c0ef4b4", "embedding": null, "metadata": {"page_label": "175", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4bbf747e-b846-4068-a42b-1664a00cee01", "node_type": "4", "metadata": {"page_label": "175", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "67650009b5a0b04a163d831eca2cbf015fa06fe7960577f413202dbcda211f2a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "175\n# Stop Words\nstopwords = nltk.corpus.stopwords.words('english')\n# Load 'stemmer'\nstemmer = SnowballStemmer(\"english\")\n# Functions for sentence tokenizer, to remove numeric tokens \nand raw #punctuation\ndef tokenize_and_stem(text):\n     tokens = [word for sent in nltk.sent_tokenize(text) for \nword in nltk.word_tokenize(sent)]\n    filtered_tokens = []\n    for token in tokens:\n        if re.search('[a-zA-Z]', token):\n            filtered_tokens.append(token)\n    stems = [stemmer.stem(t) for t in filtered_tokens]\n    return stems\ndef tokenize_only(text):\n     tokens = [word.lower() for sent in nltk.sent_tokenize(text) \nfor word in nltk.word_tokenize(sent)]\n    filtered_tokens = []\n    for token in tokens:\n        if re.search('[a-zA-Z]', token):\n            filtered_tokens.append(token)\n    return filtered_tokens\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n# tfidf vectorizer\ntfidf_vectorizer = TfidfVectorizer(max_df=0.8, max_features=200000,\n                                 min_df=0.2, stop_words='english',\n                                  use_idf=True, tokenizer=tokenize_ \nand_stem, ngram_range=(1,3))\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1181, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a81024f6-0760-43a1-9991-77ac1bca7f52": {"__data__": {"id_": "a81024f6-0760-43a1-9991-77ac1bca7f52", "embedding": null, "metadata": {"page_label": "176", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2d6ccfa2-165f-42e9-b17d-371a9daabf9a", "node_type": "4", "metadata": {"page_label": "176", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "bf421f4bf8952b239549ca4c61cdd97b9376db0ffac3d02aa4945ddc1c26f0ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "176\n#fit the vectorizer to data\ntfidf_matrix = tfidf_vectorizer.fit_transform(complaints)\nterms = tfidf_vectorizer.get_feature_names()\nprint(tfidf_matrix.shape)\n(200, 30)\n Step 5-3 Clustering using K-means\nLet\u2019s start the clustering:\n#Import Kmeans\nfrom sklearn.cluster import KMeans\n# Define number of clusters\nnum_clusters = 6\n#Running clustering algorithm\nkm = KMeans(n_clusters=num_clusters)\nkm.fit(tfidf_matrix)\n#final clusters\nclusters = km.labels_.tolist()\ncomplaints_data =  { 'rank': ranks, 'complaints': complaints, \n'cluster': clusters }\nframe = pd.DataFrame(complaints_data, index = [clusters] , \ncolumns = ['rank', 'cluster'])\n#number of docs per cluster\nframe['cluster'].value_counts()\n0 42\n1 37\n5 36\n3 36\n2 27\n4 22\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 775, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "522dae54-3634-4ef2-9b3d-60c964786b5c": {"__data__": {"id_": "522dae54-3634-4ef2-9b3d-60c964786b5c", "embedding": null, "metadata": {"page_label": "177", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ab45e9e-aba5-4de6-90c4-287a9cbe0628", "node_type": "4", "metadata": {"page_label": "177", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "597a2b6dceb402cee216698b664459194000f1fe86f44b7f4aee704e498563bc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "177\n Step 5-4 Identify cluster behavior\nIdentify which are the top 5 words that are nearest to the cluster centroid.\ntotalvocab_stemmed = []\ntotalvocab_tokenized = []\nfor i in complaints:\n    allwords_stemmed = tokenize_and_stem(i)\n    totalvocab_stemmed.extend(allwords_stemmed)\n    allwords_tokenized = tokenize_only(i)\n    totalvocab_tokenized.extend(allwords_tokenized)\nvocab_frame = pd.DataFrame({'words': totalvocab_tokenized}, \nindex = totalvocab_stemmed)\n#sort cluster centers by proximity to centroid\norder_centroids = km.cluster_centers_.argsort()[:, ::-1]\nfor i in range(num_clusters):\n    print(\"Cluster %d words:\" % i, end=\")\n    for ind in order_centroids[i, :6]:\n         print(' %s' % vocab_frame.ix[terms[ind].split(' ')].\nvalues.tolist()[0][0].encode('utf-8', 'ignore'), end=',')\n    print()\nCluster 0 words: b'needs', b'time', b'bank', b'information', b'told'\nCluster 1 words: b'account', b'bank', b'credit', b'time', b'months'\nCluster 2 words: b'debt', b'collection', b'number', b'credit', b\"n't\"\nCluster 3 words:  b'report', b'credit', b'credit', b'account', \nb'information'\nCluster 4 words: b'loan', b'payments', b'pay', b'months', b'state'\nCluster 5 words: b'payments', b'pay', b'told', b'did', b'credit'\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1273, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0ec4b0ad-ce47-4c25-ad98-7f9249723a94": {"__data__": {"id_": "0ec4b0ad-ce47-4c25-ad98-7f9249723a94", "embedding": null, "metadata": {"page_label": "178", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f2a2d583-0e5a-44a1-9e51-bae9c67b6cf1", "node_type": "4", "metadata": {"page_label": "178", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "ca30b25db20dac846c2ea785ef6bf862d80437fa329d69e74f12c6d7e36ea080", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "178\n Step 5-5 Plot the\u00a0clusters on\u00a0a\u00a02D graph\nFinally, we plot the clusters:\n#Similarity\nsimilarity_distance = 1 - cosine_similarity(tfidf_matrix)\n# Convert two components as we're plotting points in a  \ntwo- dimensional plane\nmds =  MDS(n_components=2, dissimilarity=\"precomputed\",  \nrandom_state=1)\npos =  mds.fit_transform(similarity_distance)  # shape  \n(n_components, n_samples)\nxs, ys = pos[:, 0], pos[:, 1]\n#Set up colors per clusters using a dict\ncluster_colors =  {0: '#1b9e77', 1: '#d95f02', 2: '#7570b3',  \n3: '#e7298a', 4: '#66a61e', 5: '#D2691E'}\n#set up cluster names using a dict\ncluster_names = {0: 'property, based, assist',\n                 1: 'business, card',\n                 2: 'authorized, approved, believe',\n                 3: 'agreement, application,business',\n                 4: 'closed, applied, additional',\n                 5: 'applied, card'}\n# Finally plot it\n%matplotlib inline\n#Create data frame that has the result of the MDS and the cluster\ndf = pd.DataFrame(dict(x=xs, y=ys, label=clusters))\ngroups = df.groupby('label')\n# Set up plot\nfig, ax = plt.subplots(figsize=(17, 9)) # set size\nfor name, group in groups:\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1197, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "8418ba7a-45a6-4225-a79c-918387bd6a62": {"__data__": {"id_": "8418ba7a-45a6-4225-a79c-918387bd6a62", "embedding": null, "metadata": {"page_label": "179", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "171c7bf9-2904-4ded-8341-2b9e4ada4733", "node_type": "4", "metadata": {"page_label": "179", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e0c9ab5ce17d8760239c2aa38b45ea8aa4cbd54801a61247df121563fdd6477d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "179\n    ax.plot(group.x, group.y, marker='o', linestyle=\", ms=20, \n            label=cluster_names[name], color=cluster_colors[name],\n            mec='none')\n    ax.set_aspect('auto')\n    ax.tick_params(\\\n        axis= 'x',\n        which='both',\n        bottom='off',\n        top='off',\n        labelbottom='off')\n    ax.tick_params(\\\n        axis= 'y',\n        which='both',\n        left='off',\n        top='off',\n        labelleft='off')\nax.legend(numpoints=1)\nplt.show()\n \nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 521, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "06341d7e-e1f2-4625-bc4f-0bc2d1ab7d3d": {"__data__": {"id_": "06341d7e-e1f2-4625-bc4f-0bc2d1ab7d3d", "embedding": null, "metadata": {"page_label": "180", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "82340a38-b2c6-42fd-9bc4-cb18b6beeb6d", "node_type": "4", "metadata": {"page_label": "180", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "9b3d3c51b7a2fe9fbac3971107bd34078df28cd38a1aa830be32b7a9bcd0d429", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "180\nThat\u2019s it. We have clustered 200 complaints into 6 groups using \nK-means clustering. It basically clusters similar kinds of complaints to 6 \nbuckets using TF-IDF .\u00a0We can also use the word embeddings and solve this \nto achieve better clusters. 2D graphs provide a good look into the cluster's \nbehavior and if we look, we will see that the same color dots (docs) are \nlocated closer to each other.\n Recipe 5-6. NLP in\u00a0a\u00a0Search Engine\nIn this recipe, we are going to discuss what it takes to build a search engine \nfrom an NLP standpoint. Implementation of the same is beyond the scope \nof this book.\n Problem\nYou want to know the architecture and NLP pipeline to build a search engine.\n Solution\nFigure 5-1 shows the whole process. Each step is explained in the \u201cHow It \nWorks\u201d section.\nFigure 5-1. The NLP process in a search engine\nChapter 5  Implement Ing Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 884, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "00e5d97a-2eb0-4e93-b151-91ca48e8aa26": {"__data__": {"id_": "00e5d97a-2eb0-4e93-b151-91ca48e8aa26", "embedding": null, "metadata": {"page_label": "181", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b29ad751-f79a-4c42-9b88-c3c083b74488", "node_type": "4", "metadata": {"page_label": "181", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a86140573294d08090c4f17595d3b13b16fddff8eef80d6b825adb31ff010bb0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "181\n How It Works\nLet\u2019s follow and understand the above architecture step by step in this \nsection to build the search engine from an NLP standpoint.\n Step 6-1 Preprocessing\nWhenever the user enters the search query, it is passed on to the NLP \npreprocessing pipeline:\n 1. Removal of noise and stop words\n 2. Tokenization\n 3. Stemming\n 4. Lemmatization\n Step 6-2 The\u00a0entity extraction model\nOutput from the above pipeline is fed into the entity extraction model. \nWe can build the customized entity recognition model by using any of the \nlibraries like StanfordNER or NLTK.\nOr you can build an entity recognition model from scratch using \nconditional random fields or Markov models.\nFor example, suppose we are building a search engine for an \ne-commerce giant. Below are entities that we can train the model on:\n\u2022 Gender\n\u2022 Color\n\u2022 Brand\n\u2022 Product Category\n\u2022 Product Type\n\u2022 Price\n\u2022 Size\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 932, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d366bcf8-baae-4868-aae2-60c54a62bd86": {"__data__": {"id_": "d366bcf8-baae-4868-aae2-60c54a62bd86", "embedding": null, "metadata": {"page_label": "182", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "29c5abe5-3b34-49f8-af4e-f61c18a6ac7c", "node_type": "4", "metadata": {"page_label": "182", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "675550b37446e156cc51eaf5c24ea0f44c0183ff6428d3527ecc37f95b012a6e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "182\nAlso, we can build named entity disambiguation using deep \nlearning frameworks like RNN and LSTM.\u00a0This is very important for the \nentities extractor to understand the content in which the entities are \nused. For example, pink can be a color or a brand. NED helps in such \ndisambiguation.\nNERD Model building steps:\n\u2022 Data cleaning and preprocessing\n\u2022 Training NER Model\n\u2022 Testing and Validation\n\u2022 Deployment\nWays to train/build NERD model:\n\u2022 Named Entity Recognition and Disambiguation\n\u2022 Stanford NER with customization\n\u2022 Recurrent Neural Network (RNN)\u00a0\u2013 LSTM (Long Short- \nTerm Memory) to use context for disambiguation\n\u2022 Joint Named Entity Recognition and Disambiguation\n Step 6-3 Query enhancement/expansion\nIt is very important to understand the possible synonyms of the entities to \nmake sure search results do not miss out on potential relevance. Say, for \nexample, men\u2019s shoes can also be called as male shoes, men\u2019s sports shoes, \nmen\u2019s formal shoes, men\u2019s loafers, men\u2019s sneakers.\nUse locally-trained word embedding (using Word2Vec / GloVe \nModel ) to achieve this.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1124, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f074787a-e24c-4795-84c2-fb3fb3573ee8": {"__data__": {"id_": "f074787a-e24c-4795-84c2-fb3fb3573ee8", "embedding": null, "metadata": {"page_label": "183", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e82ba89-6557-4b8c-b8c0-bc74b8627efc", "node_type": "4", "metadata": {"page_label": "183", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "71a144490c7e5e4430e3aeedb7eb6f3d0eda32c3732f3319c550c049fe513dca", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "183\n Step 6-4 Use a\u00a0search platform\nSearch platforms such as Solr or Elastic Search have major features that \ninclude full-text search hit highlighting, faceted search, real-time indexing, \ndynamic clustering, and database integration. This is not related to \nNLP; as an end-to-end application point of view, we have just given an \nintroduction of what this is.\n Step 6-5 Learning to\u00a0rank\nOnce the search results are fetched from Solr or Elastic Search, they should \nbe ranked based on the user preferences using the past behaviors.\nChapter 5  ImplementIng Industry applICatIons", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 578, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9c46119a-ee2c-4060-9ce4-7130d2301244": {"__data__": {"id_": "9c46119a-ee2c-4060-9ce4-7130d2301244", "embedding": null, "metadata": {"page_label": "185", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77215878-ae99-4a33-a21c-9d6063252670", "node_type": "4", "metadata": {"page_label": "185", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5c071e59d7ffbb1440169f8eb8fde9d960c6716d5c6b5ab29e6789d4e0e8dd88", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "185\u00a9 Akshay Kulkarni and Adarsha Shivananda 2019 \nA. Kulkarni and A. Shivananda, Natural Language Processing Recipes,  \nhttps://doi.org/10.1007/978-1-4842-4267-4_6\nCHAPTER 6\nDeep Learning for\u00a0NLP\nIn this chapter, we will implement deep learning for NLP:\nRecipe 1. Information retrieval using deep learning\nRecipe 2. Text classification using CNN, RNN, LSTM\nRecipe 3.  Predicting the next word/sequence of \nwords using LSTM for Emails\n Introduction to\u00a0Deep Learning\nDeep learning is a subfield of machine learning that is inspired by the \nfunction of the brain. Just like how neurons are interconnected in the \nbrain, neural networks also work the same. Each neuron takes input, does \nsome kind of manipulation within the neuron, and produces an output \nthat is closer to the expected output (in the case of labeled data).\nWhat happens within the neuron is what we are interested in: to get to \nthe most accurate results. In very simple words, it\u2019s giving weight to every \ninput and generating a function to accumulate all these weights and pass it \nonto the next layer, which can be the output layer eventually.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1111, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ce293d1f-bf64-4311-bc5f-dd72f3791f2d": {"__data__": {"id_": "ce293d1f-bf64-4311-bc5f-dd72f3791f2d", "embedding": null, "metadata": {"page_label": "186", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "08c98c90-cc25-48e0-ad44-4091af21472e", "node_type": "4", "metadata": {"page_label": "186", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "71ea4722a97d7440fce0afc542f134fa1717435c1cdc793cff9e67f665bb790b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "186\nThe network has 3 components:\n\u2022 Input layer\n\u2022 Hidden layer/layers\n\u2022 Output layer\n \nThe functions can be of different types based on the problem or the \ndata. These are also called activation functions. Below are the types.\n\u2022 Linear Activation functions: A linear neuron takes a \nlinear combination of the weighted inputs; and the \noutput can take any value between -infinity to infinity.\n\u2022 Nonlinear Activation function: These are the most used \nones, and they make the output restricted between \nsome range:\n\u2022 Sigmoid or Logit Activation Function: Basically, \nit scales down the output between 0 and 1 \nby applying a log function, which makes the \nclassification problems easier.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 717, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af817e26-7d99-4854-84e1-090205a7122d": {"__data__": {"id_": "af817e26-7d99-4854-84e1-090205a7122d", "embedding": null, "metadata": {"page_label": "187", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b4884eb8-62e5-4a3a-a4f0-cdaefffd24cc", "node_type": "4", "metadata": {"page_label": "187", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "18017450752c3af10a06bc80f095f003aba2f7e565d9e95747e17441a32683e7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "187\n\u2022 Softmax function: Softmax is almost similar to \nsigmoid, but it calculates the probabilities of the \nevent over \u2018n\u2019 different classes, which will be useful \nto determine the target in multiclass classification \nproblems.\n\u2022 Tanh Function: The range of the tanh function is \nfrom (-1 to 1), and the rest remains the same as \nsigmoid.\n\u2022 Rectified Linear Unit Activation function: ReLU \nconverts anything that is less than zero to zero. So, \nthe range becomes 0 to infinity.\nWe still haven\u2019t discussed how training is carried out in neural \nnetworks. Let\u2019s do that by taking one of the networks as an example, which \nis the convolutional neural network.\n Convolutional Neural Networks\nConvolutional Neural Networks (CNN) are similar to ordinary neural \nnetworks but have multiple hidden layers and a filter called the \nconvolution layer. CNN is successful in identifying faces, objects, and \ntraffic signs and also used in self-driving cars.\n Data\nAs we all know, algorithms work basically on numerical data. Images and \ntext data are unstructured data as we discussed earlier, and they need to be \nconverted into numerical values even before we start anything.\n\u2022 Image: Computer takes an image as an array of pixel \nvalues. Depending on the resolution and size of the \nimage, it will see an X Y x Z array of numbers.  \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1354, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9d2e69db-6b6b-4b9d-91d1-73284ef39b9d": {"__data__": {"id_": "9d2e69db-6b6b-4b9d-91d1-73284ef39b9d", "embedding": null, "metadata": {"page_label": "188", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "173860ac-e8bc-4ddd-a7be-cf5accc32df1", "node_type": "4", "metadata": {"page_label": "188", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "54f1332b210492ee5102c2c31ca63c91430379fa09341ac0a021555e0e7fdbc9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "188\nFor example, there is a color image and its size is 480 x \n480 pixels. The representation of the array will be 480 x  \n480 x 3 where 3 is the RGB value of the color. Each of \nthese numbers varies from 0 to 255, which describes \nthe pixel intensity/density at that point. The concept is \nthat if given the computer and this array of numbers, it \nwill output the probability of the image being a certain \nclass in case of a classification problem.\n\u2022 Text: We already discussed throughout the book how to \ncreate features out of the text. We can use any of those \ntechniques to convert text to features. RNN and LSTM \nare suited better for text-related solutions that we will \ndiscuss in the next sections. \n \n Architecture\nCNN is a special case of a neural network with an input layer, output layer, \nand multiple hidden layers. The hidden layers have 4 different procedures \nto complete the network. Each one is explained in detail.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 968, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "008e7cab-2652-4a68-b89f-d06857898dfc": {"__data__": {"id_": "008e7cab-2652-4a68-b89f-d06857898dfc", "embedding": null, "metadata": {"page_label": "189", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1c7b52eb-1049-4072-9b8f-efc2200435b1", "node_type": "4", "metadata": {"page_label": "189", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5481d753ca9474c404cbf1fb86c3003acda010953df839a6d0072040285491c7", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "189\nConvolution\nThe Convolution layer is the heart of a Convolutional Neural Network, \nwhich does most of the computational operations. The name comes from \nthe \u201cconvolution\u201d operator that extracts features from the input image. \nThese are also called filters (Orange color 3*3 matrix). The matrix formed \nby sliding the filter over the full image and calculating the dot product \nbetween these 2 matrices is called the \u2018Convolved Feature\u2019 or \u2018 Activation \nMap\u2019 or the \u2018Feature Map\u2019 . Suppose that in table data, different types of \nfeatures are calculated like \u201cage\u201d from \u201cdate of birth. \u201d The same way here \nalso, straight edges, simple colors, and curves are some of the features that \nthe filter will extract from the image.\nDuring the training of the CNN, it learns the numbers or values present \ninside the filter and uses them on testing data. The greater the number \nof features, the more the image features get extracted and recognize all \npatterns in unseen images.\nNonlinearity (ReLU)\n \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1030, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af14e3f9-4fde-4f85-aa9c-28d25fc50758": {"__data__": {"id_": "af14e3f9-4fde-4f85-aa9c-28d25fc50758", "embedding": null, "metadata": {"page_label": "190", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8f6d6eff-5772-4b1c-abb5-bb62a6223d26", "node_type": "4", "metadata": {"page_label": "190", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b2203a6bbb3104229cb2db64c7af14115746b1980147c7c15da5643750d206d9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "190\nReLU (Rectified Linear Unit) is a nonlinear function that is used after a \nconvolution layer in CNN architecture. It replaces all negative values in \nthe matrix to zero. The purpose of ReLU is to introduce nonlinearity in the \nCNN to perform better.\nPooling\n \nPooling or subsampling is used to decrease the dimensionality of the \nfeature without losing important information. It\u2019s done to reduce the huge \nnumber of inputs to a full connected layer and computation required to \nprocess the model. It also helps to reduce the overfitting of the model. It \nuses a 2 x 2 window and slides over the image and takes the maximum \nvalue in each region as shown in the figure. This is how it reduces \ndimensionality.\nFlatten, Fully Connected, and\u00a0Softmax Layers\nThe last layer is a dense layer that needs feature vectors as input. But  \nthe output from the pooling layer is not a 1D feature vector. This process  \nof converting the output of convolution to a feature vector is called \nflattening. The Fully Connected layer takes an input from the flatten layer \nand gives out an N-dimensional vector where N is the number of classes.  \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1164, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "4aa58d5b-3ea8-4788-8d52-be7ee0af0bfc": {"__data__": {"id_": "4aa58d5b-3ea8-4788-8d52-be7ee0af0bfc", "embedding": null, "metadata": {"page_label": "191", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd5f0495-e2e0-4b7b-86fb-91a20f7bc5bf", "node_type": "4", "metadata": {"page_label": "191", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d40af098502b01877b7a95826c55b310d3d8e5a91a3627380988a607616fdce0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "191\nThe function of the fully connected layer is to use these features for \nclassifying the input image into various classes based on the loss function \non the training dataset. The Softmax function is used at the very end to \nconvert these N-dimensional vectors into a probability for each class, \nwhich will eventually classify the image into a particular class.\n Backpropagation: Training the\u00a0Neural Network\nIn normal neural networks, you basically do Forward Propagation to get \nthe output and check if this output is correct and calculate the error. In \nBackward Propagation, we are going backward through your network that \nfinds the partial derivatives of the error with respect to each weight.\nLet\u2019s see how exactly it works.\nThe input image is fed into the network and completes forward \npropagation, which is convolution, ReLU, and pooling operations with \nforward propagation in the fully Connected layer and generates output \nprobabilities for each class. As per the feed forward rule, weights are \nrandomly assigned and complete the first iteration of training and also \noutput random probabilities. After the end of the first step, the network \ncalculates the error at the output layer using\nTotal Error = \u2211 \u00bd (target probability\u00a0\u2013 output probability)2\nNow, your backpropagation starts to calculate the gradients of the \nerror with respect to all weights in the network and use gradient descent \nto update all filter values and weights, which will eventually minimize \nthe output error. Parameters like the number of filters, filter sizes, and the \narchitecture of the network will be finalized while building your network. \nThe filter matrix and connection weights will get updated for each run. The \nwhole process is repeated for the complete training set until the error is \nminimized.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1835, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f5a5722d-263e-42d6-a8dc-f52891a73c6c": {"__data__": {"id_": "f5a5722d-263e-42d6-a8dc-f52891a73c6c", "embedding": null, "metadata": {"page_label": "192", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac07b51a-77a3-438a-9979-b5d233fd5913", "node_type": "4", "metadata": {"page_label": "192", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "96807e2f430f3e17f30a63c8cae533362b0ededd2e6f639e20bc06aa553cee99", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "192\n Recurrent Neural Networks\nCNNs are basically used for computer vision problems but fail to solve \nsequence models. Sequence models are those where even a sequence \nof the entity also matters. For example, in the text, the order of the words \nmatters to create meaningful sentences. This is where RNNs come into the \npicture and are useful with sequential data because each neuron can use \nits memory to remember information about the previous step.\n \nIt is quite complex to understand how exactly RNN is working. If you \nsee the above figure, the recurrent neural network is taking the output from \nthe hidden layer and sending it back to the same layer before giving the \nprediction.\n Training RNN\u00a0\u2013 Backpropagation Through Time (BPTT)\nWe know how feed forward and backpropagation work from CNN, so let\u2019s \nsee how training is done in case of RNN.\n \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 887, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "86cc07f6-aa82-4e47-8b31-ec08e82f75a5": {"__data__": {"id_": "86cc07f6-aa82-4e47-8b31-ec08e82f75a5", "embedding": null, "metadata": {"page_label": "193", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ac260c0c-fb46-4e91-a248-06ede4262334", "node_type": "4", "metadata": {"page_label": "193", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "99040865afb0eee35bbff84785ab7c70331690d82d207b66a9b284eca19f3c27", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "193\nIf we just discuss the hidden layer, it\u2019s not only taking input from \nthe hidden layer, but we can also add another input to the same hidden \nlayer. Now the backpropagation happens like any other previous training \nwe have seen; it\u2019s just that now it is dependent on time. Here error is \nbackpropagated from the last timestamp to the first through unrolling the \nhidden layers. This allows calculating the error for each timestamp and \nupdating the weights. Recurrent networks with recurrent connections \nbetween hidden units read an entire sequence and then produce a \nrequired output.\nWhen the values of a gradient are too small and the model takes way \ntoo long to learn, this is called Vanishing Gradients. This problem is solved \nby LSTMs.\n Long Short-Term Memory (LSTM)\nLSTMs are a kind of RNNs with betterment in equation and \nbackpropagation, which makes it perform better. LSTMs work almost \nsimilarly to RNN, but these units can learn things with very long time gaps, \nand they can store information just like computers.\n \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1069, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "51fd4089-5014-443a-89ad-193ea682a28c": {"__data__": {"id_": "51fd4089-5014-443a-89ad-193ea682a28c", "embedding": null, "metadata": {"page_label": "194", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "656adb28-d9eb-42fa-8a6d-672170726148", "node_type": "4", "metadata": {"page_label": "194", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "896e62be6a0ad140efffa99f30bda221e9af706ce62bd2f927ba742d4996964a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "194\nThe algorithm learns the importance of the word or character through \nweighing methodology and decides whether to store it or not. For this, it \nuses regulated structures called gates that have the ability to remove or add \ninformation to the cell. These cells have a sigmoid layer that decides how \nmuch information should be passed. It has three layers, namely \u201cinput, \u201d \n\u201cforget, \u201d and \u201coutput\u201d to carry out this process.\nGoing in depth on how CNN and RNNs work is beyond the scope of \nthis book. We have mentioned references at the end of the book if anyone \nis interested in learning about this in more depth.\n Recipe 6-1. Retrieving Information\nInformation retrieval is one of the highly used applications of NLP and it is \nquite tricky. The meaning of the words or sentences not only depends on \nthe exact words used but also on the context and meaning. Two sentences \nmay be of completely different words but can convey the same meaning. \nWe should be able to capture that as well.\nAn information retrieval (IR) system allows users to efficiently \nsearch documents and retrieve meaningful information based on a \nsearch text/query.\n \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1178, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6d49d8a4-5306-4e76-affb-ac6299bc28c7": {"__data__": {"id_": "6d49d8a4-5306-4e76-affb-ac6299bc28c7", "embedding": null, "metadata": {"page_label": "195", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d9f0c233-0e5f-40b7-a717-33f7daf1a322", "node_type": "4", "metadata": {"page_label": "195", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "baaba987f471d4330115fde991ec6a3c717ae96a4c19205ad502278dca99b768", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "195\n Problem\nInformation retrieval using word embeddings.\n Solution\nThere are multiple ways to do Information retrieval. But we will see how to \ndo it using word embeddings, which is very effective since it takes context \nalso into consideration. We discussed how word embeddings are built in \nChapter 3. We will just use the pretrained word2vec in this case.\nLet\u2019s take a simple example and see how to build a document retrieval \nusing query input. Let\u2019s say we have 4 documents in our database as \nbelow. (Just showcasing how it works. We will have too many documents \nin a real-world application.)\nDoc1 = [\"With the Union cabinet approving the amendments to the \nMotor Vehicles Act, 2016, those caught for drunken driving will \nhave to have really deep pockets, as the fine payable in court \nhas been enhanced to Rs 10,000 for first-time offenders.\" ]\nDoc2 = [\"Natural language processing (NLP) is an area of \ncomputer science and artificial intelligence concerned with the \ninteractions between computers and human (natural) languages, \nin particular how to program computers to process and analyze \nlarge amounts of natural language data.\"]\nDoc3 = [\"He points out that public transport is very good in \nMumbai and New Delhi, where there is a good network of suburban \nand metro rail systems.\"]\nChapter 6  Deep Learning for\u00a0 nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1332, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b161bda9-9d3f-4a3e-b53c-c67e209b2b3e": {"__data__": {"id_": "b161bda9-9d3f-4a3e-b53c-c67e209b2b3e", "embedding": null, "metadata": {"page_label": "196", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8aa2fe1-9c24-4540-91d1-3dab1eb0a034", "node_type": "4", "metadata": {"page_label": "196", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d612f08f489f4f6cc60472482798cc18ce7ad87dd2ca198a62f894cb3319868a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "196\nDoc4 = [\"But the man behind the wickets at the other end was \nwatching just as keenly. With an affirmative nod from Dhoni, \nIndia captain Rohit Sharma promptly asked for a review. Sure \nenough, the ball would have clipped the top of middle and leg.\"]\nAssume we have numerous documents like this. And you want to retrieve \nthe most relevant once for the query \u201ccricket. \u201d Let\u2019s see how to build it.\nquery = \"cricket\"\n How It Works\n Step 1-1 Import the\u00a0libraries\nHere are the libraries:\nimport gensim\nfrom gensim.models import Word2Vec\nimport numpy as np\nimport nltk\nimport itertools\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nimport scipy\nfrom scipy import spatial\nfrom nltk.tokenize.toktok import ToktokTokenizer\nimport re\ntokenizer = ToktokTokenizer()\nstopword_list = nltk.corpus.stopwords.words('english')   \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 893, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "017bdc6c-5669-4b3e-b197-0be6124329fb": {"__data__": {"id_": "017bdc6c-5669-4b3e-b197-0be6124329fb", "embedding": null, "metadata": {"page_label": "197", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "545fcc79-cde7-4489-b822-f42eb2b0fa63", "node_type": "4", "metadata": {"page_label": "197", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "80f2cee5309d02003be395bb23da7f7293798cb3a5c725bc0bcf067abcb084a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "197\n Step 1-2 Create/import documents\nRandomly taking sentences from the internet:\nDoc1 = [\"With the Union cabinet approving the amendments to the \nMotor Vehicles Act, 2016, those caught for drunken driving will \nhave to have really deep pockets, as the fine payable in court \nhas been enhanced to Rs 10,000 for first-time offenders.\" ]\nDoc2 = [\"Natural language processing (NLP) is an area of \ncomputer science and artificial intelligence concerned with the \ninteractions between computers and human (natural) languages, \nin particular how to program computers to process and analyze \nlarge amounts of natural language data.\"]\nDoc3 = [\"He points out that public transport is very good in \nMumbai and New Delhi, where there is a good network of suburban \nand metro rail systems.\"]\nDoc4 = [\"But the man behind the wickets at the other end was \nwatching just as keenly. With an affirmative nod from Dhoni, \nIndia captain Rohit Sharma promptly asked for a review. Sure \nenough, the ball would have clipped the top of middle and leg.\"]\n# Put all the documents in one list\nfin= Doc1+Doc2+Doc3+Doc4\n Step 1-3 Download word2vec\nAs mentioned earlier, we are going to use the word embeddings to solve \nthis problem. Download word2vec from the below link:\nhttps://drive.google.com/file/d/0B7XkCwpI5KDYNlNUTTlSS21pQmM/edit\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1344, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "18d24285-d692-45cd-a73d-fff00440c841": {"__data__": {"id_": "18d24285-d692-45cd-a73d-fff00440c841", "embedding": null, "metadata": {"page_label": "198", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "372c792f-c261-4e70-a33b-986ec93bf056", "node_type": "4", "metadata": {"page_label": "198", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "37d9f067f83a8ebeb077bfba490810d2cdaee58d3b4ddfb741d1dd17cc47f9ed", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "198\n#load the model\nmodel = gensim.models.KeyedVectors.load_word2vec_format \n('/GoogleNews-vectors-negative300.bin', binary=True) \n Step 1-4 Create IR system\nNow we build the information retrieval system:\n#Preprocessing\ndef remove_stopwords(text, is_lower_case=False):\n    pattern = r'[^a-zA-z0-9\\s]'\n    text = re.sub(pattern, \", \".join(text))\n    tokens = tokenizer.tokenize(text)\n    tokens = [token.strip() for token in tokens]\n    if is_lower_case:\n        filtered_tokens =  [token for token in tokens if token \nnot in stopword_list]\n    else:\n        filtered_tokens =  [token for token in tokens if token.\nlower() not in stopword_list]\n    filtered_text = ' '.join(filtered_tokens)\n    return filtered_text\n# Function to get the embedding vector for n dimension, we have \nused \"300\"\ndef get_embedding(word):\n    if word in model.wv.vocab:\n        return model[x]\n    else:\n        return np.zeros(300)\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 942, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7f783308-9c61-4351-b411-4dd97bfa2c4a": {"__data__": {"id_": "7f783308-9c61-4351-b411-4dd97bfa2c4a", "embedding": null, "metadata": {"page_label": "199", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7767a2db-642e-4808-8a35-2e74a62642be", "node_type": "4", "metadata": {"page_label": "199", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e66c4f53efe70f175b8bf18c4506f57bec5930def9c2ecd0b7be97e07c9126e8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "199\nFor every document, we will get a lot of vectors based on the number of \nwords present. We need to calculate the average vector for the document \nthrough taking a mean of all the word vectors.\n# Getting average vector for each document\nout_dict =  {}\nfor sen in fin:\n     average_vector = (np.mean(np.array([get_embedding(x) for x \nin nltk.word_tokenize(remove_stopwords(sen))]), axis=0))\n    dict = { sen : (average_vector) }\n    out_dict.update(dict)\n# Function to calculate the similarity between the query vector \nand document vector\ndef get_sim(query_embedding, average_vector_doc):\n     sim = [(1 - scipy.spatial.distance.cosine(query_embedding, \naverage_vector_doc))]\n    return sim\n# Rank all the documents based on the similarity to get \nrelevant docs\ndef Ranked_documents(query):\n     query_words =  (np.mean(np.array([get_embedding(x) for x in \nnltk.word_tokenize(query.lower())],dtype=float), axis=0))\n    rank = []\n    for k,v in out_dict.items():\n        rank.append((k, get_sim(query_words, v)))\n    rank = sorted(rank,key=lambda t: t[1], reverse=True)\n    print('Ranked Documents :')\n    return rank\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1152, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f720afb1-6b8a-4466-ab92-a87a058d5c94": {"__data__": {"id_": "f720afb1-6b8a-4466-ab92-a87a058d5c94", "embedding": null, "metadata": {"page_label": "200", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4c109406-2c19-4313-8501-31ed77725522", "node_type": "4", "metadata": {"page_label": "200", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "7cbbd220014984f13df3ff787a5ef6f4c155e9222cb5a6cdd29a01f787b1c090", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "200\n Step 1-5 Results and\u00a0applications\nLet\u2019s see how the information retrieval system we built is working with a \ncouple of examples.\n# Call the IR function with a query\nRanked_documents(\"cricket\")\nResult :\n[('But the man behind the wickets at the other end was watching \njust as keenly. With an affirmative nod from Dhoni, India \ncaptain Rohit Sharma promptly asked for a review. Sure enough, \nthe ball would have clipped the top of middle and leg.',\n  [0.44954327116871795]),\n ('He points out that public transport is very good in Mumbai \nand New Delhi, where there is a good network of suburban and \nmetro rail systems.',\n  [0.23973446569030055]),\n ('With the Union cabinet approving the amendments to the Motor \nVehicles Act, 2016, those caught for drunken driving will have \nto have really deep pockets, as the fine payable in court has \nbeen enhanced to Rs 10,000 for first-time offenders.',\n  [0.18323712012013349]),\n ('Natural language processing (NLP) is an area of computer \nscience and artificial intelligence concerned with the \ninteractions between computers and human (natural) languages, \nin particular how to program computers to process and analyze \nlarge amounts of natural language data.',\n  [0.17995060855459855])]\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1267, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "84d646bb-d583-49ef-ab52-689fcfe46590": {"__data__": {"id_": "84d646bb-d583-49ef-ab52-689fcfe46590", "embedding": null, "metadata": {"page_label": "201", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cc156b81-3589-400d-a446-ebd6e1397926", "node_type": "4", "metadata": {"page_label": "201", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "291087db5392150c2d41361d1679c895c2420b8db9c7816bcb689bd5ad937482", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "201\nIf you see, doc4 (on top in result), this will be most relevant for the \nquery \u201ccricket\u201d even though the word \u201ccricket\u201d is not even mentioned once \nwith the similarity of 0.449.\nLet\u2019s take one more example as may be driving.\nRanked_documents(\"driving\")\n[('With the Union cabinet approving the amendments to the Motor \nVehicles Act, 2016, those caught for drunken driving will have \nto have really deep pockets, as the fine payable in court has \nbeen enhanced to Rs 10,000 for first-time offenders.',\n  [0.35947287723800669]),\n ('But the man behind the wickets at the other end was watching \njust as keenly. With an affirmative nod from Dhoni, India \ncaptain Rohit Sharma promptly asked for a review. Sure enough, \nthe ball would have clipped the top of middle and leg.',\n  [0.19042556935316801]),\n ('He points out that public transport is very good in Mumbai \nand New Delhi, where there is a good network of suburban and \nmetro rail systems.',\n  [0.17066536985237601]),\n ('Natural language processing (NLP) is an area of computer \nscience and artificial intelligence concerned with the \ninteractions between computers and human (natural) languages, \nin particular how to program computers to process and analyze \nlarge amounts of natural language data.',\n  [0.088723080005327359])]\nAgain, since driving is connected to transport and the Motor Vehicles \nAct, it pulls out the most relevant documents on top. The first 2 documents \nare relevant to the query.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1493, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7e221854-309e-4b4d-935a-d0f23f282472": {"__data__": {"id_": "7e221854-309e-4b4d-935a-d0f23f282472", "embedding": null, "metadata": {"page_label": "202", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d174918a-3a87-405b-b195-b39afd3b2620", "node_type": "4", "metadata": {"page_label": "202", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d9f93161162d9b90fb645411951e27f773875c8a6f27cbb3f191090c646e18b8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "202\nWe can use the same approach and scale it up for as many documents \nas possible. For more accuracy, we can build our own embeddings, as we \nlearned in Chapter 3, for specific industries since the one we are using is \ngeneralized.\nThis is the fundamental approach that can be used for many \napplications like the following:\n\u2022 Search engines\n\u2022 Document retrieval\n\u2022 Passage retrieval\n\u2022 Question and answer\n \nIt\u2019s been proven that results will be good when queries are longer and \nthe result length is shorter. That\u2019s the reason we don\u2019t get great results in \nsearch engines when the search query has lesser number of words.\n Recipe 6-2. Classifying Text with\u00a0Deep \nLearning\nIn this recipe, let us build a text classifier using deep learning approaches.\nChapter 6  Deep Learning for\u00a0 nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 787, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "37ac774b-6b27-443f-93eb-4cac81e900fc": {"__data__": {"id_": "37ac774b-6b27-443f-93eb-4cac81e900fc", "embedding": null, "metadata": {"page_label": "203", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "578bd1ef-90bc-4809-9d85-6667645212b7", "node_type": "4", "metadata": {"page_label": "203", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "565145077d41ba662d427586e52cf0819415d29d9fb956d23d012715939c0d48", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "203\n Problem\nWe want to build a text classification model using CNN, RNN, and LSTM.\n Solution\nThe approach and NLP pipeline would remain the same as discussed \nearlier. The only change would be that instead of using machine learning \nalgorithms, we would be building models using deep learning algorithms.\n How It Works\nLet\u2019s follow the steps in this section to build the email classifier using the \ndeep learning approaches.\n Step 2-1 Understanding/defining business problem\nEmail classification (spam or ham). We need to classify spam or ham email \nbased on email content.\n Step 2-2 Identifying potential data sources, collection, \nand\u00a0understanding\nUsing the same data used in Recipe 4-6 from Chapter 4:\n#read file\nfile_content = pd.read_csv('spam.csv', encoding = \"ISO-8859-1\")\n#check sample content in the email\nfile_content['v2'][1]\n#output\n'Ok lar... Joking wif u oni...'\nChapter 6  Deep Learning for\u00a0 nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 912, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "da607bee-1929-423d-ac35-3144e81a82f9": {"__data__": {"id_": "da607bee-1929-423d-ac35-3144e81a82f9", "embedding": null, "metadata": {"page_label": "204", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14d26aa6-5446-4e09-bc2d-a337a5a8b8db", "node_type": "4", "metadata": {"page_label": "204", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b87566f3b0e3fd0a52e7288e3c80585cbf92b32d826d029d41e30bc7eb59b13e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "204\n Step 2-3 Text preprocessing\nLet\u2019s preprocess the data:\n#Import library\nfrom nltk.corpus import stopwords\nfrom nltk import *\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.stem import WordNetLemmatizer\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n# Remove stop words\nstop = stopwords.words('english')\nfile_content['v2'] = file_content['v2'].apply(lambda x: \" \n\".join(x for x in x.split() if x not in stop))\n# Delete unwanted columns\nEmail_Data = file_content[['v1', 'v2']]\n# Rename column names\nEmail_Data = Email_Data.rename(columns={\"v1\":\"Target\", \"v2\":\"Email\"})\nEmail_Data.head()\n #output\n    Target Email\n0   ham    Go jurong point, crazy.. Available bugis n gre...\n1   ham    Ok lar... Joking wif u oni...\n2   spam   Free entry 2 wkly comp win FA Cup final tkts 2...\n3   ham    U dun say early hor... U c already say...\n4   ham    Nah I think goes usf, lives around though\n#Delete punctuations, convert text in lower case and delete the \ndouble space\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1055, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "04d13512-1235-49c2-8bbe-a41195dca93a": {"__data__": {"id_": "04d13512-1235-49c2-8bbe-a41195dca93a", "embedding": null, "metadata": {"page_label": "205", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2c31c969-ae0f-4f57-ae1a-1d527bf942d1", "node_type": "4", "metadata": {"page_label": "205", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "bc28cdefa3cecd4b803b2c8b7b76f269fe35cdc2e548c62ae37df11d32d1c5c9", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "205\nEmail_Data['Email'] = Email_Data['Email'].apply(lambda x: \nre.sub('[!@#$:).;,?&]', \", x.lower()))\nEmail_Data['Email'] = Email_Data['Email'].apply(lambda x: \nre.sub(' ', ' ', x))\nEmail_Data['Email'].head(5)\n#output\n0 go jurong point crazy available bugis n great ...\n1 ok lar joking wif u oni\n2 free entry 2 wkly comp win fa cup final tkts 2...\n3 u dun say early hor u c already say\n4 nah i think goes usf lives around though\nName: Email, dtype: object\n#Separating text(input) and target classes\nlist_sentences_rawdata = Email_Data[\"Email\"].fillna(\"_na_\").values\nlist_classes = [\"Target\"]\ntarget = Email_Data[list_classes].values\nTo_Process=Email_Data[['Email', 'Target']]\n Step 2-4 Data preparation for\u00a0model building\nNow we prepare the data:\n#Train and test split with 80:20 ratio\ntrain, test = train_test_split(To_Process, test_size=0.2)\n# Define the sequence lengths, max number of words and \nembedding dimensions\n# Sequence length of each sentence. If more, truncate. If less, \npad with zeros\nMAX_SEQUENCE_LENGTH = 300\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1059, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6c3e0c68-e587-41a9-8298-9a389cf7441f": {"__data__": {"id_": "6c3e0c68-e587-41a9-8298-9a389cf7441f", "embedding": null, "metadata": {"page_label": "206", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "45fc436e-de3f-4ebc-9b61-0e49198d66c7", "node_type": "4", "metadata": {"page_label": "206", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e76bde77191cddbdfe8fe1252ff1d1a362d9c21ecc58a5c5c72d705bedb4fe58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "206\n# Top 20000 frequently occurring words\nMAX_NB_WORDS = 20000\n# Get the frequently occurring words\n tokenizer = Tokenizer(num_words=MAX_NB_WORDS)\ntokenizer.fit_on_texts(train.Email)\ntrain_sequences = tokenizer.texts_to_sequences(train.Email)\ntest_sequences = tokenizer.texts_to_sequences(test.Email)\n# dictionary containing words and their index\nword_index = tokenizer.word_index\n# print(tokenizer.word_index)\n# total words in the corpus\nprint('Found %s unique tokens.' % len(word_index))\n# get only the top frequent words on train\ntrain_data = pad_sequences(train_sequences, maxlen=MAX_\nSEQUENCE_LENGTH)\n# get only the top frequent words on test\ntest_data = pad_sequences(test_sequences, maxlen=MAX_SEQUENCE_\nLENGTH)\nprint(train_data.shape)\nprint(test_data.shape)\n#output\nFound 8443 unique tokens.\n(4457, 300)\n(1115, 300)\ntrain_labels = train['Target']\ntest_labels = test['Target'] \n#import library\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 934, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "93a6947c-4c20-43c6-8cac-ca01e143b094": {"__data__": {"id_": "93a6947c-4c20-43c6-8cac-ca01e143b094", "embedding": null, "metadata": {"page_label": "207", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7049309e-028c-4a9f-bb50-7e9efcef6c9c", "node_type": "4", "metadata": {"page_label": "207", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "6e12b99df094f34c8b81682e28117fc7de061ddf5e0fe66d3bf90f5d37e1e695", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "207\nfrom sklearn.preprocessing import LabelEncoder\n# converts the character array to numeric array. Assigns levels \nto unique labels.\nle = LabelEncoder()\nle.fit(train_labels)\ntrain_labels = le.transform(train_labels)\ntest_labels = le.transform(test_labels)\nprint(le.classes_)\nprint(np.unique(train_labels, return_counts=True))\nprint(np.unique(test_labels, return_counts=True))\n#output\n['ham' 'spam']\n(array([0, 1]), array([3889, 568]))\n(array([0, 1]), array([936, 179]))\n# changing data types\nlabels_train = to_categorical(np.asarray(train_labels))\nlabels_test = to_categorical(np.asarray(test_labels))\nprint('Shape of data tensor:', train_data.shape)\nprint('Shape of label tensor:', labels_train.shape)\nprint('Shape of label tensor:', labels_test.shape)\n#output\nShape of data tensor: (4457, 300)\nShape of label tensor: (4457, 2)\nShape of label tensor: (1115, 2)\nEMBEDDING_DIM = 100\nprint(MAX_SEQUENCE_LENGTH)\n#output\n300\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 954, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9502839e-557c-4cd4-8bf8-3ffbd29badc2": {"__data__": {"id_": "9502839e-557c-4cd4-8bf8-3ffbd29badc2", "embedding": null, "metadata": {"page_label": "208", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "73c465cb-578f-4fcb-b30a-81ce4290a97c", "node_type": "4", "metadata": {"page_label": "208", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d6175bc37c80d0136f70c143782befe956c3abe3afea3016e9e3b4e102bcdde5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "208\n Step 2-5 Model building and\u00a0predicting\nWe are building the models using different deep learning approaches \nlike CNN, RNN, LSTM, and Bidirectional LSTM and comparing the \nperformance of each model using different accuracy metrics.\nWe can now define our CNN model.\nHere we define a single hidden layer with 128 memory units. The \nnetwork uses a dropout with a probability of 0.5. The output layer is a \ndense layer using the softmax activation function to output a probability \nprediction.\n# Import Libraries\nimport sys, os, re, csv, codecs, numpy as np, pandas as pd\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Input, LSTM, Embedding, \nDropout, Activation\nfrom keras.layers import Bidirectional, GlobalMaxPool1D, \nConv1D, SimpleRNN\nfrom keras.models import Model\nfrom keras.models import Sequential\nfrom keras import initializers, regularizers, constraints, \noptimizers, layers\nfrom keras.layers import Dense, Input, Flatten, Dropout, \nBatchNormalization\nfrom keras.layers import Conv1D, MaxPooling1D, Embedding\nfrom keras.models import Sequential\n print('Training CNN 1D model.')\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1247, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "0634b079-4d20-4c35-97af-c6bedfabc89e": {"__data__": {"id_": "0634b079-4d20-4c35-97af-c6bedfabc89e", "embedding": null, "metadata": {"page_label": "209", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "398bb147-33ff-49aa-904d-2152bc65ec73", "node_type": "4", "metadata": {"page_label": "209", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "66342ea24c806c9fd35c086731681802d1177bc154697d8b18216b43e1f41c0d", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "209\nmodel = Sequential()\nmodel.add(Embedding(MAX_NB_WORDS,\n EMBEDDING_DIM,\n input_length=MAX_SEQUENCE_LENGTH\n ))\nmodel.add(Dropout(0.5))\nmodel.add(Conv1D(128, 5, activation='relu'))\nmodel.add(MaxPooling1D(5))\nmodel.add(Dropout(0.5))\nmodel.add(BatchNormalization())\nmodel.add(Conv1D(128, 5, activation='relu'))\nmodel.add(MaxPooling1D(5))\nmodel.add(Dropout(0.5))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(2, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy',\n optimizer='rmsprop',\n metrics=['acc'])\nWe are now fitting our model to the data. Here we have 5 epochs and a \nbatch size of 64 patterns.\nmodel.fit(train_data, labels_train,\n batch_size=64,\n epochs=5,\n validation_data=(test_data, labels_test))\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 820, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "eebd14ea-71c2-4d98-a82a-d1e6a4305803": {"__data__": {"id_": "eebd14ea-71c2-4d98-a82a-d1e6a4305803", "embedding": null, "metadata": {"page_label": "210", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "840db8c4-bfd1-4190-b374-8c2bbe1f1c00", "node_type": "4", "metadata": {"page_label": "210", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "f35d3779b0f7aa49cd9c199b94d1ecb5d36c08958f8e38b9f7063c0894630f44", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "210\n#output\n \n#predictions on test data\npredicted=model.predict(test_data)\npredicted\n#output\narray([[0.5426713 , 0.45732868],\n [0.5431667 , 0.45683333],\n [0.53082496, 0.46917507],\n ...,\n [0.53582424, 0.46417573],\n [0.5305845 , 0.46941552],\n [0.53102577, 0.46897423]], dtype=float32)\n#model evaluation\nimport sklearn\nfrom sklearn.metrics import precision_recall_fscore_support as \nscore\nprecision, recall, fscore, support = score(labels_test, \npredicted.round())\nprint('precision: {}'.format(precision))\nprint('recall: {}'.format(recall))\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 570, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "58bd72a3-7060-44d3-9e44-dc3ff5b83aa6": {"__data__": {"id_": "58bd72a3-7060-44d3-9e44-dc3ff5b83aa6", "embedding": null, "metadata": {"page_label": "211", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1f353bf1-8717-41be-a5f8-8c984490032a", "node_type": "4", "metadata": {"page_label": "211", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "382ef84ee68d94e84c0a3eab358acd6b8c2236cf0e807bc0d24a81acfd15541b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "211\nprint('fscore: {}'.format(fscore))\nprint('support: {}'.format(support))\nprint(\"############################\")\nprint(sklearn.metrics.classification_report(labels_test, \npredicted.round()))\n#output\n \nWe can now define our RNN model.\n#import library\nfrom keras.layers.recurrent import SimpleRNN\n#model training\nprint('Training SIMPLERNN model.')\nmodel = Sequential()\nmodel.add(Embedding(MAX_NB_WORDS,\n EMBEDDING_DIM,\n input_length=MAX_SEQUENCE_LENGTH\n ))\nmodel.add(SimpleRNN(2, input_shape=(None,1)))\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss = 'binary_crossentropy', \noptimizer='adam',metrics = ['accuracy']) \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 662, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33ad246c-8a6d-4eee-8a62-647bb52d2734": {"__data__": {"id_": "33ad246c-8a6d-4eee-8a62-647bb52d2734", "embedding": null, "metadata": {"page_label": "212", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "593b7e3e-3b51-40ff-8ccb-dffcff8baaa3", "node_type": "4", "metadata": {"page_label": "212", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5a40074e4e7145ad11c49d3f0bda0df4e32a4b71bb611e10f3012e29f4fedf43", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "212\nmodel.fit(train_data, labels_train,\n batch_size=16,\n epochs=5,\n validation_data=(test_data, labels_test))\n#output\n \n# prediction on test data\npredicted_Srnn=model.predict(test_data)\npredicted_Srnn\n#output\narray([[0.9959137 , 0.00408628],\n [0.99576926, 0.00423072],\n [0.99044365, 0.00955638],\n ...,\n [0.9920791 , 0.00792089],\n [0.9958105 , 0.00418955],\n [0.99660563, 0.00339443]], dtype=float32)\n#model evaluation\nfrom sklearn.metrics import precision_recall_fscore_support as score\nprecision, recall, fscore, support = score(labels_test, \npredicted_Srnn.round())\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 599, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b61ad94f-7fe5-4351-ac12-9c152bae5ed5": {"__data__": {"id_": "b61ad94f-7fe5-4351-ac12-9c152bae5ed5", "embedding": null, "metadata": {"page_label": "213", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c7d179f-b156-41b8-9342-ab89cc58bf67", "node_type": "4", "metadata": {"page_label": "213", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "9068628431db220c8013886536ce4a529f7c0fb31f7a44789a76059cdc14c4b6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "213\nprint('precision: {}'.format(precision))\nprint('recall: {}'.format(recall)) \nprint('fscore: {}'.format(fscore))\nprint('support: {}'.format(support))\nprint(\"############################\")\nprint(sklearn.metrics.classification_report(labels_test, \npredicted_Srnn.round()))\n#output\n \nAnd here is our Long Short-Term Memory (LSTM):\n#model training\nprint('Training LSTM model.')\nmodel = Sequential()\nmodel.add(Embedding(MAX_NB_WORDS,\n EMBEDDING_DIM,\n input_length=MAX_SEQUENCE_LENGTH\n ))\nmodel.add(LSTM(output_dim=16, activation='relu', inner_\nactivation='hard_sigmoid',return_sequences=True))\nmodel.add(Dropout(0.2))\nmodel.add(BatchNormalization())\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 680, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "5f98ec88-9116-4e83-8409-27c62b9ba00d": {"__data__": {"id_": "5f98ec88-9116-4e83-8409-27c62b9ba00d", "embedding": null, "metadata": {"page_label": "214", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "32e14cbc-5b04-479f-94c9-13317bc8929f", "node_type": "4", "metadata": {"page_label": "214", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "0478f6626e8be5954372bc95f5ac1f42996121c52ac2b550100205a07df218cf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "214\nmodel.add(Flatten())\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss = 'binary_crossentropy', \noptimizer='adam',metrics = ['accuracy'])\nmodel.fit(train_data, labels_train,\n batch_size=16,\n epochs=5,\n validation_data=(test_data, labels_test))\n#output\n \n#prediction on text data\npredicted_lstm=model.predict(test_data)\npredicted_lstm\narray([[1.0000000e+00, 4.0581045e-09],\n [1.0000000e+00, 8.3188789e-13],\n [9.9999976e-01, 1.8647323e-07],\n ...,\n [9.9999976e-01, 1.8333606e-07],\n [1.0000000e+00, 1.7347950e-09],\n [9.9999988e-01, 1.3574694e-07]], dtype=float32) \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 607, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "69d86548-9ff3-4eb4-bd32-ca5533a38859": {"__data__": {"id_": "69d86548-9ff3-4eb4-bd32-ca5533a38859", "embedding": null, "metadata": {"page_label": "215", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a5ec5f19-7494-419c-9e49-80524c53925e", "node_type": "4", "metadata": {"page_label": "215", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "657938923ecbc77108ab22052631ed3dff2ab5a9705ab57a1f41125f5ad7ffc5", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "215\n#model evaluation\nfrom sklearn.metrics import precision_recall_fscore_support as \nscore\nprecision, recall, fscore, support = score(labels_test, \npredicted_lstm.round())\nprint('precision: {}'.format(precision))\nprint('recall: {}'.format(recall))\nprint('fscore: {}'.format(fscore))\nprint('support: {}'.format(support))\nprint(\"############################\")\nprint(sklearn.metrics.classification_report(labels_test, \npredicted_lstm.round()))\n#output\n \nFinally, let\u2019s see what is Bidirectional LSTM and implement the same.\nAs we know, LSTM preserves information from inputs using the \nhidden state. In bidirectional LSTMs, inputs are fed in two ways: one \nfrom previous to future and the other going backward from future to \npast, helping in learning future representation as well. Bidirectional \nLSTMs are known for producing very good results as they are capable of \nunderstanding the context better.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 934, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f6dde58e-360a-4d93-ad5f-831f972260eb": {"__data__": {"id_": "f6dde58e-360a-4d93-ad5f-831f972260eb", "embedding": null, "metadata": {"page_label": "216", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75abc701-9547-4db1-88db-b9a70152bb53", "node_type": "4", "metadata": {"page_label": "216", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "0ed089d27e7c74807172082fe0423635bd2e929cd120aa52e6e6825dbe6faa58", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "216\n#model training\nprint('Training Bidirectional LSTM model.') \nmodel = Sequential()\nmodel.add(Embedding(MAX_NB_WORDS,\n EMBEDDING_DIM,\n input_length=MAX_SEQUENCE_LENGTH\n ))\nmodel.add(Bidirectional(LSTM(16, return_sequences=True, \ndropout=0.1, recurrent_dropout=0.1)))\nmodel.add(Conv1D(16, kernel_size = 3, padding = \"valid\", \nkernel_initializer = \"glorot_uniform\"))\nmodel.add(GlobalMaxPool1D())\nmodel.add(Dense(50, activation=\"relu\"))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(2,activation='softmax'))\nmodel.compile(loss = 'binary_crossentropy', \noptimizer='adam',metrics = ['accuracy'])\nmodel.fit(train_data, labels_train,\n batch_size=16,\n epochs=3,\n validation_data=(test_data, labels_test))\n#output\n \nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 735, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dd63543e-3aa2-4b0e-ada8-440b5c9385be": {"__data__": {"id_": "dd63543e-3aa2-4b0e-ada8-440b5c9385be", "embedding": null, "metadata": {"page_label": "217", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ede2a2e5-6960-42c7-b0c9-f404a5d8f00e", "node_type": "4", "metadata": {"page_label": "217", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b80c3545ba5d307b6d5482a679aabf075ee9209927705a29438c53a63bce37f0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "217\n# prediction on test data\npredicted_blstm=model.predict(test_data) \npredicted_blstm\n#output\narray([[9.9999976e-01, 2.6086647e-07],\n [9.9999809e-01, 1.9633851e-06],\n [9.9999833e-01, 1.6918856e-06],\n ...,\n [9.9999273e-01, 7.2622524e-06],\n [9.9999964e-01, 3.3541210e-07],\n [9.9999964e-01, 3.5427794e-07]], dtype=float32)\n#model evaluation\nfrom sklearn.metrics import precision_recall_fscore_support as \nscore\nprecision, recall, fscore, support = score(labels_test, \npredicted_blstm.round())\nprint('precision: {}'.format(precision))\nprint('recall: {}'.format(recall))\nprint('fscore: {}'.format(fscore))\nprint('support: {}'.format(support))\nprint(\"############################\")\nprint(sklearn.metrics.classification_report(labels_test, \npredicted_blstm.round()))\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 794, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "e8623e5a-b1ce-4c60-b4b3-25a9ad741c01": {"__data__": {"id_": "e8623e5a-b1ce-4c60-b4b3-25a9ad741c01", "embedding": null, "metadata": {"page_label": "218", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "09216f3b-90d7-4f81-ad64-eb2e83310f71", "node_type": "4", "metadata": {"page_label": "218", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "5ea3f36988a92cc1ca03465e8d415b84c5b7a08c114ee24333ae0dc79a279af0", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "218\n#output\n \nWe can see that Bidirectional LSTM outperforms the rest of the \nalgorithms. \n Recipe 6-3. Next Word Prediction\nAutofill/showing what could be the potential sequence of words saves a \nlot of time while writing emails and makes users happy to use it in any \nproduct.\n Problem\nYou want to build a model to predict/suggest the next word based on a \nprevious sequence of words using Email Data.\nLike you see in the below image, language is being suggested as the \nnext word.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 516, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d75ed1f1-b824-411e-aede-d87787154fb7": {"__data__": {"id_": "d75ed1f1-b824-411e-aede-d87787154fb7", "embedding": null, "metadata": {"page_label": "219", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "567f0db9-701b-41e8-92a3-f1a966b1d2f9", "node_type": "4", "metadata": {"page_label": "219", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "cd9a78913330ebe118826d4d43edbc2c9eab5b3e803642dd105ff762c87b7738", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "219\n \n Solution\nIn this section, we will build an LSTM model to learn sequences of words \nfrom email data. We will use this model to predict the next word.\n How It Works\nLet's follow the steps in this section to build the next word prediction \nmodel using the deep learning approach.\n Step 3-1 Understanding/defining business problem\nPredict the next word based on the sequence of words or sentences.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 433, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a4446c47-231e-439e-a508-b2655bd3aa7c": {"__data__": {"id_": "a4446c47-231e-439e-a508-b2655bd3aa7c", "embedding": null, "metadata": {"page_label": "220", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c8b90021-81b5-40e9-8646-855561220ee0", "node_type": "4", "metadata": {"page_label": "220", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "1d7d4cd183771211c7d8a502e0991f140b4d69defde36f711da5547a6b6c4a28", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "220\n Step 3-2 Identifying potential data sources, collection, \nand\u00a0understanding\nFor this problem, let us use the same email data used in Recipe 4-6 from \nChapter 4. This has a lot less data, but still to showcase the working flow, \nwe are fine with this data. The more data, the better the accuracy.\nfile_content = pd.read_csv('spam.csv', encoding = \"ISO-8859-1\")\n# Just selecting emails and connverting it into list\nEmail_Data = file_content[[ 'v2']]\nlist_data = Email_Data.values.tolist()\nlist_data\n#output\n[[ 'Go until jurong point, crazy.. Available only in bugis n \ngreat world la e buffet... Cine there got amore wat...'],\n ['Ok lar... Joking wif u oni...'],\n [ \"Free entry in 2 a wkly comp to win FA Cup final tkts 21st \nMay 2005. Text FA to 87121 to receive entry question(std txt \nrate)T&C's apply 08452810075over18's\"],\n ['U dun say so early hor... U c already then say...'],\n [\"Nah I don't think he goes to usf, he lives around here though\"],\n [\" FreeMsg Hey there darling it's been 3 week's now and no word \nback! I'd like some fun you up for it still? Tb ok! XxX std \nchgs to send, \u00e5\u00a31.50 to rcv\"],\n [' Even my brother is not like to speak with me. They treat me \nlike aids patent.'],\n [\" As per your request 'Melle Melle (Oru Minnaminunginte \nNurungu Vettam)' has been set as your callertune for all \nCallers. Press *9 to copy your friends Callertune\"],\nChapter 6  Deep Learning for\u00a0 nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1402, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7dc5cd97-4bc1-49db-8eb8-a0402f0a3da8": {"__data__": {"id_": "7dc5cd97-4bc1-49db-8eb8-a0402f0a3da8", "embedding": null, "metadata": {"page_label": "221", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9f0d6754-0242-4f15-b6e0-f099ad2c086b", "node_type": "4", "metadata": {"page_label": "221", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "0b8464a57f4e08d0707f5bd09b58a65311813dfcb57a678bf1ea45c76dd156b1", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "221\n [ 'WINNER!! As a valued network customer you have been selected \nto receivea \u00e5\u00a3900 prize reward! To claim call 09061701461. \nClaim code KL341. Valid 12 hours only.'] ,\n [ 'Had your mobile 11 months or more? U R entitled to Update \nto the latest colour mobiles with camera for Free! Call The \nMobile Update Co FREE on 08002986030'], \n Step 3-3 Importing and\u00a0installing necessary libraries\nHere are the libraries:\nimport numpy as np\nimport random\nimport pandas as pd\nimport sys\nimport os\nimport time\nimport codecs\nimport collections\nimport numpy\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import LSTM\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.utils import np_utils\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nimport scipy\nfrom scipy import spatial\nfrom nltk.tokenize.toktok import ToktokTokenizer\nimport re\ntokenizer = ToktokTokenizer()\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 971, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cd67376f-16f1-4baf-86e2-86d0e02c947c": {"__data__": {"id_": "cd67376f-16f1-4baf-86e2-86d0e02c947c", "embedding": null, "metadata": {"page_label": "222", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8b31499-b19e-4343-a4d0-8e2ab04cd358", "node_type": "4", "metadata": {"page_label": "222", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "46949c24beac3b82b4b27382c1cfdcbc3f5a9500fb623d6b4f9eb9aca8473b53", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "222\n Step 3-4 Processing the\u00a0data\nNow we process the data:\n#Converting list to string\nfrom collections import Iterable\ndef flatten(items):\n    \"\"\"Yield items from any nested iterable\"\"\"\n    for x in items:\n         if isinstance(x, Iterable) and not isinstance(x,  \n(str, bytes)):\n            for sub_x in flatten(x):\n                yield sub_x\n        else:\n            yield x\nTextData=list(flatten(list_data))\nTextData = \".join(TextData)\n# Remove unwanted lines and converting into lower case\nTextData = TextData.replace('\\n',\")\nTextData = TextData.lower()\npattern = r'[^a-zA-z0-9\\s]'\nTextData = re.sub(pattern, \", \".join(TextData))\n# Tokenizing\ntokens = tokenizer.tokenize(TextData)\ntokens = [token.strip() for token in tokens]\n# get the distinct words and sort it\nword_counts = collections.Counter(tokens)\nword_c = len(word_counts)\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 870, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "ded1ba96-9f89-48f0-ad56-c7d714432850": {"__data__": {"id_": "ded1ba96-9f89-48f0-ad56-c7d714432850", "embedding": null, "metadata": {"page_label": "223", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4084ba60-0e11-429b-a8a0-d1830e8fbca1", "node_type": "4", "metadata": {"page_label": "223", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "06e9025decc3f1b232a57519b3fae900919c5d6e39f99b0a705ff2126a587d07", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "223\nprint(word_c)\ndistinct_words = [x[0] for x in word_counts.most_common()]\ndistinct_words_sorted = list(sorted(distinct_words))\n# Generate indexing for all words\nword_index = {x: i for i, x in enumerate(distinct_words_sorted)}\n# decide on sentence length\nsentence_length = 25\n Step 3-5 Data preparation for\u00a0modeling\nHere we are dividing the mails into sequence of words with a fixed length \nof 10 words (you can choose anything based on the business problem and \ncomputation power). We are splitting the text by words sequences. When \ncreating these sequences, we slide this window along the whole document \none word at a time, allowing each word to learn from its preceding one.\n#prepare the dataset of input to output pairs encoded as integers\n# Generate the data for the model\n#input = the input sentence to the model with index\n#output = output of the model with index\nInputData = []\nOutputData = []\nfor i in range(0, word_c - sentence_length, 1):\n    X = tokens[i:i + sentence_length]\n    Y = tokens[i + sentence_length]\n    InputData.append([word_index[char] for char in X])\n    OutputData.append(word_index[Y])\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1152, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7efde2bf-2497-49dc-b0c7-ef5302175c78": {"__data__": {"id_": "7efde2bf-2497-49dc-b0c7-ef5302175c78", "embedding": null, "metadata": {"page_label": "224", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bbdacd90-1ad1-4053-9dd4-6f05dcec4d2a", "node_type": "4", "metadata": {"page_label": "224", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "e7d2c37837fc212cb69798dc96bd6c641318f23ad675dd0c1fc852d4a57961ce", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "224\nprint (InputData[:1])\nprint (\"\\n\")\nprint(OutputData[:1])\n#output\n[[5086, 12190, 6352, 9096, 3352, 1920, 8507, 5937, 2535, 7886, \n5214, 12910, 6541, 4104, 2531, 2997, 11473, 5170, 1595, 12552, \n6590, 6316, 12758, 12087, 8496]]\n[4292]\n# Generate  X\nX = numpy.reshape(InputData, (len(InputData), sentence_length, 1))\n# One hot encode the output variable\nY = np_utils.to_categorical(OutputData)\nY\n#output\narray([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]]) \n Step 3-6 Model building\nWe will now define the LSTM model. Here we define a single hidden LSTM \nlayer with 256 memory units. This model uses dropout 0.2. The output \nlayer is using the softmax activation function. Here we are using the ADAM \noptimizer.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 933, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f7910503-66d4-481a-89a0-81073f6e930b": {"__data__": {"id_": "f7910503-66d4-481a-89a0-81073f6e930b", "embedding": null, "metadata": {"page_label": "225", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "df7b4161-83bd-4d60-b70f-11beea6e772b", "node_type": "4", "metadata": {"page_label": "225", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "12797856927850b7e62b686c73e786850cd620528fd28751fe46884b0d7d527b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "225\n# define the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(256, input_shape=(X.shape[1], X.shape[2])))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(Y.shape[1], activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', \noptimizer='adam')\n#define the checkpoint\nfile_name_path=\"weights-improvement-{epoch:02d}-{loss:.4f}.hdf5\"\ncheckpoint = ModelCheckpoint(file_name_path, monitor='loss', \nverbose=1, save_best_only=True, mode='min')\ncallbacks = [checkpoint]\nWe can now fit the model to the data. Here we use 5 epochs and a \nbatch size of 128 patterns. For better results, you can use more epochs like \n50 or 100. And of course, you can use them on more data.\n#fit the model\nmodel.fit(X, Y, epochs=5, batch_size=128, callbacks=callbacks) \nNote We have not split the data into training and testing data. \nWe are not interested in the accurate model. as we all know, deep \nlearning models will require a lot of data for training and take a lot \nof time to train, so we are using a model checkpoint to capture all of \nthe model weights to file. We will use the best set of weights for our \nprediction.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1140, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6475e032-f81b-4dbd-b07a-ee3770810ca8": {"__data__": {"id_": "6475e032-f81b-4dbd-b07a-ee3770810ca8", "embedding": null, "metadata": {"page_label": "226", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14690d05-e6fe-4e10-8615-dcf58f09c781", "node_type": "4", "metadata": {"page_label": "226", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "b86eee03067cd9c3468bde35a7ef0a06dd3f44928dbd1dc9f1401a61693bb772", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "226\n#output\n \nAfter running the above code, you will have weight checkpoint files \nin your local directory. Pick the network weights file that is saved in your \nworking directory. For example, when we ran this example, below was the \ncheckpoint with the smallest loss that we achieved with 5 epochs.\n# load the network weights\nfile_name = \"weights-improvement-05-6.8213.hdf5\"\nmodel.load_weights(file_name)\nmodel.compile(loss='categorical_crossentropy', optimizer='adam') \n Step 3-7 Predicting next word\nWe will randomly generate a sequence of words and input to the model \nand see what it predicts.\n# Generating random sequence\nstart = numpy.random.randint(0, len(InputData))\ninput_sent = InputData[start]\n# Generate index of the next word of the email\nX = numpy.reshape(input_sent, (1, len(input_sent), 1))\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 840, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8b78db1-c305-4f86-8cfd-64cbbd8b2cb9": {"__data__": {"id_": "c8b78db1-c305-4f86-8cfd-64cbbd8b2cb9", "embedding": null, "metadata": {"page_label": "227", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0e77d9e8-f30e-4cc1-8230-798cb63bb713", "node_type": "4", "metadata": {"page_label": "227", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "3afc08659b9e9cb148adf83daeba9356c3bf688b4a3c2d81b45845eab5becfe4", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "227\npredict_word = model.predict(X, verbose=0)\nindex = numpy.argmax(predict_word)\nprint(input_sent)\nprint (\"\\n\")\nprint(index)\n# Output\n[9122, 1920, 8187, 5905, 6828, 9818, 1791, 5567, 1597, 7092, \n11606, 7466, 10198, 6105, 1837, 4752, 7092, 3928, 10347, 5849, \n8816, 7092, 8574, 7092, 1831] \n5849\n# Convert these indexes back to words\nword_index_rev = dict((i, c) for i, c in enumerate(tokens))\nresult = word_index_rev[index]\nsent_in = [word_index_rev[value] for value in input_sent]\nprint(sent_in)\nprint (\"\\n\")\nprint(result)\nResult :\n['us', 'came', 'use', 'respecthe', 'would', 'us', 'are', 'it', \n'you', 'to', 'pray', 'because', 'you', 'do', 'me', 'out', 'youre', \n'thk', 'where', 'are', 'mrng', 'minutes', 'long', '500', 'per']\nshut\nSo, given the 25 input words, it's predicting the word \u201cshut\u201d as the next \nword. Of course, its not making much sense, since it has been trained on \nmuch less data and epochs. Make sure you have great computation power \nand train on huge data with high number of epochs.\nChapter 6  Deep Learning for\u00a0nLp", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1039, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3fd5b295-7b20-4815-b280-9b50c73b98f9": {"__data__": {"id_": "3fd5b295-7b20-4815-b280-9b50c73b98f9", "embedding": null, "metadata": {"page_label": "229", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "943c1a3b-4d4b-4b1b-889a-577871e215bb", "node_type": "4", "metadata": {"page_label": "229", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "68f69c971d67fbd3734603508b0e9415e6fbe974e56478cce3d1ea1746aea8fc", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "229\u00a9 Akshay Kulkarni and Adarsha Shivananda 2019 \nA. Kulkarni and A. Shivananda, Natural Language Processing Recipes,  \nhttps://doi.org/10.1007/978-1-4842-4267-4\nIndex\nA\nActivation function, 186\nB\nBackward propagation, 189\nBidirectional LSTM, 212\nC\nCloud storage, 2\nContinuous Bag of Words  \n(CBOW), 84, 89\u201393\nConvolutional neural  \nnetworks (CNN)\ndata, 187\nlayers\nconvolution, 188\nflatten, 189\nfully connected, 189\npooling, 189\nsoftmax, 189\nReLU, 188\nCo-occurrence matrix, 75\nfunction, creation, 76\ngenerate, 67, 77\nlibraries importing, 75\nCosine similarity, 101\nCount vectorizer, 67, 70\u201371\nD\nData collection\nHTML file, 11\u201315\nJSON file/object, 8\u201311\nPDF files, 5\u20136\nTwitter API, 3\u20134\nWord files, 7\u20138\nData sources, 1\u20132\nDeep learning\nCNN (see Convolutional neural \nnetworks (CNN))\ncomponents of, 185\nIR (see Information  \nretrieval (IR))\nnext word prediction\ndata collection, 217\u2013218\ndata preparation, 220\u2013221\nhomepage, 216\nimporting and installing, 218\nmodel building, 221\u2013223\nprocess the data, 219\u2013220\nrandom sequence, 223\u2013224\nunderstanding/defining, 216", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1052, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "cb70a7c5-f84b-4ff1-9810-290cb8ddcf69": {"__data__": {"id_": "cb70a7c5-f84b-4ff1-9810-290cb8ddcf69", "embedding": null, "metadata": {"page_label": "230", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a6bc93e-cc68-4c19-859f-c332660bee19", "node_type": "4", "metadata": {"page_label": "230", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "10088e201f88060b6b6eab1f472ec97fc81e075d7a609b8a3f100ff881a34618", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "230\nrecurrent neural networks (RNN)\nBPTT , 191\nLSTM, 191\ntext classification\ndata preparation, 202\u2013204\nemail classifier, 200\u2013202\nmodel building, 205\u2013215\nE\nEnd-to-end processing  \npipeline, 37, 62\u201365\nEntity extraction model, 181\u2013182\nExploratory data analysis,  \n37, 56, 144\u2013150\ndataset, 57\nfrequency of words, 58\u201359\nimport libraries, 57\nNLTK/textblob library, 56\nnumber of words, 57\nWordcloud, 60\u201361\nF\nfastText, 67, 93\u201396\nFeature-based text summarization \nmethods, 170\u2013172\nFeature engineering\nco-occurrence matrix, 67, 75\u201377\ncount vectorizer, 67, 70\u201371\nfastText, 67, 93\u201396\nhash vectorizer, 67, 78\u201379\nN-grams, 67, 72\u201374\nOne Hot encoding, 67\u201369\nTF-IDF , 67, 79\u201381\nword embeddings, 67\nFlat files, 2\nFlattening, definition of, 189\nForward propagation, 189\nFree APIs, 2\nFully connected layer, 189\nG\nGovernment data, 2\nGraph-based ranking algorithm, 166\nH\nHadoop clusters, 2\nHamming distance, 101\nHash vectorizer, 67, 78\u201379\nHealth care claim data, 2\nHTML file, 11\nextracting\ninstances of tag, 14\ntag value, 13\ntext, 15\nfetching, 12\ninstall and import, libraries, 12\nparsing, 12\u201313\nI\nIndustry application\nmulticlass classification  \n(see Multiclass classification)\nDeep learning (cont.)\nIndex", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1184, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "45cc1895-847a-4727-881c-3266c35778ee": {"__data__": {"id_": "45cc1895-847a-4727-881c-3266c35778ee", "embedding": null, "metadata": {"page_label": "231", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8968ca03-1aed-44ea-9783-dfec7d31b327", "node_type": "4", "metadata": {"page_label": "231", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "2e6af5dda7232a3f03af6701daae8bba83fab2cb8d7bad8ccbf317bc6ca6e278", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "231\nsentiment analysis  \n(see Sentiment analysis)\ntext clustering (see Text \nclustering)\ntext similarity (see Text \nsimilarity function)\ntext summarization, 165\u2013172\nInformation retrieval (IR)\ncreate/import documents, 194\nIR system, creation, 195, 197\nlibraries, import, 193\u2013194\nresults and  \napplications, 197\u2013199\nword2vec, 195\nword embeddings, 192\u2013193\nJ, K\nJaccard Index, 101\nJaccard similarity, 101\nJSON file, 8\u201311\nL\nLanguage detection and \ntranslation, 97, 127\u2013128\nLemmatization, 37, 54\u201356\nLevenshtein distance, 101\nLinear activation functions, 186\nLong Short-Term Memory  \n(LSTM), 210\nLowercase, 37\u201340\nLuhn\u2019s Algorithm, 170\nM\nMetaphone, 103\nMulticlass classification\nimporting data, 132\u2013134\nimporting libraries, 131\nmodel building, evaluation, \n135\u2013136, 138\u2013139\nTF-IDF vectors, 135\nN\nNamed entity recognition  \n(NER), 97, 108\u2013109\nNatural language processing (NLP)\ncustomer sentiment analysis\ndata collection, 99\ndata requirement \nbrainstorming, 98\ndefine problem, 98\ndepth and breadth of \nproblem, 98\ninsights and deployment, 99\nmachine learning/deep \nlearning, 99\ntext preprocessing, 99\ntext to feature, 99\ninformation extraction,  \nNER, 97, 108\u2013109\nlanguage detection and \ntranslation, 97, 127\u2013128\nnoun phrase extraction, 97, 100\nPOS tagging (see Parts of speech \n(POS) tagging)\nIndex", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1290, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "33297f1d-bb5c-45cf-a1e5-aa8c7bf50544": {"__data__": {"id_": "33297f1d-bb5c-45cf-a1e5-aa8c7bf50544", "embedding": null, "metadata": {"page_label": "232", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "42ed0caf-9346-48e6-90b3-b4e41dba7294", "node_type": "4", "metadata": {"page_label": "232", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "821beaacbd45309666b25816a55911a90a90c4c9ce206934cfd21019546e749c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "232\nsentiment analysis, 97, 119\u2013121\nspeech to text, 97, 123\u2013125\ntext classification, 97, 114\u2013118\ntext similarity, 97, 101\u2013104\ntext to speech, 97, 126\u2013127\ntopic modeling, 97, 110\u2013113\nword sense disambiguation,  \n97, 121\u2013123\nN-grams, 67, 72\u201374\nNLP process\nentity extraction model, \n181\u2013182\npreprocessing, 181\nNonlinear activation  \nfunction, 186\nNoun phrase extraction, 97, 100\nO\nOne Hot encoding, 67\u201369\nP,  Q\nParts of speech (POS)  \ntagging, 97, 104\nNLTK, 105\u2013107\nrule based, 104\nstochastic based, 105\nstoring text, variable, 105\nPDF files, 5\u20136\nPipeline function, 62\u201365\nPunctuation removal, 37, 41\u201343\nR\nRectified linear unit activation \nfunction, 186\nRegular expressions\nbasic flags, 16\ndata extraction, ebook, 21\u201325\nemail IDs\nextracting, 20\nreplacing, 20\nfunctionality, 16\u201319\nraw data, 15\n\u201cre\u201d library, 16\nre.match() and re.search() \nfunctions, 19\ntokenization, 19\nS\nSentiment analysis, 97, 119\u2013121\nbuisness problem, 140\nbusiness insights, 151\ndataset, 140\u2013141\nexploratory data  \nanalysis, 144\u2013147\nsentiment scores, 148\u2013150\ntext preprocessing, 142\u2013143\nSigmoid/Logit activation  \nfunction, 186\nSkip-gram model, 84\u201389\nSoftmax function, 186, 189\nSoundex, 103\u2013104\nSpeech to text, 97, 123\u2013125\nSpelling correction, 37, 47\u201350\nNatural language processing  \n(NLP) (cont.)\nIndex", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1268, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d04f53a3-54d1-45b5-a6f5-10e49aab0e53": {"__data__": {"id_": "d04f53a3-54d1-45b5-a6f5-10e49aab0e53", "embedding": null, "metadata": {"page_label": "233", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5b4d889c-8339-4aac-8640-8f66b43491df", "node_type": "4", "metadata": {"page_label": "233", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "54e39efea7c77a9802a229687fee899c193b7682646e62e8233dbcd16f6c5fc2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "233\nSQL databases, 2\nStandardizing text, 46\u201347\nStemming, 37, 52\u201353\nStop words removal, 37, 43\u201345\nString handling, 26\nconcatenation, 28\nreplacing content, 27\nsubstring, 28\nT\nTanh function, 186\nTerm Frequency-Inverse \nDocument Frequency \n(TF-IDF), 67, 79\u201381\nText classification, 97\napplications, 114\ndata collection and \nunderstanding, 115\nmodel training, 118\nspam and ham, 114\ntext processing and feature \nengineering, 116\u2013117\nText clustering\ncluster behavior, 177\nclusters, plot graph, 178\u2013180\nimporting libraries, 173\u2013174\nK-means, 176\nsolution, 173\nTF-IDF feature  \nengineering, 174\u2013175\nText data preprocessing, 37\nimage, text, audio, and video, 38\nlemmatization, 54\u201356\nlowercasing, 38\u201340\npipeline function, 62\u201365\npunctuation removal, 41\u201343\nspelling correction, 47\u201350\nstandardization, 46\u201347\nstemming, 52\u201353\nstop words removal, 43\u201345\ntokenization, 50\u201352\nText preprocessing, 142\u2013143\nTextRank algorithm, 166, 168\nText similarity function, 97\nblocking, 154\u2013155\nchallenge, 152\ncosine similarity, 101\ncreating/reading, text data, 102\nduplication in the same  \ntable, 153\nECM classifier, 157\u2013159\nfinding, 102\nHamming distance, 101\nJaccard Index, 101\nJaccard similarity, 101\nLevenshtein distance, 101\nmetrics, 101\nmultiple tables, records,  \n159, 161\u2013165\nphonetic matching, 103\u2013104\nsimilarity measures, 156\u2013157\nText standardization, 37\ncustom function, 47\nlookup dictionary, 46\nshort words and  \nabbreviations, 46\ntext_std function, 47\nIndex", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1434, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "6cd01783-93e5-497e-8ec0-247c839e72af": {"__data__": {"id_": "6cd01783-93e5-497e-8ec0-247c839e72af", "embedding": null, "metadata": {"page_label": "234", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f74a0b95-2f14-45d3-b2d0-3604314e549f", "node_type": "4", "metadata": {"page_label": "234", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "86eea9bfa935111fbebd0582839c1fea9156ec9bbdbc4594efb25708a646e3ac", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "234\nText to speech, 97, 126\u2013127\nTokenization, 37, 50\u201352\nTopic modeling, 97, 110\ncleaning and  \npreprocessing, 111\u2013112\ndocument term  \nmatrix, 112\nLDA model, 113\ntext data, creation, 110\nTwitter API, data collection, 3\naccess token, 4\nconsumer key, 3\nconsumer secret, 3\nexecuting query,  \nPython, 4\u20135\nsocial media marketers, 3\nU\nUnsupervised learning  \nmethod, 162\nV\nVanishing gradients, 191\nW, X, Y , Z\nWeb scraping, 28\nbeautiful soup, 31\ndata frame, 34\u201335\ndownload content, beautiful \nsoup, 30\nIMDB website, 29\nlibraries, 29\nparsing data, HTML tags, 31\u201333\nurl, 30\nwebsite page structure, 30\nWikipedia, 2\nword2vec, 84\nCBOW, 85, 89\u201393\nskip-gram model, 84\u201389\nWordcloud, 60\u201361\nWord embeddings, 67\nchallenges, 82\u201383\nmachine/algorithm, 83\nvectors, 83\nword2vec (see word2vec)\nWord files, 7\u20138\nWord sense disambiguation,  \n97, 121\u2013123\nIndex", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 832, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "75e08a88-edf1-4f33-b4a0-66bab772eb56": {"__data__": {"id_": "75e08a88-edf1-4f33-b4a0-66bab772eb56", "embedding": null, "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f", "node_type": "4", "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c483d3db41c6b01496c9debc7b06394c33809c353585c583d5bfc51327377512", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c8c40876-bc2a-49f8-af2e-43468c8189ed", "node_type": "1", "metadata": {}, "hash": "9237ea4845de451231d177b5719a115fafe5e3ccfcc6c714fa1b113bb143c3cf", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Apa itu Machine Learning? Beserta Pengertian dan Cara Kerjanya\n Dicoding Intern 19 August 2020\n\nDi tengah pesatnya perkembangan teknologi kecerdasan buatan atau artificial intelligence (AI) saat ini. Belum banyak orang yang mengetahui bahwa kecerdasan buatan itu terdiri dari beberapa cabang, salah satunya adalah machine learning atau pembelajaran mesin. Teknologi machine learning (ML) ini merupakan salah satu cabang dari AI yang sangat menarik perhatian, kenapa? Karena machine learning merupakan mesin yang bisa belajar layaknya manusia.\n\nKembali pada kecerdasan buatan. Kecerdasan buatan pada pengaplikasiannya secara garis besar terbagi tujuh cabang, yaitu machine learning, natural language processing, expert system, vision, speech, planning dan robotics. Percabangan dari kecerdasan buatan tersebut dimaksudkan untuk mempersempit ruang lingkup saat pengembangan atau belajar AI, karena pada dasarnya kecerdasan buatan memiliki ruang lingkup yang sangat luas.\n\nCabang AI\n\nPenjelasan lebih lengkap mengenai AI, kamu bisa membacanya pada artikel berikut Apa Itu Kecerdasan Buatan? Berikut Pengertian dan Contohnya.\n\nPada artikel ini, kita akan berfokus pada salah satu cabang dari kecerdasan buatan yaitu machine learning (ML).  ML ini merupakan teknologi yang mampu mempelajari data yang ada dan melakukan tugas-tugas tertentu sesuai dengan apa yang ia pelajari. Sebelum kita membahas lebih jauh mengenai machine learning, mari kita telusuri terlebih definisinya.\n\nPengertian Machine Learning\nAI Robot\n\nTeknologi machine learning (ML) adalah mesin yang dikembangkan untuk bisa belajar dengan sendirinya tanpa arahan dari penggunanya. Pembelajaran mesin dikembangkan berdasarkan disiplin ilmu lainnya seperti statistika, matematika dan data mining sehingga mesin dapat belajar dengan menganalisa data tanpa perlu di program ulang atau diperintah.\n\nDalam hal ini machine learning memiliki kemampuan untuk memperoleh data yang ada dengan perintah ia sendiri. ML juga dapat mempelajari data yang ada dan data yang ia peroleh sehingga bisa melakukan tugas tertentu. Tugas yang dapat dilakukan oleh ML pun sangat beragam, tergantung dari apa yang ia pelajari.\n\nIstilah machine learning pertama kali dikemukakan oleh beberapa ilmuwan matematika seperti Adrien Marie Legendre, Thomas Bayes dan Andrey Markov pada tahun 1920-an dengan mengemukakan dasar-dasar machine learning dan konsepnya. Sejak saat itu ML banyak yang mengembangkan. Salah satu contoh dari penerapan ML yang cukup terkenal adalah Deep Blue yang dibuat oleh IBM pada tahun 1996.\n\nDeep Blue merupakan machine learning yang dikembangkan agar bisa belajar dan bermain catur. Deep Blue juga telah diuji coba dengan bermain catur melawan juara catur profesional dan Deep Blue berhasil memenangkan pertandingan catur tersebut.\n\nPeran machine learning banyak membantu manusia dalam berbagai bidang. Bahkan saat ini penerapan ML dapat dengan mudah kamu temukan dalam kehidupan sehari-hari.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2949, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "c8c40876-bc2a-49f8-af2e-43468c8189ed": {"__data__": {"id_": "c8c40876-bc2a-49f8-af2e-43468c8189ed", "embedding": null, "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f", "node_type": "4", "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c483d3db41c6b01496c9debc7b06394c33809c353585c583d5bfc51327377512", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75e08a88-edf1-4f33-b4a0-66bab772eb56", "node_type": "1", "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "d82e2ba21d36c48018a36bc4aa9cd7e4fd0fbfabd7a5182bc24d17efeda40544", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83e16036-328d-471b-af20-6d2f65679efb", "node_type": "1", "metadata": {}, "hash": "bd226509aba2345c84b2e61193c48d2f933f10b3daff83e269eb009f8cd879a2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Misalnya saat kamu menggunakan fitur face unlock untuk membuka perangkat smartphone kamu, atau saat kamu menjelajah di internet atau media sosial kamu akan sering disuguhkan dengan beberapa iklan. Iklan-iklan yang dimunculkan juga merupakan hasil pengolahan ML yang akan memberikan iklan sesuai dengan pribadi kamu.\n\nSebenarnya masih banyak contoh dari penerapan machine learning yang sering kamu jumpai. Lalu pertanyaanya, bagaimana ML dapat belajar? ML bisa belajar dan menganalisa data berdasarkan data yang diberikan saat awal pengembangan dan data saat ML sudah digunakan. ML akan bekerja sesuai dengan teknik atau metode yang digunakan saat pengembangan. Apa saja tekniknya? Yuk kita simak bersama. \n\nTeknik Belajar Machine Learning\nKecerdasan Buatan\n\nAda beberapa teknik yang dimiliki oleh machine learning, namun secara luas ML memiliki dua teknik dasar belajar, yaitu supervised dan unsupervised.\n\nSupervised Learning\nTeknik supervised learning merupakan teknik yang bisa kamu terapkan pada pembelajaran mesin yang bisa menerima informasi yang sudah ada pada data dengan memberikan label tertentu. Diharapkan teknik ini bisa memberikan target terhadap output yang dilakukan dengan membandingkan pengalaman belajar di masa lalu.\n\nMisalkan kamu mempunyai sejumlah film yang sudah kamu beri label dengan kategori tertentu. Kamu juga memiliki film dengan kategori komedi meliputi film 21 Jump Street dan Jumanji. Selain itu kamu juga punya kategori lain misalkan kategori film horror seperti The Conjuring dan It. Ketika kamu membeli film baru, maka kamu akan mengidentifikasi genre dan isi dari film tersebut. Setelah film teridentifikasi barulah kamu akan menyimpan film tersebut pada kategori yang sesuai.\n\nUnsupervised Learning\nTeknik unsupervised learning merupakan teknik yang bisa kamu terapkan pada machine learning yang digunakan pada data yang tidak memiliki informasi yang bisa diterapkan secara langsung. Diharapkan teknik ini dapat membantu menemukan struktur atau pola tersembunyi pada data yang tidak memiliki label.\n\nSedikit berbeda dengan supervised learning, kamu tidak memiliki data apapun yang akan dijadikan acuan sebelumnya. Misalkan kamu belum pernah sekalipun membeli film sama sekali, akan tetapi pada suatu waktu, kamu membeli sejumlah film dan ingin membaginya ke dalam beberapa kategori agar mudah untuk ditemukan. \n\nTentunya kamu akan mengidentifikasi film-film mana saja yang mirip. Dalam hal ini misalkan kamu mengidentifikasi berdasarkan dari genre film. Misalnya, kamu mempunyai film the Conjuring, maka kamu akan menyimpan film The Conjuring tersebut pada kategori film horror.\n\nCara Kerja Machine Learning\nMachine Learning vs Human\n\nCara kerja machine learning sebenarnya berbeda-beda sesuai dengan teknik atau metode pembelajaran seperti apa yang kamu gunakan pada ML. Namun pada dasarnya prinsip cara kerja pembelajaran mesin masih sama, meliputi pengumpulan data, eksplorasi data, pemilihan model atau teknik, memberikan pelatihan terhadap model yang dipilih dan mengevaluasi hasil dari ML.", "mimetype": "text/plain", "start_char_idx": 2950, "end_char_idx": 5983, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "83e16036-328d-471b-af20-6d2f65679efb": {"__data__": {"id_": "83e16036-328d-471b-af20-6d2f65679efb", "embedding": null, "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f", "node_type": "4", "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c483d3db41c6b01496c9debc7b06394c33809c353585c583d5bfc51327377512", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8c40876-bc2a-49f8-af2e-43468c8189ed", "node_type": "1", "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "daa402a1fdc3c54cf4caf1a9b59e42c1858ee9865189c9a06dbadd82d2d30ba2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07c75a1e-e995-41bf-9ab2-aade22069c61", "node_type": "1", "metadata": {}, "hash": "1e08ecebf11a4582c6f9ce1d4d19b8dfbcbda6af5cdf400a4c0a5989b7930b7e", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Untuk memahami cara kerja dari ML, mari kita ulas cara kerja dari beberapa penerapannya berikut ini.\n\nAlphaGo\n\nAlphaGo merupakan machine learning yang dikembangkan oleh Google. Saat awal dikembangkan AlphaGO akan dilatih dengan memberikan 100 ribu data pertandingan Go untuk ia pelajari. Setelah AlphaGo mempunyai bekal dan pengetahuan cara dan strategi bermain game Go dari mempelajari 100 ribu data pertandingan Go tersebut. AlphaGo akan belajar kembali dengan bermain Go bersama dengan dirinya sendiri dan setiap kali ia kalah ia akan memperbaiki cara ia bermain dan proses bermain ini akan diulang sampai jutaan kali.\n\nPerbaikan cara bermain AlphaGo dilakukan oleh dirinya sendiri berdasarkan pengalamannya saat ia bermain melawan dirinya sendiri atau melawan orang lain. AlphaGo juga bisa mensimulasikan beberapa pertandingan pada satu waktu secara bersamaan. Artinya dalam satu waktu ia bisa melakukan beberapa pertandingan Go sekaligus untuk dipelajari. Sehingga proses belajar dan pengalamannya bermain Go juga bisa lebih banyak dibanding manusia. Hal ini terbukti ketika AlphaGo bermain dengan juara dunia Go pada tahun 2016 dan ia bisa menjadi pemenangnya.\n\nDari penerapan machine learning pada AlphaGo, kita bisa memahami bahwa machine learning akan terus belajar selama ia digunakan. Sama halnya seperti fitur deteksi wajah di foto yang dimiliki Facebook ia akan belajar mengenal pola wajah kamu berdasarkan tanda yang kamu masukkan saat memposting sebuah foto. Dari orang yang kamu tandai pada foto tersebut ML akan menjadikan informasi tersebut sebagai media untuk belajar.\n\nJadi tidak heran apabila machine learning sering digunakan, maka tingkat akurasinya semakin baik dibanding di awal-awal. Hal ini dikarenakan machine learning telah banyak belajar seiring waktu dari pemakaian machine learning oleh pengguna. Seperti pada fitur deteksi wajah milik Facebook semakin banyak orang yang menggunakan fitur tersebut dan menandai orang-orang yang ada di foto maka tingkat akurasi orang yang dideteksi pun semakin baik.\n\n\u201cSebuah pembelajaran mesin adalah perangkat apa pun yang tindakannya dipengaruhi oleh pengalaman masa lalu\u201d (Nils John Nilsson)\n\nIngin tahu lebih lanjut mengenai machine learning serta bagian-bagian dan cara membuatnya? Kamu bisa kunjungi langsung akademi Dicoding Machine Learning Developer. Disana kamu akan belajar bagaimana konsep-konsep dari machine learning dan bagaimana cara menganalisa data sehingga kamu bisa membuat machine learning mu sendiri.\n\nPersiapkan karier teknologimu melalui Program Bangkit 2023.\nDapatkan pelatihan teknologi, softskill, dan bahasa Inggris sehingga kamu akan lebih siap berkarier di perusahaan maupun startup.\n\nPilih satu dari 3 alur belajar: Machine Learning, Mobile Development (Android), atau Cloud Computing.\n\nLalu, raih manfaat berikut ini.", "mimetype": "text/plain", "start_char_idx": 5984, "end_char_idx": 8799, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "07c75a1e-e995-41bf-9ab2-aade22069c61": {"__data__": {"id_": "07c75a1e-e995-41bf-9ab2-aade22069c61", "embedding": null, "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ae599cb2-6a59-4bb2-8078-16a71cd7519f", "node_type": "4", "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "c483d3db41c6b01496c9debc7b06394c33809c353585c583d5bfc51327377512", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83e16036-328d-471b-af20-6d2f65679efb", "node_type": "1", "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}, "hash": "a2dfa1b090e8d4935a3ab769c373c9f46085d43b0b2af54d43b519ae682279b2", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "Lalu, raih manfaat berikut ini.\n\nSertifikasi Global (Google Associate Android Developer & Associate Cloud Engineer, dan Tensorflow Developer\nKurikulum & Instruktur Industri Expert (Pilihan 3 alur belajar: Machine Learning, Mobile Development (Android), dan Cloud Computing\nKeterampilan untuk siap karier (Teknologi, Softskill, dan bahasa Inggris)\nKonversi SKS s.d. 20 SKS (Terafiliasi Kampus Merdeka \u2013 SIB)\nMelalui Career Fair, raih karier sukses di bidang IT.\nRaih Dana senilai Rp 140 juta dan mentor industri untuk membangun startup impian.\nYuk, dapatkan seluruh manfaat di atas secara GRATIS! Daftar sekarang di registration.bangkit.academy\n\nDari pembahasan pada artikel ini ada dua machine learning yang mampu mengalahkan manusia. Apakah ini akan menjadi ancaman? Atau malah membawa perubahan yang lebih baik? Tulis jawabanmu di kolom komentar, ya.", "mimetype": "text/plain", "start_char_idx": 8768, "end_char_idx": 9620, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"1fc78064-ea7c-4167-8ffe-98c190177d1e": {"node_ids": ["0ddf3ca2-ae0f-483f-a810-1fac3384e668"], "metadata": {"page_label": "C1", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "93cc72eb-740e-49e0-b912-52a352cc5a55": {"node_ids": ["684e74f6-044f-4ee3-a220-5424a71a6a76"], "metadata": {"page_label": "i", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "937d537a-0c6c-49c8-a68e-c7cf556599b3": {"node_ids": ["63f9dbd8-fd73-46ea-a7a3-2ba076010f1c"], "metadata": {"page_label": "ii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "76cf2f42-2b89-40fd-9158-41dfa4509bac": {"node_ids": ["8aea0a5a-8494-4e5c-b293-6e203f01d36e"], "metadata": {"page_label": "iii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "1a682b75-57ae-4469-822c-2d409ea4d47a": {"node_ids": ["0e3e9096-78a0-4b95-9c2d-1d1bed9fee13"], "metadata": {"page_label": "v", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "75e2caea-88ec-434e-8843-96afa1126480": {"node_ids": ["4bb5f568-8e43-452b-abb5-54844fdd7df5"], "metadata": {"page_label": "vi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "cd4e933a-4e7f-4200-9ec8-fa81813e8390": {"node_ids": ["0cd96dd7-0cd8-402f-9638-b26df1114052", "72204e42-59a3-4eb3-aa0c-4d2b81f57d84"], "metadata": {"page_label": "vii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e5abde96-3f6a-4c23-bce8-92f60f8ff767": {"node_ids": ["d6d49ed3-973f-45e8-aaf2-ae160466f419"], "metadata": {"page_label": "viii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "75b412d3-b1e4-4caf-bfcf-c13b11826af2": {"node_ids": ["be4fc48c-62c6-4cf0-a739-2eb7b424d3f8"], "metadata": {"page_label": "ix", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9bd203fe-3128-402c-a379-e167508de592": {"node_ids": ["11beefdb-c5b9-4f20-af21-90a62a4db18b", "1140755c-f52b-4456-8704-6e3ec8277eda"], "metadata": {"page_label": "x", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9385521a-f393-49a2-aa85-666445066e86": {"node_ids": ["0634c958-7e7b-4cd8-aa24-5ab8164fbbcc"], "metadata": {"page_label": "xi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "788d64a3-cf51-45da-acfe-ca16fa10667a": {"node_ids": ["47379d28-1b84-4799-a39f-39b73b72917b"], "metadata": {"page_label": "xii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "332c4430-573e-4657-bafa-244556849206": {"node_ids": ["73690160-affd-431b-8578-5574b7557c85"], "metadata": {"page_label": "xiii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "fd9ece08-9d5a-41cc-8283-68dcbcf9cd8d": {"node_ids": ["5be89bbe-c2be-4d12-84f3-8b6817a8ac8a"], "metadata": {"page_label": "xiv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "14829715-261b-4708-807b-db3ef7ac1309": {"node_ids": ["f3681ecb-5999-4d35-a68b-8f4b3feca2ab"], "metadata": {"page_label": "xv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "16517f0c-3ddf-4cd7-bfa2-af8ae3561c33": {"node_ids": ["a1ca83ea-4121-4b0a-84a4-d31b7cac72fa"], "metadata": {"page_label": "xvii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "79cef94f-d082-4cc0-8947-a9314abe67ad": {"node_ids": ["deff2b54-e241-48ea-af32-04ce290a74ec"], "metadata": {"page_label": "xix", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "7ed27810-d927-4876-b307-9c68e0e37cba": {"node_ids": ["43564e2d-1392-45e1-b6eb-8350986a4d21"], "metadata": {"page_label": "xx", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0038b57a-9f8d-4ad3-85f5-0a4a6eb67dc8": {"node_ids": ["7f91a037-3889-4547-8e35-b75000d03ec9"], "metadata": {"page_label": "xxi", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "dc1fe8dc-af02-4863-964e-620f837e4de8": {"node_ids": ["01aeef60-9af6-44ad-aa61-5def3a6012dc"], "metadata": {"page_label": "xxii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "93c87d61-a3c6-4d18-b2e6-af406e25dafb": {"node_ids": ["4244fec7-270f-426c-ad02-bc4961ba64b0"], "metadata": {"page_label": "xxiii", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "6106e3d8-03ba-4182-b432-0395c0c6daa1": {"node_ids": ["a577ec20-2358-4b44-bc57-c3f5ad0f5fcb"], "metadata": {"page_label": "xxiv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "bb3693ae-3f00-4e65-8975-5996b0799561": {"node_ids": ["a561f618-192a-4880-b73d-352267d1349b"], "metadata": {"page_label": "xxv", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8ef7b7fd-7ccc-463e-99df-4c4a33ad2fb6": {"node_ids": ["f45f0c42-664e-469c-975e-77211614ba7a"], "metadata": {"page_label": "1", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b8120285-e08d-4d5a-8771-c8036d7327d8": {"node_ids": ["fd9be728-5cb2-4d0d-9e76-7a249fea3acc"], "metadata": {"page_label": "2", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0fef6c74-27e7-4b06-9e8c-bc0a0aa6c12c": {"node_ids": ["d3df9556-5961-42e5-8ddc-97502470c3e4"], "metadata": {"page_label": "3", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "181cadfd-5b2e-46fc-8a24-bc3d6ebb1bce": {"node_ids": ["d957d865-f7a0-4037-9af3-c1074111afb5"], "metadata": {"page_label": "4", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "998b880a-dc06-4f31-8f91-0419d7c27580": {"node_ids": ["82a53663-c164-451f-aa61-9a6cdefa7b61"], "metadata": {"page_label": "5", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "479869ba-de91-4fe2-9885-a0078f07786e": {"node_ids": ["9ec6ac2a-9c59-4883-8832-3052e87ec9a2"], "metadata": {"page_label": "6", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "19fa349c-c052-4481-bfa7-8d4fc813cdcf": {"node_ids": ["edb88af1-ed95-44bd-a3d9-f0933511c990"], "metadata": {"page_label": "7", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "745f9cb4-f410-4e21-bcd9-39e7d9266a99": {"node_ids": ["036a034c-cbf3-4b04-b508-537430095c83"], "metadata": {"page_label": "8", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "1b7c0615-a836-43a7-b46d-5a90a494907e": {"node_ids": ["3f5c6d27-c7f7-4ca3-aba8-2326ce18e487"], "metadata": {"page_label": "9", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f11bf69b-469d-437a-a466-30e6ccd2a92b": {"node_ids": ["33eb9e8f-2f22-4939-a523-5db11fc3360c"], "metadata": {"page_label": "10", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "00ec6ac9-caa7-4aeb-9eb8-5973008c0c43": {"node_ids": ["a4900fd8-24a5-4716-a82d-4383895c2575"], "metadata": {"page_label": "11", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "3e41906b-466a-4fb5-a7ec-2b58dc8ae5c2": {"node_ids": ["2e87d6c6-d124-4099-9841-d7f9ab9e9a6b"], "metadata": {"page_label": "12", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9e568726-7098-428d-bbeb-0fc1d0f6772d": {"node_ids": ["7259e143-a6f9-4064-a681-2aa1a8da749c"], "metadata": {"page_label": "13", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8a1f228e-da52-4a35-ad14-9d43e2a5434e": {"node_ids": ["b9fad957-67ba-4f80-a93c-f4745a44c158"], "metadata": {"page_label": "14", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "eb8d1dc1-5210-44f3-956e-f2953500bca1": {"node_ids": ["c615a111-a248-4291-9f42-280162b33b44"], "metadata": {"page_label": "15", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "c9ac2dfe-19f7-4abd-8ba3-4be1b1b29728": {"node_ids": ["df9d2e77-aeae-42ee-9297-d7be09ab9d38"], "metadata": {"page_label": "16", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "506ce9c8-3223-48aa-9aa8-580ebd80361a": {"node_ids": ["49bc9586-539b-437d-803f-3c0408407bc1"], "metadata": {"page_label": "17", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "521db331-1c28-45c1-a2f8-1281bc95b45a": {"node_ids": ["09b4b64d-2b68-4aff-87d9-8d93b4d33ec6"], "metadata": {"page_label": "18", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "dec5d630-11c5-4b19-be9d-f3ab5e034619": {"node_ids": ["d7d7988c-a04b-4bf1-bd25-b34821182e3b"], "metadata": {"page_label": "19", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "cca06269-8c86-4187-99ca-fa98bd58fd7e": {"node_ids": ["5b5a9f83-9444-44be-925b-5241b9904514"], "metadata": {"page_label": "20", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f165c7cb-ef86-4c48-a256-63bdee108582": {"node_ids": ["d704191f-ca7e-438c-9f78-48310f823240"], "metadata": {"page_label": "21", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "067e13a8-c43d-4bc7-ae56-9a21c6084db9": {"node_ids": ["c9fa5f5a-b21b-4b33-ad21-fdee5c244096"], "metadata": {"page_label": "22", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b9c11804-5551-4b8c-b393-d1b5f0395f19": {"node_ids": ["afc9be9a-3e9c-46dc-8a10-ce5119aee4c5"], "metadata": {"page_label": "23", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "024849df-666b-46da-80c5-1af2417b2486": {"node_ids": ["08d7c105-3ed8-48c8-b6ed-431e902b7247"], "metadata": {"page_label": "24", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "fda53c78-1148-481e-936d-80ff4b680ffd": {"node_ids": ["08d9dfa9-a52b-46ce-be1b-4a921862af16"], "metadata": {"page_label": "25", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f098579b-dfd5-462d-8f4c-d9bdc7ea4374": {"node_ids": ["a29112f0-82a8-47d7-9fb9-2e9b8a4f2215"], "metadata": {"page_label": "26", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0691f2ee-29eb-472e-b1f4-c5eb24e299c7": {"node_ids": ["6b88a86a-bf3e-4ebb-8e64-830cee933314"], "metadata": {"page_label": "27", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "cbd1ed40-0742-4a7d-9a18-dc2fa04dd135": {"node_ids": ["a4576f7e-d29f-4e0b-812b-a84ba3ea0736"], "metadata": {"page_label": "28", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "c26aba46-f344-495e-ba3d-f5c7a78e8b47": {"node_ids": ["85208465-f245-4074-a384-2e8a66124dac"], "metadata": {"page_label": "29", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "dd090b03-7d30-4ed5-a2b3-187d23e76563": {"node_ids": ["fbb69ee6-d9e3-4eed-859a-b4eaa19a677a"], "metadata": {"page_label": "30", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "af49f4ca-efdd-4780-b2e8-5c5ccf00ec05": {"node_ids": ["e8f37534-c539-4b8e-80ed-ec64f2b6a2ae"], "metadata": {"page_label": "31", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9c3ba92a-3cb0-4d13-9f75-3d6300543746": {"node_ids": ["940ccba2-0ac8-4228-85db-dc2b585644a3"], "metadata": {"page_label": "32", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e7b405d4-df5c-49b0-989d-496fa7546953": {"node_ids": ["9f95594d-e27f-4304-95ca-7d30957ad42d"], "metadata": {"page_label": "33", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "00deea5d-d926-41db-a9c2-029e0d7698e4": {"node_ids": ["a3661a77-0c63-4350-8e75-9bd5568bfe37"], "metadata": {"page_label": "34", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "def17cd7-5e01-49b0-bcce-b1986be4bf8c": {"node_ids": ["2057cd90-07d6-4774-988d-32a2fd09ffbf"], "metadata": {"page_label": "35", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "698a8a74-e54a-432a-9149-3ae9f87b9562": {"node_ids": ["855a2c95-b507-4543-9bb1-3dedc0ee8801"], "metadata": {"page_label": "37", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "7c2fec44-3bfd-4272-aa88-fda2a7302ee6": {"node_ids": ["03db3124-915d-4811-b376-bcdd8120b68a"], "metadata": {"page_label": "38", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b9b21ca3-b8b6-4f7d-a5ae-2171d2af6874": {"node_ids": ["dc2d8b98-fcda-4075-bb25-a853582c4489"], "metadata": {"page_label": "39", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "26b94b5b-d3b4-4256-9940-78d4d0046a7e": {"node_ids": ["2da9a5a2-128a-4336-8814-f31d9964a410"], "metadata": {"page_label": "40", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "6251bbd6-6e3b-43a7-b707-a007793c7b03": {"node_ids": ["cbf9b61a-dbb4-45c0-bef4-f1b0140479e5"], "metadata": {"page_label": "41", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "6f372d4a-f16c-4429-95a6-2ade8d9e2aa9": {"node_ids": ["d8aa74b0-759a-427a-befa-07e993109b4e"], "metadata": {"page_label": "42", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9b72c592-4396-4cd0-ad52-f786bcd31984": {"node_ids": ["645cfe3d-6f3f-4740-8d2a-4f1068307565"], "metadata": {"page_label": "43", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "d05e3670-f9a1-434a-adb3-6bd0cb48366a": {"node_ids": ["00d0a91e-4e99-4e40-9ff2-91c54c818379"], "metadata": {"page_label": "44", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "d73c636b-772d-4fbd-85ed-4d0e20c12e2b": {"node_ids": ["2f87141a-7de3-47c1-a7d2-48342fc2dffc"], "metadata": {"page_label": "45", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "3eeee39b-136d-4c42-a651-b62e6f6676c8": {"node_ids": ["b15fb7e8-18b9-42ae-8ccc-c3dab29362cb"], "metadata": {"page_label": "46", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e2be1430-634a-44a7-bb14-97c3ae93224d": {"node_ids": ["91fef4b7-d2f1-4535-b9ab-92b09e065565"], "metadata": {"page_label": "47", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "06674421-1035-4740-9bfe-70909ee32b22": {"node_ids": ["e25340cf-9b19-4e4a-ab49-6035da8d1837"], "metadata": {"page_label": "48", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "c99639c6-395f-4bc0-88d2-e727ce4c8e7d": {"node_ids": ["41d58da0-6afc-4b35-99b7-3cbd19d30c15"], "metadata": {"page_label": "49", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "26d5cd0a-1915-4f5d-9ee7-ba2d6b280851": {"node_ids": ["bff72761-6026-4db9-9de6-0fe9ee764ff4"], "metadata": {"page_label": "50", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "c902ec95-2102-4fde-a931-f696aaa59f4f": {"node_ids": ["f9a440e3-f5f7-47a2-94b2-6df0420f7e63"], "metadata": {"page_label": "51", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "64ae019f-daf8-4e3c-9190-3156a73afbf7": {"node_ids": ["78eab3b9-7f8f-4582-8709-90509c0006c4"], "metadata": {"page_label": "52", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "190e7c32-5bb6-4779-bc87-1d189cefd086": {"node_ids": ["7ca19936-db15-4602-8f0d-9cf3a5f91e61"], "metadata": {"page_label": "53", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "041a159b-c2b8-4b32-aea2-dc5d653bda0b": {"node_ids": ["d5de7b7c-0215-4fcd-a7ce-59796e80b3f1"], "metadata": {"page_label": "54", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "2d2e539f-50e8-45c1-906c-d4eecfea7873": {"node_ids": ["ab0b87af-8643-4801-a077-c8cea679e029"], "metadata": {"page_label": "55", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "23d8fa53-baee-4bac-a42b-f5ca7fa81c57": {"node_ids": ["b23c88dd-d743-4232-9bb3-d57f8db10c97"], "metadata": {"page_label": "56", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "39cda3ca-0d0c-4a30-a16d-cee5f34625d4": {"node_ids": ["3d845e31-d100-45d5-bc06-78cf4dd8b6a4"], "metadata": {"page_label": "57", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "1f5dac9a-ad3f-4db3-967c-17cf4e7a01e3": {"node_ids": ["92b46045-c548-423c-9589-afd91ca103ac"], "metadata": {"page_label": "58", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "467857c1-e23a-428c-81e2-b58354c2e31e": {"node_ids": ["2561eee0-bf27-4ad5-9b88-ef4e5871358e"], "metadata": {"page_label": "59", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e7484857-7fab-4815-8446-41e8972babe9": {"node_ids": ["1a2391fc-8550-4219-b6f5-01a14a5f0924"], "metadata": {"page_label": "60", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8ba7052b-111e-4942-85af-452b9debf7a3": {"node_ids": ["75b32f32-25e7-4504-8737-3b66d6e10371"], "metadata": {"page_label": "61", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "56a58a3c-ab39-4ad1-a865-8b0f5a19e001": {"node_ids": ["de5976b7-9cb9-4997-8268-2ffd3f2b5b51"], "metadata": {"page_label": "62", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "cf275501-bb30-4630-8260-7bb57d2c01ba": {"node_ids": ["f1ab0c3d-966f-42f3-88ec-378da1b93da1"], "metadata": {"page_label": "63", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "fa9c7b79-c2d5-40a3-9a04-66b8dd9538f5": {"node_ids": ["4d23ab57-ceb6-45e2-b722-9cce21c2198b"], "metadata": {"page_label": "64", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0d26911d-c67c-424f-ac39-0c20e020f4dc": {"node_ids": ["3aaf69e8-1afb-459d-ab73-a6f5ce3543be"], "metadata": {"page_label": "65", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "31562bc2-6ad9-4b52-9b67-b113d9c9e76b": {"node_ids": ["3828c994-8a6f-4eff-b777-7ad6ed01e72d"], "metadata": {"page_label": "67", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "6d380e5c-37b5-4bf0-a82d-afaef7af1e4b": {"node_ids": ["cffa25e7-3c5b-493b-b407-c3a9d330614a"], "metadata": {"page_label": "68", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "d265890f-3ba3-433e-bce5-e91009873374": {"node_ids": ["510de054-451d-490c-abfa-a56bad77d8cf"], "metadata": {"page_label": "69", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9d4de25c-a719-4a26-98b7-7d5d2ce81a5b": {"node_ids": ["94749006-50ec-458d-a9fa-e23a1c1bfbb4"], "metadata": {"page_label": "70", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9a6280d5-c568-4a8d-b717-106bb5e089aa": {"node_ids": ["11b6aa3c-8dda-43f6-b4da-2d4a5c3ccaae"], "metadata": {"page_label": "71", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8c53cc7e-c22c-4049-96df-d2dab8d72145": {"node_ids": ["69c8e12d-a587-438a-8235-6eff72cbcdcb"], "metadata": {"page_label": "72", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "310624aa-2fcf-4c5c-a73e-db7ddc2d5da5": {"node_ids": ["8091cc5a-97de-424b-94fe-d0ba667bdcaf"], "metadata": {"page_label": "73", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9413569b-8885-4682-8231-0d1c61c7f426": {"node_ids": ["17c36ae8-77b3-4aa1-8564-855095cfd73c"], "metadata": {"page_label": "74", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "95c51f7d-9d54-4889-afec-6283d0b3550a": {"node_ids": ["658d4e68-a5e5-4fdb-993d-8c076a41e42d"], "metadata": {"page_label": "75", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "940aa899-06ea-4a73-bbac-dd661b1e6736": {"node_ids": ["18816e55-e883-445e-a23a-262aeb5841d6"], "metadata": {"page_label": "76", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "dfe88a7e-981b-4ba1-a92d-db95efe04f7a": {"node_ids": ["9cd4e61f-5cbc-4a9e-8a52-5a2302354ef6"], "metadata": {"page_label": "77", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9ad62dac-a812-477f-8b63-7e515f71adc9": {"node_ids": ["2af128f1-d628-4d2e-ab6c-d603a9ff30b9"], "metadata": {"page_label": "78", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "935b8148-2f43-495e-a165-8fd3f3b82e80": {"node_ids": ["7089574c-f26d-44c4-8503-040b62660d33"], "metadata": {"page_label": "79", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f903da9f-a2fc-417c-8f9f-6aeb5c20da39": {"node_ids": ["1aeac423-3fea-46f0-b5bb-e72244ee392a"], "metadata": {"page_label": "80", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ff0741f0-b9cb-4102-98e3-7cc6e65b7c61": {"node_ids": ["29960fdf-fe52-4f36-b17b-1df3c13963e4"], "metadata": {"page_label": "81", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "aedd1df4-f4b7-4cae-be44-9de39544658f": {"node_ids": ["96920b71-9c4c-443d-a292-e253f5af872f"], "metadata": {"page_label": "82", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "d3491f8d-09e8-419c-8d4e-017e94defcb2": {"node_ids": ["f6069ff2-3719-4901-8dc1-507eb3d3d6f6"], "metadata": {"page_label": "83", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "15631da4-1411-408a-952d-045e94357c9b": {"node_ids": ["83452570-b6e4-4305-9cd5-89d278a3da28"], "metadata": {"page_label": "84", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f582e90a-fdf1-4a27-97a1-3140be02b491": {"node_ids": ["083b6735-0907-452d-8dec-60f9d0f84cc0"], "metadata": {"page_label": "85", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "2618e903-bba0-487a-b68b-83c937a06020": {"node_ids": ["42b6b026-2f34-4e95-958b-ee45a25c7402"], "metadata": {"page_label": "86", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "6fc69100-3289-422b-981f-e69e2252f04c": {"node_ids": ["2813dff9-588e-45d3-a529-8a0d41e70179"], "metadata": {"page_label": "87", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "bab9c87e-cbef-4e35-a7cd-621e67a17d79": {"node_ids": ["33dbbe25-2f1b-4376-9674-ff547406c003"], "metadata": {"page_label": "88", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a282b95e-76c3-4aab-bfd3-92c048856308": {"node_ids": ["f02dffc1-9916-4f35-958c-af8bf13bfdb3"], "metadata": {"page_label": "89", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "007a4aa3-3666-41a5-9183-c700a9cef904": {"node_ids": ["1a00afd0-25ec-4aa5-a295-93d0f358cdc2"], "metadata": {"page_label": "90", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "c6f2cdf2-e3dc-462c-a3d3-ae26931f0e65": {"node_ids": ["8fdf3ff4-014f-4d18-a333-0e2ddea777c0"], "metadata": {"page_label": "91", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "57f3d04b-6fbf-441c-980f-e46ebaecc55d": {"node_ids": ["2d23f43b-386a-4077-9f73-07613de4d622"], "metadata": {"page_label": "92", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "100c06f3-70bb-415f-bcda-2fad0d1c1cac": {"node_ids": ["c0ab14d9-d29f-4101-b8fe-2d5228070273"], "metadata": {"page_label": "93", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b6f0ca96-d944-4d73-8315-97cf5c8ad3d1": {"node_ids": ["1675aa9d-5bce-4d0a-bcde-b6bb2a384bf2"], "metadata": {"page_label": "94", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "13947329-c54d-4c86-901a-511bb8753032": {"node_ids": ["2412c453-60ba-4331-92c7-da995edfd5f6"], "metadata": {"page_label": "95", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a7350025-1754-422b-aacc-869a13bb1805": {"node_ids": ["41fc6360-c05a-4ed4-b1d0-2d89e711f3c2"], "metadata": {"page_label": "96", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "5058d0de-fc90-4331-8f33-858482122957": {"node_ids": ["237ea2cc-e885-4499-a1ea-96007723b0e2"], "metadata": {"page_label": "97", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "1efa0a96-ca69-4f3e-91a6-7c651e568e16": {"node_ids": ["7f6fd917-eb92-4333-9461-a6cf484bb92a"], "metadata": {"page_label": "98", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "5fd6bff1-d3e6-425b-a614-0e00b78e321e": {"node_ids": ["48e50a9c-deaf-44bf-8500-ae1571546672"], "metadata": {"page_label": "99", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "fc6ca18c-01ba-4865-9a83-edfdfbc88f02": {"node_ids": ["aa85935f-ebe9-4d7f-ab1b-9e6752d9bcda"], "metadata": {"page_label": "100", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "644f9537-32a2-477f-80ae-7e09816a87d6": {"node_ids": ["4e4a5b9b-701b-4622-8971-6b52519b0fac"], "metadata": {"page_label": "101", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "7d62600d-d939-4f9f-8faa-6b58249421c1": {"node_ids": ["4fe38eb5-9d5f-49dc-9313-b6a11d479b3e"], "metadata": {"page_label": "102", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "485b9608-28cb-464b-934c-5041986ea7e7": {"node_ids": ["0e1b5ff4-efa2-484b-8025-3ecf5ceb92de"], "metadata": {"page_label": "103", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b4bf828a-a92d-4c7e-b481-737298f2415e": {"node_ids": ["29d47020-12aa-432d-b7ef-b0fc6d667cae"], "metadata": {"page_label": "104", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "4460a739-0778-48fb-9264-d1d47973cb8e": {"node_ids": ["90bd1a87-864b-4456-a782-32ea552c7d8a"], "metadata": {"page_label": "105", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b51da2c0-5a1d-4a8a-bd75-b7badb4fb94a": {"node_ids": ["a2ee67ab-a0f7-430f-bc85-494083f7b9e4"], "metadata": {"page_label": "106", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "cbc270dd-7139-43fd-a2e5-6ffad0c7d0c4": {"node_ids": ["e07f7beb-53c7-404f-a1ea-b93095af99b9"], "metadata": {"page_label": "107", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "3e7d8348-072d-42d8-a6ed-fa6c06bed413": {"node_ids": ["fa333f01-83a8-4516-9024-44eab8154b51"], "metadata": {"page_label": "108", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "7f1a1ef5-fd8b-404f-930a-079a6d2c9193": {"node_ids": ["d46f6800-8708-4d49-9c00-5084dacb4d8b"], "metadata": {"page_label": "109", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9fe96171-9e83-4d7c-9e9a-4a11b1f1cb2b": {"node_ids": ["529ca347-f0c4-4c4e-b1a0-36fceb78c978"], "metadata": {"page_label": "110", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a0635607-1f7c-4d33-a2ec-a5f127f6fbb8": {"node_ids": ["5b4ba3ea-c114-46d4-8a7f-fccf6f4290bc"], "metadata": {"page_label": "111", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ffed1bb5-ae2c-4b88-85a5-e7eacd4f1f2d": {"node_ids": ["1843d43d-2835-4e5b-b853-a7b6ededdbee"], "metadata": {"page_label": "112", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ab83186c-6632-4aa1-bd4d-4886df9713f0": {"node_ids": ["0d2b8f11-ba66-435c-b982-8e848c58a126"], "metadata": {"page_label": "113", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ced2817d-3870-49c2-b564-aa634cfbdbba": {"node_ids": ["4961bdab-bed5-4829-9a62-ef395ec2ce28"], "metadata": {"page_label": "114", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ccfae469-3d91-4fbd-a091-c9bc4d364198": {"node_ids": ["54472170-0995-4d87-8725-7cf5495df154"], "metadata": {"page_label": "115", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "5604b322-4d05-4472-832b-f5bd0b703a68": {"node_ids": ["683c7e01-5423-442a-9e01-d9dfdb4c0534"], "metadata": {"page_label": "116", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "29b8969b-bbc9-4587-9ca4-bd340120a4aa": {"node_ids": ["d85277e1-a0fe-4231-acf3-d6d1290f6e24"], "metadata": {"page_label": "117", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e01ad11f-a4e2-449d-95c0-530046007c6d": {"node_ids": ["1ccb9ffb-7323-4053-8be4-1aca96656acc"], "metadata": {"page_label": "118", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "19fdb505-cef2-42fe-b064-95ec8a4fbea6": {"node_ids": ["bf557c95-b2e1-4fbd-9164-52ddc53fa175"], "metadata": {"page_label": "119", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "060230c5-bb69-44af-9482-05c8f2bf7dc0": {"node_ids": ["3e0b29a1-1bef-4580-9eda-0895cffdacc4"], "metadata": {"page_label": "120", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8c6984aa-dcb3-4469-9379-1d2922949b40": {"node_ids": ["31f5b185-dbc0-4ab6-8404-9cb5807b58b8"], "metadata": {"page_label": "121", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b7d74deb-ec9c-485a-8a92-9b8ed8b821bf": {"node_ids": ["bab65dbe-8491-43a1-be0f-b76fafb8bda0"], "metadata": {"page_label": "122", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ab223abb-0a7b-4d84-8b80-a5568c3f01ff": {"node_ids": ["57a257b9-9dde-4bed-99c9-fc3935fe226a"], "metadata": {"page_label": "123", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "cd494963-ecb2-44a3-bc31-847820c68b00": {"node_ids": ["e9db37bf-772c-41c0-8fd9-46e65ee447aa"], "metadata": {"page_label": "124", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a75e0141-1417-4abe-bdc7-70413e55316d": {"node_ids": ["8ecacdcf-30c8-41de-b9ba-86f15e672e36"], "metadata": {"page_label": "125", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f23b9acb-eeaa-4513-9340-9a21ed6954d0": {"node_ids": ["4cb8438d-c313-4be3-85c5-8936e7bdeb0b"], "metadata": {"page_label": "126", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "3df6f536-ea22-4f2c-911c-02fbe7118229": {"node_ids": ["d8aef747-500b-44e5-844d-182fceb1c53d"], "metadata": {"page_label": "127", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "72763741-b01d-481b-bd09-46f3899a78d3": {"node_ids": ["f664a0f8-d29a-47ef-a74a-b7beb706cbae"], "metadata": {"page_label": "128", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "714ec507-0896-44aa-ae89-0ec98ccea9a7": {"node_ids": ["70b4213e-009c-42d8-a46a-ae72ffdf0991"], "metadata": {"page_label": "129", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8eb519ee-76cf-4db2-8954-a247818fdff6": {"node_ids": ["f5ab5366-de8f-4197-adf2-a651294578fb"], "metadata": {"page_label": "130", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0fae4ee6-d962-4347-91a0-ebbf93d558e7": {"node_ids": ["2697b7ab-0419-412b-8a2a-d6d98e95eb39"], "metadata": {"page_label": "131", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "de63a42e-6d58-4997-bfb3-e58ea11ce748": {"node_ids": ["7e76f11a-3145-4750-ab0f-26311feede61"], "metadata": {"page_label": "132", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "edf8e059-c964-4854-9887-ad2d6fecaeb8": {"node_ids": ["c373532f-7d1f-4449-b395-08aa5b92fcdf"], "metadata": {"page_label": "133", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e6b5dba8-d1c0-469d-a6a0-741a2c07027b": {"node_ids": ["13684e5a-92f3-47e4-8d6f-f2806c8546d9"], "metadata": {"page_label": "134", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "2a2aa94c-88fd-40f2-ad87-a232943b6fba": {"node_ids": ["fb36edd4-c448-4460-8c1d-8cee4f2d7f9c"], "metadata": {"page_label": "135", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "aca5c4f3-1022-46d1-a90c-021ab4ab7129": {"node_ids": ["08bfa745-9c8d-4302-9be5-f590ab3d2a72"], "metadata": {"page_label": "136", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a94be88f-e238-4004-b88a-726eba5e0296": {"node_ids": ["ad80c14c-5a84-4853-983e-714955aa6888"], "metadata": {"page_label": "137", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a5e3c7c6-c0e5-440b-82f5-44f6d2edb657": {"node_ids": ["b3b2ae06-6c94-40a8-9cea-0dc80c926587"], "metadata": {"page_label": "138", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0c0aef52-208d-4f11-8f08-f3f4b6d51032": {"node_ids": ["d71d9e6c-3d45-4bb4-9157-9c82eba85423"], "metadata": {"page_label": "139", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "67dfa0a6-4abc-4822-9a4a-4f35abd05085": {"node_ids": ["4315e452-6dcb-44f5-b554-d55b8a47ee12"], "metadata": {"page_label": "140", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e95a53db-59d9-43b2-a603-fe6837875221": {"node_ids": ["50ca534a-bcbf-466a-aee0-b91b54c246d5"], "metadata": {"page_label": "141", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "52947ac4-7a6a-4404-a868-60d87b8b4c84": {"node_ids": ["9d5aeb26-97de-4134-b0b3-714f4218ba1c"], "metadata": {"page_label": "142", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9fe608d3-9d31-4070-91a1-fe8c2628b4b1": {"node_ids": ["584cf30f-3e8f-4a94-a799-f7836b2fc688"], "metadata": {"page_label": "143", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9beb838d-2898-4fba-8a1b-b163dff6db33": {"node_ids": ["dc6338ec-f870-4371-b78a-16cdb05f19c7"], "metadata": {"page_label": "144", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0ed2d918-58cb-4fa4-a407-8bb73b97e3f4": {"node_ids": ["5912ce45-50b7-4701-b1ab-26d54aac913d"], "metadata": {"page_label": "145", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "74738175-42ff-4da1-ae30-aab93d2ca1df": {"node_ids": ["04a1b02e-3967-454c-8ec2-2b3babfea0df"], "metadata": {"page_label": "146", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "485504bc-a9cd-40f8-af6f-d936185b770d": {"node_ids": ["c8df6a4e-e4fe-4552-aaa8-fe50b800a3c4"], "metadata": {"page_label": "147", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ce0793c9-c9d0-4516-89f1-640c3b33c5f0": {"node_ids": ["e28eb991-1b94-4072-b5a4-628283a9f698"], "metadata": {"page_label": "148", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ae72cc41-af57-4eb6-aca5-45a68c3b1a87": {"node_ids": ["cbe1072f-b1f6-4b87-8bca-717bccca8c01"], "metadata": {"page_label": "149", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8788565c-4e78-4af6-85e8-1df101755bcc": {"node_ids": ["42419080-56d4-4d26-94e7-fb1f0c3096a3"], "metadata": {"page_label": "150", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "4c0fc5ea-f921-4c26-a94c-8dc1728f8383": {"node_ids": ["59d6bb82-5591-45d9-b5a4-9d8330f49841"], "metadata": {"page_label": "151", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "d9d5f245-e020-4bdd-93ce-7f442dc9a6ab": {"node_ids": ["d74cfdb6-167d-4c90-9f62-df231d713262"], "metadata": {"page_label": "152", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "75490930-70f9-4af4-a1f5-da9f7f3c0b16": {"node_ids": ["ac4df2e2-cf64-4d91-8373-1b2a5297779f"], "metadata": {"page_label": "153", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "1cfadb7d-3cef-4e79-a048-20401eee9cd0": {"node_ids": ["6128eb2a-6b5e-45f9-aff0-3ec528554e39"], "metadata": {"page_label": "154", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "36df0cb3-0a48-4a12-b686-4ce51925ce26": {"node_ids": ["0895e4ad-f346-434a-be08-2cb89a285d9e"], "metadata": {"page_label": "155", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "872cbf77-4bad-469b-9d04-cf4638d3b2e6": {"node_ids": ["112e7a96-f0b3-47c2-93be-469890af4a4d"], "metadata": {"page_label": "156", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0639b309-22a6-4cfd-82ad-3e4487fa7a0c": {"node_ids": ["0c24c8f2-a54c-45a0-836e-6b395741b098"], "metadata": {"page_label": "157", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "871fe5cd-8532-4c0b-bb0f-d29ffd50b00f": {"node_ids": ["1df2c3c4-1e00-4e35-afa9-daa640690159"], "metadata": {"page_label": "158", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "489993d1-fc5e-4abd-987c-a2642d40fa5b": {"node_ids": ["a7746003-3104-48f4-8009-7ddd5ac2df17"], "metadata": {"page_label": "159", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "59a487ee-3951-4d7c-9772-c1a48b14cdc7": {"node_ids": ["35064c4c-b0bb-477c-9cf3-ecc3891594f8"], "metadata": {"page_label": "160", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a8a9a2a8-413d-4b6b-8c13-76a6009023bb": {"node_ids": ["fb15f7e3-2cd0-4f2f-be80-8ca12f0d8dca"], "metadata": {"page_label": "161", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "12cefabd-993c-43b8-bfec-13cd62a35942": {"node_ids": ["dd3b760a-b6d1-4bd8-ba72-3ce79aa5765a"], "metadata": {"page_label": "162", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b84946d3-875d-4089-858d-4e17aa07f35c": {"node_ids": ["4c88063e-8427-46ea-9936-890663d5ce7d"], "metadata": {"page_label": "163", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "feb09f25-4454-43ef-8f30-4fbcce9f0ee6": {"node_ids": ["4a89dde7-eecb-4e12-98b0-03f344a52240"], "metadata": {"page_label": "164", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0369e09a-9540-43ed-acde-1e3f374fc5b2": {"node_ids": ["408b0146-282e-437d-af4c-23fde8dbec02"], "metadata": {"page_label": "165", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "e7395fa4-0985-4177-8c40-f860ef7cbfbf": {"node_ids": ["7d9a1a90-1ad0-4635-8964-2499151ad197"], "metadata": {"page_label": "166", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "4790a5ea-3660-440a-b801-8891b87d1f6e": {"node_ids": ["55e874a5-3817-403b-a931-2bcc4d602eb9"], "metadata": {"page_label": "167", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "df9dd199-68ad-4498-a2a9-401b015a3ef1": {"node_ids": ["5f93e77a-20b9-4304-a986-6dd6bf08a4d2"], "metadata": {"page_label": "168", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "5c658d5c-a01d-488f-832b-aeabf6700f53": {"node_ids": ["4eb192d7-1ecd-4e9b-a0ec-dbd2e0da141d"], "metadata": {"page_label": "169", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9fd8fc6d-ab69-40e7-9392-e7f2023f4f47": {"node_ids": ["550878fc-e6b2-4d47-ac27-ef323f2e501c"], "metadata": {"page_label": "170", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a4605570-ab36-4893-a17f-3f095cf4b5b1": {"node_ids": ["caf00f90-87b5-4fbf-8ad0-379a6c7ab67c"], "metadata": {"page_label": "171", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9354b29e-a095-442c-805e-6d2977c2c434": {"node_ids": ["50393566-0285-427d-a2ab-6f08c5804775"], "metadata": {"page_label": "172", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "5925acf1-bdfa-469f-99d7-79c1bea39d7c": {"node_ids": ["8d355dc1-16b8-4a8f-aa50-ad4336d1046b"], "metadata": {"page_label": "173", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b2bc8f01-c15e-4401-b248-352b7a8dc3c7": {"node_ids": ["88e8254f-5f55-4187-890e-21cbdad88ccc"], "metadata": {"page_label": "174", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "4bbf747e-b846-4068-a42b-1664a00cee01": {"node_ids": ["a44b6cbf-e7c9-4f1b-b162-7a935c0ef4b4"], "metadata": {"page_label": "175", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "2d6ccfa2-165f-42e9-b17d-371a9daabf9a": {"node_ids": ["a81024f6-0760-43a1-9991-77ac1bca7f52"], "metadata": {"page_label": "176", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "6ab45e9e-aba5-4de6-90c4-287a9cbe0628": {"node_ids": ["522dae54-3634-4ef2-9b3d-60c964786b5c"], "metadata": {"page_label": "177", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f2a2d583-0e5a-44a1-9e51-bae9c67b6cf1": {"node_ids": ["0ec4b0ad-ce47-4c25-ad98-7f9249723a94"], "metadata": {"page_label": "178", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "171c7bf9-2904-4ded-8341-2b9e4ada4733": {"node_ids": ["8418ba7a-45a6-4225-a79c-918387bd6a62"], "metadata": {"page_label": "179", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "82340a38-b2c6-42fd-9bc4-cb18b6beeb6d": {"node_ids": ["06341d7e-e1f2-4625-bc4f-0bc2d1ab7d3d"], "metadata": {"page_label": "180", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b29ad751-f79a-4c42-9b88-c3c083b74488": {"node_ids": ["00e5d97a-2eb0-4e93-b151-91ca48e8aa26"], "metadata": {"page_label": "181", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "29c5abe5-3b34-49f8-af4e-f61c18a6ac7c": {"node_ids": ["d366bcf8-baae-4868-aae2-60c54a62bd86"], "metadata": {"page_label": "182", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0e82ba89-6557-4b8c-b8c0-bc74b8627efc": {"node_ids": ["f074787a-e24c-4795-84c2-fb3fb3573ee8"], "metadata": {"page_label": "183", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "77215878-ae99-4a33-a21c-9d6063252670": {"node_ids": ["9c46119a-ee2c-4060-9ce4-7130d2301244"], "metadata": {"page_label": "185", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "08c98c90-cc25-48e0-ad44-4091af21472e": {"node_ids": ["ce293d1f-bf64-4311-bc5f-dd72f3791f2d"], "metadata": {"page_label": "186", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "b4884eb8-62e5-4a3a-a4f0-cdaefffd24cc": {"node_ids": ["af817e26-7d99-4854-84e1-090205a7122d"], "metadata": {"page_label": "187", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "173860ac-e8bc-4ddd-a7be-cf5accc32df1": {"node_ids": ["9d2e69db-6b6b-4b9d-91d1-73284ef39b9d"], "metadata": {"page_label": "188", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "1c7b52eb-1049-4072-9b8f-efc2200435b1": {"node_ids": ["008e7cab-2652-4a68-b89f-d06857898dfc"], "metadata": {"page_label": "189", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8f6d6eff-5772-4b1c-abb5-bb62a6223d26": {"node_ids": ["af14e3f9-4fde-4f85-aa9c-28d25fc50758"], "metadata": {"page_label": "190", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "dd5f0495-e2e0-4b7b-86fb-91a20f7bc5bf": {"node_ids": ["4aa58d5b-3ea8-4788-8d52-be7ee0af0bfc"], "metadata": {"page_label": "191", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ac07b51a-77a3-438a-9979-b5d233fd5913": {"node_ids": ["f5a5722d-263e-42d6-a8dc-f52891a73c6c"], "metadata": {"page_label": "192", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ac260c0c-fb46-4e91-a248-06ede4262334": {"node_ids": ["86cc07f6-aa82-4e47-8b31-ec08e82f75a5"], "metadata": {"page_label": "193", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "656adb28-d9eb-42fa-8a6d-672170726148": {"node_ids": ["51fd4089-5014-443a-89ad-193ea682a28c"], "metadata": {"page_label": "194", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "d9f0c233-0e5f-40b7-a717-33f7daf1a322": {"node_ids": ["6d49d8a4-5306-4e76-affb-ac6299bc28c7"], "metadata": {"page_label": "195", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a8aa2fe1-9c24-4540-91d1-3dab1eb0a034": {"node_ids": ["b161bda9-9d3f-4a3e-b53c-c67e209b2b3e"], "metadata": {"page_label": "196", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "545fcc79-cde7-4489-b822-f42eb2b0fa63": {"node_ids": ["017bdc6c-5669-4b3e-b197-0be6124329fb"], "metadata": {"page_label": "197", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "372c792f-c261-4e70-a33b-986ec93bf056": {"node_ids": ["18d24285-d692-45cd-a73d-fff00440c841"], "metadata": {"page_label": "198", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "7767a2db-642e-4808-8a35-2e74a62642be": {"node_ids": ["7f783308-9c61-4351-b411-4dd97bfa2c4a"], "metadata": {"page_label": "199", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "4c109406-2c19-4313-8501-31ed77725522": {"node_ids": ["f720afb1-6b8a-4466-ab92-a87a058d5c94"], "metadata": {"page_label": "200", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "cc156b81-3589-400d-a446-ebd6e1397926": {"node_ids": ["84d646bb-d583-49ef-ab52-689fcfe46590"], "metadata": {"page_label": "201", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "d174918a-3a87-405b-b195-b39afd3b2620": {"node_ids": ["7e221854-309e-4b4d-935a-d0f23f282472"], "metadata": {"page_label": "202", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "578bd1ef-90bc-4809-9d85-6667645212b7": {"node_ids": ["37ac774b-6b27-443f-93eb-4cac81e900fc"], "metadata": {"page_label": "203", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "14d26aa6-5446-4e09-bc2d-a337a5a8b8db": {"node_ids": ["da607bee-1929-423d-ac35-3144e81a82f9"], "metadata": {"page_label": "204", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "2c31c969-ae0f-4f57-ae1a-1d527bf942d1": {"node_ids": ["04d13512-1235-49c2-8bbe-a41195dca93a"], "metadata": {"page_label": "205", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "45fc436e-de3f-4ebc-9b61-0e49198d66c7": {"node_ids": ["6c3e0c68-e587-41a9-8298-9a389cf7441f"], "metadata": {"page_label": "206", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "7049309e-028c-4a9f-bb50-7e9efcef6c9c": {"node_ids": ["93a6947c-4c20-43c6-8cac-ca01e143b094"], "metadata": {"page_label": "207", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "73c465cb-578f-4fcb-b30a-81ce4290a97c": {"node_ids": ["9502839e-557c-4cd4-8bf8-3ffbd29badc2"], "metadata": {"page_label": "208", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "398bb147-33ff-49aa-904d-2152bc65ec73": {"node_ids": ["0634b079-4d20-4c35-97af-c6bedfabc89e"], "metadata": {"page_label": "209", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "840db8c4-bfd1-4190-b374-8c2bbe1f1c00": {"node_ids": ["eebd14ea-71c2-4d98-a82a-d1e6a4305803"], "metadata": {"page_label": "210", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "1f353bf1-8717-41be-a5f8-8c984490032a": {"node_ids": ["58bd72a3-7060-44d3-9e44-dc3ff5b83aa6"], "metadata": {"page_label": "211", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "593b7e3e-3b51-40ff-8ccb-dffcff8baaa3": {"node_ids": ["33ad246c-8a6d-4eee-8a62-647bb52d2734"], "metadata": {"page_label": "212", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8c7d179f-b156-41b8-9342-ab89cc58bf67": {"node_ids": ["b61ad94f-7fe5-4351-ac12-9c152bae5ed5"], "metadata": {"page_label": "213", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "32e14cbc-5b04-479f-94c9-13317bc8929f": {"node_ids": ["5f98ec88-9116-4e83-8409-27c62b9ba00d"], "metadata": {"page_label": "214", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "a5ec5f19-7494-419c-9e49-80524c53925e": {"node_ids": ["69d86548-9ff3-4eb4-bd32-ca5533a38859"], "metadata": {"page_label": "215", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "75abc701-9547-4db1-88db-b9a70152bb53": {"node_ids": ["f6dde58e-360a-4d93-ad5f-831f972260eb"], "metadata": {"page_label": "216", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ede2a2e5-6960-42c7-b0c9-f404a5d8f00e": {"node_ids": ["dd63543e-3aa2-4b0e-ada8-440b5c9385be"], "metadata": {"page_label": "217", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "09216f3b-90d7-4f81-ad64-eb2e83310f71": {"node_ids": ["e8623e5a-b1ce-4c60-b4b3-25a9ad741c01"], "metadata": {"page_label": "218", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "567f0db9-701b-41e8-92a3-f1a966b1d2f9": {"node_ids": ["d75ed1f1-b824-411e-aede-d87787154fb7"], "metadata": {"page_label": "219", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "c8b90021-81b5-40e9-8646-855561220ee0": {"node_ids": ["a4446c47-231e-439e-a508-b2655bd3aa7c"], "metadata": {"page_label": "220", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "9f0d6754-0242-4f15-b6e0-f099ad2c086b": {"node_ids": ["7dc5cd97-4bc1-49db-8eb8-a0402f0a3da8"], "metadata": {"page_label": "221", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f8b31499-b19e-4343-a4d0-8e2ab04cd358": {"node_ids": ["cd67376f-16f1-4baf-86e2-86d0e02c947c"], "metadata": {"page_label": "222", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "4084ba60-0e11-429b-a8a0-d1830e8fbca1": {"node_ids": ["ded1ba96-9f89-48f0-ad56-c7d714432850"], "metadata": {"page_label": "223", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "bbdacd90-1ad1-4053-9dd4-6f05dcec4d2a": {"node_ids": ["7efde2bf-2497-49dc-b0c7-ef5302175c78"], "metadata": {"page_label": "224", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "df7b4161-83bd-4d60-b70f-11beea6e772b": {"node_ids": ["f7910503-66d4-481a-89a0-81073f6e930b"], "metadata": {"page_label": "225", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "14690d05-e6fe-4e10-8615-dcf58f09c781": {"node_ids": ["6475e032-f81b-4dbd-b07a-ee3770810ca8"], "metadata": {"page_label": "226", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "0e77d9e8-f30e-4cc1-8230-798cb63bb713": {"node_ids": ["c8b78db1-c305-4f86-8cfd-64cbbd8b2cb9"], "metadata": {"page_label": "227", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "943c1a3b-4d4b-4b1b-889a-577871e215bb": {"node_ids": ["3fd5b295-7b20-4815-b280-9b50c73b98f9"], "metadata": {"page_label": "229", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8a6bc93e-cc68-4c19-859f-c332660bee19": {"node_ids": ["cb70a7c5-f84b-4ff1-9810-290cb8ddcf69"], "metadata": {"page_label": "230", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "8968ca03-1aed-44ea-9783-dfec7d31b327": {"node_ids": ["45cc1895-847a-4727-881c-3266c35778ee"], "metadata": {"page_label": "231", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "42ed0caf-9346-48e6-90b3-b4e41dba7294": {"node_ids": ["33297f1d-bb5c-45cf-a1e5-aa8c7bf50544"], "metadata": {"page_label": "232", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "5b4d889c-8339-4aac-8640-8f66b43491df": {"node_ids": ["d04f53a3-54d1-45b5-a6f5-10e49aab0e53"], "metadata": {"page_label": "233", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "f74a0b95-2f14-45d3-b2d0-3604314e549f": {"node_ids": ["6cd01783-93e5-497e-8ec0-247c839e72af"], "metadata": {"page_label": "234", "file_name": "Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/Natural Language Processing Recipes_ Unlocking Text Data with Machine Learning and Deep Learning using Python ( PDFDrive ).pdf", "file_type": "application/pdf", "file_size": 4008665, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}, "ae599cb2-6a59-4bb2-8078-16a71cd7519f": {"node_ids": ["75e08a88-edf1-4f33-b4a0-66bab772eb56", "c8c40876-bc2a-49f8-af2e-43468c8189ed", "83e16036-328d-471b-af20-6d2f65679efb", "07c75a1e-e995-41bf-9ab2-aade22069c61"], "metadata": {"file_path": "/home/zaens/Documents/learn-python/belajar-python/qa-system/data/sample.txt", "file_name": "sample.txt", "file_type": "text/plain", "file_size": 9626, "creation_date": "2025-01-17", "last_modified_date": "2025-01-17"}}}}